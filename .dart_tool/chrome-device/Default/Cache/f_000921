define(['dart_sdk', 'packages/petitparser/src/parser/combinator/optional.dart', 'packages/petitparser/src/parser/repeater/limited.dart'], (function load__packages__petitparser__src__parser__repeater__lazy_dart(dart_sdk, packages__petitparser__src__parser__combinator__optional$46dart, packages__petitparser__src__parser__repeater__limited$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const parser = packages__petitparser__src__parser__combinator__optional$46dart.src__core__parser;
  const context = packages__petitparser__src__parser__combinator__optional$46dart.src__context__context;
  const limited = packages__petitparser__src__parser__repeater__limited$46dart.src__parser__repeater__limited;
  var lazy = Object.create(dart.library);
  var greedy = Object.create(dart.library);
  var $length = dartx.length;
  var $add = dartx.add;
  var $last = dartx.last;
  var $isEmpty = dartx.isEmpty;
  var $removeLast = dartx.removeLast;
  var ParserL = () => (ParserL = dart.constFn(dart.legacy(parser.Parser)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var ContextL = () => (ContextL = dart.constFn(dart.legacy(context.Context)))();
  var JSArrayOfContextL = () => (JSArrayOfContextL = dart.constFn(_interceptors.JSArray$(ContextL())))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  const CT = Object.create(null);
  var L0 = "package:petitparser/src/parser/repeater/lazy.dart";
  var L1 = "package:petitparser/src/parser/repeater/greedy.dart";
  const _is_LazyRepeatingParser_default = Symbol('_is_LazyRepeatingParser_default');
  lazy.LazyRepeatingParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var JSArrayOfTL = () => (JSArrayOfTL = dart.constFn(_interceptors.JSArray$(TL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var LazyRepeatingParserOfTL = () => (LazyRepeatingParserOfTL = dart.constFn(lazy.LazyRepeatingParser$(TL())))();
    var ParserOfTL = () => (ParserOfTL = dart.constFn(parser.Parser$(TL())))();
    var ParserLOfTL = () => (ParserLOfTL = dart.constFn(dart.legacy(ParserOfTL())))();
    class LazyRepeatingParser extends limited.LimitedRepeatingParser$(dart.legacy(T)) {
      parseOn(context) {
        let current = context;
        let elements = JSArrayOfTL().of([]);
        while (dart.notNull(elements[$length]) < dart.notNull(this.min)) {
          let result = this.delegate.parseOn(current);
          if (dart.test(result.isFailure)) {
            return result.failure(ListLOfTL(), result.message);
          }
          elements[$add](TL().as(result.value));
          current = result;
        }
        for (;;) {
          let limiter = this.limit.parseOn(current);
          if (dart.test(limiter.isSuccess)) {
            return current.success(ListLOfTL(), elements);
          } else {
            if (this.max !== -1 && dart.notNull(elements[$length]) >= dart.notNull(this.max)) {
              return limiter.failure(ListLOfTL(), limiter.message);
            }
            let result = this.delegate.parseOn(current);
            if (dart.test(result.isFailure)) {
              return limiter.failure(ListLOfTL(), limiter.message);
            }
            elements[$add](TL().as(result.value));
            current = result;
          }
        }
      }
      fastParseOn(buffer, position) {
        let count = 0;
        let current = position;
        while (count < dart.notNull(this.min)) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (dart.notNull(result) < 0) {
            return -1;
          }
          current = result;
          count = count + 1;
        }
        for (;;) {
          let limiter = this.limit.fastParseOn(buffer, current);
          if (dart.notNull(limiter) >= 0) {
            return current;
          } else {
            if (this.max !== -1 && count >= dart.notNull(this.max)) {
              return -1;
            }
            let result = this.delegate.fastParseOn(buffer, current);
            if (dart.notNull(result) < 0) {
              return -1;
            }
            current = result;
            count = count + 1;
          }
        }
      }
      copy() {
        return new (LazyRepeatingParserOfTL()).new(ParserLOfTL().as(this.delegate), this.limit, this.min, this.max);
      }
    }
    (LazyRepeatingParser.new = function(parser, limit, min, max) {
      LazyRepeatingParser.__proto__.new.call(this, parser, limit, min, max);
      ;
    }).prototype = LazyRepeatingParser.prototype;
    dart.addTypeTests(LazyRepeatingParser);
    LazyRepeatingParser.prototype[_is_LazyRepeatingParser_default] = true;
    dart.addTypeCaches(LazyRepeatingParser);
    dart.setMethodSignature(LazyRepeatingParser, () => ({
      __proto__: dart.getMethods(LazyRepeatingParser.__proto__),
      copy: dart.fnType(dart.legacy(lazy.LazyRepeatingParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(LazyRepeatingParser, L0);
    return LazyRepeatingParser;
  });
  lazy.LazyRepeatingParser = lazy.LazyRepeatingParser$();
  dart.addTypeTests(lazy.LazyRepeatingParser, _is_LazyRepeatingParser_default);
  lazy['LazyRepeatingParserExtension|starLazy'] = function LazyRepeatingParserExtension$124starLazy(T, $this, limit) {
    return lazy['LazyRepeatingParserExtension|repeatLazy'](dart.legacy(T), $this, limit, 0, -1);
  };
  lazy['LazyRepeatingParserExtension|get#starLazy'] = function LazyRepeatingParserExtension$124get$35starLazy(T, $this) {
    return dart.fn(limit => lazy['LazyRepeatingParserExtension|starLazy'](dart.legacy(T), $this, limit), dart.fnType(dart.legacy(parser.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [ParserL()]));
  };
  lazy['LazyRepeatingParserExtension|plusLazy'] = function LazyRepeatingParserExtension$124plusLazy(T, $this, limit) {
    return lazy['LazyRepeatingParserExtension|repeatLazy'](dart.legacy(T), $this, limit, 1, -1);
  };
  lazy['LazyRepeatingParserExtension|get#plusLazy'] = function LazyRepeatingParserExtension$124get$35plusLazy(T, $this) {
    return dart.fn(limit => lazy['LazyRepeatingParserExtension|plusLazy'](dart.legacy(T), $this, limit), dart.fnType(dart.legacy(parser.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [ParserL()]));
  };
  lazy['LazyRepeatingParserExtension|repeatLazy'] = function LazyRepeatingParserExtension$124repeatLazy(T, $this, limit, min, max) {
    return new (lazy.LazyRepeatingParser$(dart.legacy(T))).new($this, limit, min, max);
  };
  lazy['LazyRepeatingParserExtension|get#repeatLazy'] = function LazyRepeatingParserExtension$124get$35repeatLazy(T, $this) {
    return dart.fn((limit, min, max) => lazy['LazyRepeatingParserExtension|repeatLazy'](dart.legacy(T), $this, limit, min, max), dart.fnType(dart.legacy(parser.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [ParserL(), intL(), intL()]));
  };
  const _is_GreedyRepeatingParser_default = Symbol('_is_GreedyRepeatingParser_default');
  greedy.GreedyRepeatingParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var JSArrayOfTL = () => (JSArrayOfTL = dart.constFn(_interceptors.JSArray$(TL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var GreedyRepeatingParserOfTL = () => (GreedyRepeatingParserOfTL = dart.constFn(greedy.GreedyRepeatingParser$(TL())))();
    var ParserOfTL = () => (ParserOfTL = dart.constFn(parser.Parser$(TL())))();
    var ParserLOfTL = () => (ParserLOfTL = dart.constFn(dart.legacy(ParserOfTL())))();
    class GreedyRepeatingParser extends limited.LimitedRepeatingParser$(dart.legacy(T)) {
      parseOn(context) {
        let current = context;
        let elements = JSArrayOfTL().of([]);
        while (dart.notNull(elements[$length]) < dart.notNull(this.min)) {
          let result = this.delegate.parseOn(current);
          if (dart.test(result.isFailure)) {
            return result.failure(ListLOfTL(), result.message);
          }
          elements[$add](TL().as(result.value));
          current = result;
        }
        let contexts = JSArrayOfContextL().of([current]);
        while (this.max === -1 || dart.notNull(elements[$length]) < dart.notNull(this.max)) {
          let result = this.delegate.parseOn(current);
          if (dart.test(result.isFailure)) {
            break;
          }
          elements[$add](TL().as(result.value));
          contexts[$add](current = result);
        }
        for (;;) {
          let limiter = this.limit.parseOn(contexts[$last]);
          if (dart.test(limiter.isSuccess)) {
            return contexts[$last].success(ListLOfTL(), elements);
          }
          if (dart.test(elements[$isEmpty])) {
            return limiter.failure(ListLOfTL(), limiter.message);
          }
          contexts[$removeLast]();
          elements[$removeLast]();
          if (dart.test(contexts[$isEmpty])) {
            return limiter.failure(ListLOfTL(), limiter.message);
          }
        }
      }
      fastParseOn(buffer, position) {
        let count = 0;
        let current = position;
        while (count < dart.notNull(this.min)) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (dart.notNull(result) < 0) {
            return -1;
          }
          current = result;
          count = count + 1;
        }
        let positions = JSArrayOfintL().of([current]);
        while (this.max === -1 || count < dart.notNull(this.max)) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (dart.notNull(result) < 0) {
            break;
          }
          positions[$add](current = result);
          count = count + 1;
        }
        for (;;) {
          let limiter = this.limit.fastParseOn(buffer, positions[$last]);
          if (dart.notNull(limiter) >= 0) {
            return positions[$last];
          }
          if (count === 0) {
            return -1;
          }
          positions[$removeLast]();
          count = count - 1;
          if (dart.test(positions[$isEmpty])) {
            return -1;
          }
        }
      }
      copy() {
        return new (GreedyRepeatingParserOfTL()).new(ParserLOfTL().as(this.delegate), this.limit, this.min, this.max);
      }
    }
    (GreedyRepeatingParser.new = function(parser, limit, min, max) {
      GreedyRepeatingParser.__proto__.new.call(this, parser, limit, min, max);
      ;
    }).prototype = GreedyRepeatingParser.prototype;
    dart.addTypeTests(GreedyRepeatingParser);
    GreedyRepeatingParser.prototype[_is_GreedyRepeatingParser_default] = true;
    dart.addTypeCaches(GreedyRepeatingParser);
    dart.setMethodSignature(GreedyRepeatingParser, () => ({
      __proto__: dart.getMethods(GreedyRepeatingParser.__proto__),
      copy: dart.fnType(dart.legacy(greedy.GreedyRepeatingParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(GreedyRepeatingParser, L1);
    return GreedyRepeatingParser;
  });
  greedy.GreedyRepeatingParser = greedy.GreedyRepeatingParser$();
  dart.addTypeTests(greedy.GreedyRepeatingParser, _is_GreedyRepeatingParser_default);
  greedy['GreedyRepeatingParserExtension|starGreedy'] = function GreedyRepeatingParserExtension$124starGreedy(T, $this, limit) {
    return greedy['GreedyRepeatingParserExtension|repeatGreedy'](dart.legacy(T), $this, limit, 0, -1);
  };
  greedy['GreedyRepeatingParserExtension|get#starGreedy'] = function GreedyRepeatingParserExtension$124get$35starGreedy(T, $this) {
    return dart.fn(limit => greedy['GreedyRepeatingParserExtension|starGreedy'](dart.legacy(T), $this, limit), dart.fnType(dart.legacy(parser.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [ParserL()]));
  };
  greedy['GreedyRepeatingParserExtension|plusGreedy'] = function GreedyRepeatingParserExtension$124plusGreedy(T, $this, limit) {
    return greedy['GreedyRepeatingParserExtension|repeatGreedy'](dart.legacy(T), $this, limit, 1, -1);
  };
  greedy['GreedyRepeatingParserExtension|get#plusGreedy'] = function GreedyRepeatingParserExtension$124get$35plusGreedy(T, $this) {
    return dart.fn(limit => greedy['GreedyRepeatingParserExtension|plusGreedy'](dart.legacy(T), $this, limit), dart.fnType(dart.legacy(parser.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [ParserL()]));
  };
  greedy['GreedyRepeatingParserExtension|repeatGreedy'] = function GreedyRepeatingParserExtension$124repeatGreedy(T, $this, limit, min, max) {
    return new (greedy.GreedyRepeatingParser$(dart.legacy(T))).new($this, limit, min, max);
  };
  greedy['GreedyRepeatingParserExtension|get#repeatGreedy'] = function GreedyRepeatingParserExtension$124get$35repeatGreedy(T, $this) {
    return dart.fn((limit, min, max) => greedy['GreedyRepeatingParserExtension|repeatGreedy'](dart.legacy(T), $this, limit, min, max), dart.fnType(dart.legacy(parser.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [ParserL(), intL(), intL()]));
  };
  dart.trackLibraries("packages/petitparser/src/parser/repeater/lazy.dart", {
    "package:petitparser/src/parser/repeater/lazy.dart": lazy,
    "package:petitparser/src/parser/repeater/greedy.dart": greedy
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["lazy.dart","greedy.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/petitparser/src/parser/repeater/lazy.dart.lib.js"}');
  // Exports:
  return {
    src__parser__repeater__lazy: lazy,
    src__parser__repeater__greedy: greedy
  };
}));

//# sourceMappingURL=lazy.dart.lib.js.map
