define(['dart_sdk', 'packages/flutter_svg/src/utilities/xml.dart', 'packages/flutter_svg/src/utilities/numbers.dart', 'packages/path_drawing/src/dash_path.dart', 'packages/flutter_svg/src/utilities/errors.dart', 'packages/flutter_svg/src/svg/colors.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter_svg/src/utilities/_http_web.dart', 'packages/flutter_svg/src/render_picture.dart'], (function load__packages__flutter_svg__src__svg__xml_parsers_dart(dart_sdk, packages__flutter_svg__src__utilities__xml$46dart, packages__flutter_svg__src__utilities__numbers$46dart, packages__path_drawing__src__dash_path$46dart, packages__flutter_svg__src__utilities__errors$46dart, packages__flutter_svg__src__svg__colors$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter_svg__src__utilities___http_web$46dart, packages__flutter_svg__src__render_picture$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const _engine = dart_sdk._engine;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const xml = packages__flutter_svg__src__utilities__xml$46dart.src__utilities__xml;
  const numbers = packages__flutter_svg__src__utilities__numbers$46dart.src__utilities__numbers;
  const dash_path = packages__path_drawing__src__dash_path$46dart.src__dash_path;
  const errors = packages__flutter_svg__src__utilities__errors$46dart.src__utilities__errors;
  const colors = packages__flutter_svg__src__svg__colors$46dart.src__svg__colors;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const _http_web = packages__flutter_svg__src__utilities___http_web$46dart.src__utilities___http_web;
  const render_picture = packages__flutter_svg__src__render_picture$46dart.src__render_picture;
  var xml_parsers = Object.create(dart.library);
  var parsers = Object.create(dart.library);
  var vector_drawable = Object.create(dart.library);
  var $endsWith = dartx.endsWith;
  var $contains = dartx.contains;
  var $replaceAll = dartx.replaceAll;
  var $split = dartx.split;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $substring = dartx.substring;
  var $clamp = dartx.clamp;
  var $toDouble = dartx.toDouble;
  var $startsWith = dartx.startsWith;
  var $firstWhere = dartx.firstWhere;
  var $toLowerCase = dartx.toLowerCase;
  var $trim = dartx.trim;
  var $reversed = dartx.reversed;
  var $isNotEmpty = dartx.isNotEmpty;
  var $indexOf = dartx.indexOf;
  var $toString = dartx.toString;
  var $keys = dartx.keys;
  var $_set = dartx._set;
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var CircularIntervalListOfdoubleL = () => (CircularIntervalListOfdoubleL = dart.constFn(dash_path.CircularIntervalList$(doubleL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var StringLTodoubleL = () => (StringLTodoubleL = dart.constFn(dart.fnType(doubleL(), [StringL()])))();
  var StrokeCapL = () => (StrokeCapL = dart.constFn(dart.legacy(ui.StrokeCap)))();
  var StrokeCapLToboolL = () => (StrokeCapLToboolL = dart.constFn(dart.fnType(boolL(), [StrokeCapL()])))();
  var VoidToStrokeCapL = () => (VoidToStrokeCapL = dart.constFn(dart.fnType(StrokeCapL(), [])))();
  var StrokeJoinL = () => (StrokeJoinL = dart.constFn(dart.legacy(ui.StrokeJoin)))();
  var StrokeJoinLToboolL = () => (StrokeJoinLToboolL = dart.constFn(dart.fnType(boolL(), [StrokeJoinL()])))();
  var VoidToStrokeJoinL = () => (VoidToStrokeJoinL = dart.constFn(dart.fnType(StrokeJoinL(), [])))();
  var BlendModeL = () => (BlendModeL = dart.constFn(dart.legacy(ui.BlendMode)))();
  var ImageL = () => (ImageL = dart.constFn(dart.legacy(ui.Image)))();
  var FutureOfImageL = () => (FutureOfImageL = dart.constFn(async.Future$(ImageL())))();
  var FutureLOfImageL = () => (FutureLOfImageL = dart.constFn(dart.legacy(FutureOfImageL())))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var Uint8ListLToFutureLOfImageL = () => (Uint8ListLToFutureLOfImageL = dart.constFn(dart.fnType(FutureLOfImageL(), [Uint8ListL()])))();
  var IdentityMapOfStringL$doubleL = () => (IdentityMapOfStringL$doubleL = dart.constFn(_js_helper.IdentityMap$(StringL(), doubleL())))();
  var Matrix4L = () => (Matrix4L = dart.constFn(dart.legacy(vector_math_64.Matrix4)))();
  var StringLAndMatrix4LToMatrix4L = () => (StringLAndMatrix4LToMatrix4L = dart.constFn(dart.fnType(Matrix4L(), [StringL(), Matrix4L()])))();
  var StringLAndMatrix4LToLMatrix4L = () => (StringLAndMatrix4LToLMatrix4L = dart.constFn(dart.legacy(StringLAndMatrix4LToMatrix4L())))();
  var DrawableTextAnchorPositionL = () => (DrawableTextAnchorPositionL = dart.constFn(dart.legacy(vector_drawable.DrawableTextAnchorPosition)))();
  var DrawableGradientL = () => (DrawableGradientL = dart.constFn(dart.legacy(vector_drawable.DrawableGradient)))();
  var IdentityMapOfStringL$DrawableGradientL = () => (IdentityMapOfStringL$DrawableGradientL = dart.constFn(_js_helper.IdentityMap$(StringL(), DrawableGradientL())))();
  var PathL = () => (PathL = dart.constFn(dart.legacy(ui.Path)))();
  var ListOfPathL = () => (ListOfPathL = dart.constFn(core.List$(PathL())))();
  var ListLOfPathL = () => (ListLOfPathL = dart.constFn(dart.legacy(ListOfPathL())))();
  var IdentityMapOfStringL$ListLOfPathL = () => (IdentityMapOfStringL$ListLOfPathL = dart.constFn(_js_helper.IdentityMap$(StringL(), ListLOfPathL())))();
  var DrawableStyleableL = () => (DrawableStyleableL = dart.constFn(dart.legacy(vector_drawable.DrawableStyleable)))();
  var IdentityMapOfStringL$DrawableStyleableL = () => (IdentityMapOfStringL$DrawableStyleableL = dart.constFn(_js_helper.IdentityMap$(StringL(), DrawableStyleableL())))();
  var GradientUnitModeL = () => (GradientUnitModeL = dart.constFn(dart.legacy(vector_drawable.GradientUnitMode)))();
  var DrawableL = () => (DrawableL = dart.constFn(dart.legacy(vector_drawable.Drawable)))();
  var DrawableLToDrawableL = () => (DrawableLToDrawableL = dart.constFn(dart.fnType(DrawableL(), [DrawableL()])))();
  var VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  const CT = Object.create(null);
  var L1 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-0.19.1/lib/src/svg/parsers.dart";
  var L2 = "package:flutter_svg/src/vector_drawable.dart";
  var L3 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-0.19.1/lib/src/vector_drawable.dart";
  var L0 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-0.19.1/lib/src/svg/xml_parsers.dart";
  dart.defineLazy(CT, {
    get C1() {
      return C1 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.multiply",
        index: 24
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.screen",
        index: 14
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.overlay",
        index: 15
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.darken",
        index: 16
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.lighten",
        index: 17
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.colorDodge",
        index: 18
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.colorBurn",
        index: 19
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.hardLight",
        index: 20
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.softLight",
        index: 21
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.difference",
        index: 22
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.exclusion",
        index: 23
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.hue",
        index: 25
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.saturation",
        index: 26
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.color",
        index: 27
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name]: "BlendMode.luminosity",
        index: 28
      });
    },
    get C0() {
      return C0 = dart.constMap(StringL(), BlendModeL(), ["multiply", C1 || CT.C1, "screen", C2 || CT.C2, "overlay", C3 || CT.C3, "darken", C4 || CT.C4, "lighten", C5 || CT.C5, "color-dodge", C6 || CT.C6, "color-burn", C7 || CT.C7, "hard-light", C8 || CT.C8, "soft-light", C9 || CT.C9, "difference", C10 || CT.C10, "exclusion", C11 || CT.C11, "hue", C12 || CT.C12, "saturation", C13 || CT.C13, "color", C14 || CT.C14, "luminosity", C15 || CT.C15]);
    },
    get C17() {
      return C17 = dart.fn(parsers._parseSvgMatrix, StringLAndMatrix4LToMatrix4L());
    },
    get C18() {
      return C18 = dart.fn(parsers._parseSvgTranslate, StringLAndMatrix4LToMatrix4L());
    },
    get C19() {
      return C19 = dart.fn(parsers._parseSvgScale, StringLAndMatrix4LToMatrix4L());
    },
    get C20() {
      return C20 = dart.fn(parsers._parseSvgRotate, StringLAndMatrix4LToMatrix4L());
    },
    get C21() {
      return C21 = dart.fn(parsers._parseSvgSkewX, StringLAndMatrix4LToMatrix4L());
    },
    get C22() {
      return C22 = dart.fn(parsers._parseSvgSkewY, StringLAndMatrix4LToMatrix4L());
    },
    get C16() {
      return C16 = dart.constMap(StringL(), StringLAndMatrix4LToLMatrix4L(), ["matrix", C17 || CT.C17, "translate", C18 || CT.C18, "scale", C19 || CT.C19, "rotate", C20 || CT.C20, "skewX", C21 || CT.C21, "skewY", C22 || CT.C22]);
    },
    get C23() {
      return C23 = dart.const({
        __proto__: ui.ParagraphConstraints.prototype,
        [ParagraphConstraints_width]: 1 / 0
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name]: "PaintingStyle.stroke",
        index: 1
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 0
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: vector_drawable.DrawablePaint.prototype,
        [DrawablePaint_strokeWidth]: null,
        [DrawablePaint_strokeMiterLimit]: null,
        [DrawablePaint_strokeJoin]: null,
        [DrawablePaint_strokeCap]: null,
        [DrawablePaint_style]: C25 || CT.C25,
        [DrawablePaint_maskFilter]: null,
        [DrawablePaint_filterQuality]: null,
        [DrawablePaint_isAntiAlias]: null,
        [DrawablePaint_colorFilter]: null,
        [DrawablePaint_blendMode]: null,
        [DrawablePaint_shader]: null,
        [DrawablePaint_color]: C26 || CT.C26
      });
    },
    get C27() {
      return C27 = dart.constList([], doubleL());
    },
    get C28() {
      return C28 = dart.const({
        __proto__: vector_drawable.DrawablePaint.prototype,
        [DrawablePaint_strokeWidth]: null,
        [DrawablePaint_strokeMiterLimit]: null,
        [DrawablePaint_strokeJoin]: null,
        [DrawablePaint_strokeCap]: null,
        [DrawablePaint_style]: null,
        [DrawablePaint_maskFilter]: null,
        [DrawablePaint_filterQuality]: null,
        [DrawablePaint_isAntiAlias]: null,
        [DrawablePaint_colorFilter]: null,
        [DrawablePaint_blendMode]: null,
        [DrawablePaint_shader]: null,
        [DrawablePaint_color]: null
      });
    },
    get C29() {
      return C29 = dart.const({
        __proto__: vector_drawable.DrawableTextAnchorPosition.prototype,
        [_name$]: "DrawableTextAnchorPosition.start",
        index: 0
      });
    },
    get C30() {
      return C30 = dart.const({
        __proto__: vector_drawable.DrawableTextAnchorPosition.prototype,
        [_name$]: "DrawableTextAnchorPosition.middle",
        index: 1
      });
    },
    get C31() {
      return C31 = dart.const({
        __proto__: vector_drawable.DrawableTextAnchorPosition.prototype,
        [_name$]: "DrawableTextAnchorPosition.end",
        index: 2
      });
    },
    get C32() {
      return C32 = dart.constList([C29 || CT.C29, C30 || CT.C30, C31 || CT.C31], DrawableTextAnchorPositionL());
    },
    get C33() {
      return C33 = dart.const({
        __proto__: vector_drawable.GradientUnitMode.prototype,
        [_name$]: "GradientUnitMode.objectBoundingBox",
        index: 0
      });
    },
    get C34() {
      return C34 = dart.const({
        __proto__: vector_drawable.GradientUnitMode.prototype,
        [_name$]: "GradientUnitMode.userSpaceOnUse",
        index: 1
      });
    },
    get C35() {
      return C35 = dart.constList([C33 || CT.C33, C34 || CT.C34], GradientUnitModeL());
    },
    get C36() {
      return C36 = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name]: "TileMode.clamp",
        index: 0
      });
    },
    get C37() {
      return C37 = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C39() {
      return C39 = dart.constList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2126, 0.7152, 0.0722, 0, 0], doubleL());
    },
    get C38() {
      return C38 = dart.const({
        __proto__: _engine._CkMatrixColorFilter.prototype,
        [_CkMatrixColorFilter_matrix]: C39 || CT.C39
      });
    }
  }, false);
  xml_parsers._parseRawWidthHeight = function _parseRawWidthHeight(raw) {
    let t0;
    if (raw === "100%" || raw === "") {
      return 1 / 0;
    }
    if (!dart.test(dart.fn(() => {
      let notDigits = core.RegExp.new("[^\\d\\.]");
      if (!raw[$endsWith]("px") && raw[$contains](notDigits)) {
        core.print("Warning: Flutter SVG only supports the following formats for `width` and `height` on the SVG root:\n" + "  width=\"100%\"\n" + "  width=\"100px\"\n" + "  width=\"100\" (where the number will be treated as pixels).\n" + "The supplied value (" + dart.str(raw) + ") will be discarded and treated as if it had not been specified.");
      }
      return true;
    }, VoidToboolL())())) dart.assertFailed(null, L0, 18, 10, "() {\n    final RegExp notDigits = RegExp(r'[^\\d\\.]');\n    if (!raw.endsWith('px') && raw.contains(notDigits)) {\n      print(\n          'Warning: Flutter SVG only supports the following formats for `width` and `height` on the SVG root:\\n'\n          '  width=\"100%\"\\n'\n          '  width=\"100px\"\\n'\n          '  width=\"100\" (where the number will be treated as pixels).\\n'\n          'The supplied value ($raw) will be discarded and treated as if it had not been specified.');\n    }\n    return true;\n  }()");
    t0 = core.double.tryParse(raw[$replaceAll]("px", ""));
    return t0 == null ? 1 / 0 : t0;
  };
  xml_parsers.parseViewBox = function parseViewBox(svg, opts) {
    let nullOk = opts && 'nullOk' in opts ? opts.nullOk : false;
    let viewBox = xml.getAttribute(svg, "viewBox");
    let rawWidth = xml.getAttribute(svg, "width");
    let rawHeight = xml.getAttribute(svg, "height");
    if (viewBox === "" && rawWidth === "" && rawHeight === "") {
      if (dart.test(nullOk)) {
        return null;
      }
      dart.throw(new core.StateError.new("SVG did not specify dimensions\n\n" + "The SVG library looks for a `viewBox` or `width` and `height` attribute " + "to determine the viewport boundary of the SVG.  Note that these attributes, " + "as with all SVG attributes, are case sensitive.\n" + "During processing, the following attributes were found:\n" + "  " + dart.str(svg)));
    }
    let width = xml_parsers._parseRawWidthHeight(rawWidth);
    let height = xml_parsers._parseRawWidthHeight(rawHeight);
    if (viewBox === "") {
      return new vector_drawable.DrawableViewport.new(new ui.Size.new(width, height), new ui.Size.new(width, height));
    }
    let parts = viewBox[$split](core.RegExp.new("[ ,]+"));
    if (dart.notNull(parts[$length]) < 4) {
      dart.throw(new core.StateError.new("viewBox element must be 4 elements long"));
    }
    return new vector_drawable.DrawableViewport.new(new ui.Size.new(width, height), new ui.Size.new(numbers.parseDouble(parts[$_get](2)), numbers.parseDouble(parts[$_get](3))), {viewBoxOffset: new ui.Offset.new(-dart.notNull(numbers.parseDouble(parts[$_get](0))), -dart.notNull(numbers.parseDouble(parts[$_get](1))))});
  };
  xml_parsers.buildUrlIri = function buildUrlIri(attributes) {
    return "url(#" + dart.str(xml.getAttribute(attributes, "id")) + ")";
  };
  xml_parsers.parseTileMode = function parseTileMode(attributes) {
    let spreadMethod = xml.getAttribute(attributes, "spreadMethod", {def: "pad"});
    switch (spreadMethod) {
      case "pad":
      {
        return ui.TileMode.clamp;
      }
      case "repeat":
      {
        return ui.TileMode.repeated;
      }
      case "reflect":
      {
        return ui.TileMode.mirror;
      }
      default:
      {
        return ui.TileMode.clamp;
      }
    }
  };
  xml_parsers.parseDashArray = function parseDashArray(attributes) {
    let rawDashArray = xml.getAttribute(attributes, "stroke-dasharray");
    if (rawDashArray === "") {
      return null;
    } else if (rawDashArray === "none") {
      return vector_drawable.DrawableStyle.emptyDashArray;
    }
    let parts = rawDashArray[$split](core.RegExp.new("[ ,]+"));
    return new (CircularIntervalListOfdoubleL()).new(parts[$map](doubleL(), dart.fn(part => numbers.parseDouble(part), StringLTodoubleL()))[$toList]());
  };
  xml_parsers.parseDashOffset = function parseDashOffset(attributes) {
    let rawDashOffset = xml.getAttribute(attributes, "stroke-dashoffset");
    if (rawDashOffset === "") {
      return null;
    }
    if (rawDashOffset[$endsWith]("%")) {
      let percentage = dart.notNull(numbers.parseDouble(rawDashOffset[$substring](0, rawDashOffset.length - 1))) / 100;
      return new dash_path.DashOffset.percentage(percentage);
    } else {
      return new dash_path.DashOffset.absolute(numbers.parseDouble(rawDashOffset));
    }
  };
  xml_parsers.parseOpacity = function parseOpacity(attributes) {
    let rawOpacity = xml.getAttribute(attributes, "opacity", {def: null});
    if (rawOpacity != null) {
      return numbers.parseDouble(rawOpacity)[$clamp](0.0, 1.0)[$toDouble]();
    }
    return null;
  };
  xml_parsers._getDefinitionPaint = function _getDefinitionPaint(paintingStyle, iri, definitions, bounds, opts) {
    let opacity = opts && 'opacity' in opts ? opts.opacity : null;
    let shader = definitions.getShader(iri, bounds);
    if (shader == null) {
      errors.reportMissingDef(iri, "_getDefinitionPaint");
    }
    return new vector_drawable.DrawablePaint.new(paintingStyle, {shader: shader, color: opacity != null ? new ui.Color.fromRGBO(255, 255, 255, opacity) : null});
  };
  xml_parsers.parseStroke = function parseStroke(attributes, bounds, definitions, parentStroke) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
    let rawStroke = xml.getAttribute(attributes, "stroke");
    let rawStrokeOpacity = xml.getAttribute(attributes, "stroke-opacity", {def: "1.0"});
    let rawOpacity = xml.getAttribute(attributes, "opacity");
    let opacity = numbers.parseDouble(rawStrokeOpacity)[$clamp](0.0, 1.0)[$toDouble]();
    if (rawOpacity !== "") {
      opacity = opacity * numbers.parseDouble(rawOpacity)[$clamp](0.0, 1.0);
    }
    if (rawStroke[$startsWith]("url")) {
      return xml_parsers._getDefinitionPaint(ui.PaintingStyle.stroke, rawStroke, definitions, bounds, {opacity: opacity});
    }
    if (rawStroke === "" && dart.test(vector_drawable.DrawablePaint.isEmpty(parentStroke))) {
      return null;
    }
    if (rawStroke === "none") {
      return vector_drawable.DrawablePaint.empty;
    }
    let rawStrokeCap = xml.getAttribute(attributes, "stroke-linecap");
    let rawLineJoin = xml.getAttribute(attributes, "stroke-linejoin");
    let rawMiterLimit = xml.getAttribute(attributes, "stroke-miterlimit");
    let rawStrokeWidth = xml.getAttribute(attributes, "stroke-width");
    let paint = new vector_drawable.DrawablePaint.new(ui.PaintingStyle.stroke, {color: rawStroke === "" ? (t0$ = (t0 = parentStroke, t0 == null ? null : t0.color), t0$ == null ? colors.colorBlack : t0$).withOpacity(opacity) : colors.parseColor(rawStroke).withOpacity(opacity), strokeCap: rawStrokeCap === "null" ? (t0$1 = (t0$0 = parentStroke, t0$0 == null ? null : t0$0.strokeCap), t0$1 == null ? ui.StrokeCap.butt : t0$1) : ui.StrokeCap.values[$firstWhere](dart.fn(sc => dart.toString(sc) === "StrokeCap." + dart.str(rawStrokeCap), StrokeCapLToboolL()), {orElse: dart.fn(() => ui.StrokeCap.butt, VoidToStrokeCapL())}), strokeJoin: rawLineJoin === "" ? (t0$3 = (t0$2 = parentStroke, t0$2 == null ? null : t0$2.strokeJoin), t0$3 == null ? ui.StrokeJoin.miter : t0$3) : ui.StrokeJoin.values[$firstWhere](dart.fn(sj => dart.toString(sj) === "StrokeJoin." + dart.str(rawLineJoin), StrokeJoinLToboolL()), {orElse: dart.fn(() => ui.StrokeJoin.miter, VoidToStrokeJoinL())}), strokeMiterLimit: rawMiterLimit === "" ? (t0$5 = (t0$4 = parentStroke, t0$4 == null ? null : t0$4.strokeMiterLimit), t0$5 == null ? 4.0 : t0$5) : numbers.parseDouble(rawMiterLimit), strokeWidth: rawStrokeWidth === "" ? (t0$7 = (t0$6 = parentStroke, t0$6 == null ? null : t0$6.strokeWidth), t0$7 == null ? 1.0 : t0$7) : numbers.parseDouble(rawStrokeWidth)});
    return paint;
  };
  xml_parsers.parseFill = function parseFill(el, bounds, definitions, parentFill, defaultFillColor) {
    let t0;
    let rawFill = xml.getAttribute(el, "fill");
    let rawFillOpacity = xml.getAttribute(el, "fill-opacity", {def: "1.0"});
    let rawOpacity = xml.getAttribute(el, "opacity");
    let opacity = numbers.parseDouble(rawFillOpacity)[$clamp](0.0, 1.0)[$toDouble]();
    if (rawOpacity !== "") {
      opacity = opacity * numbers.parseDouble(rawOpacity)[$clamp](0.0, 1.0);
    }
    if (rawFill[$startsWith]("url")) {
      return xml_parsers._getDefinitionPaint(ui.PaintingStyle.fill, rawFill, definitions, bounds, {opacity: opacity});
    }
    if (rawFill === "" && dart.equals(parentFill, vector_drawable.DrawablePaint.empty)) {
      return null;
    }
    if (rawFill === "none") {
      return vector_drawable.DrawablePaint.empty;
    }
    return new vector_drawable.DrawablePaint.new(ui.PaintingStyle.fill, {color: xml_parsers._determineFillColor((t0 = parentFill, t0 == null ? null : t0.color), rawFill, opacity, rawOpacity !== "" || rawFillOpacity !== "", defaultFillColor)});
  };
  xml_parsers._determineFillColor = function _determineFillColor(parentFillColor, rawFill, opacity, explicitOpacity, defaultFillColor) {
    let t0, t0$;
    let color = (t0$ = (t0 = colors.parseColor(rawFill), t0 == null ? parentFillColor : t0), t0$ == null ? defaultFillColor : t0$);
    if (dart.test(explicitOpacity) && color != null) {
      return color.withOpacity(opacity);
    }
    return color;
  };
  xml_parsers.parseFillRule = function parseFillRule(attributes, attr = "fill-rule", def = "nonzero") {
    let rawFillRule = xml.getAttribute(attributes, attr, {def: def});
    return parsers.parseRawFillRule(rawFillRule);
  };
  xml_parsers.applyTransformIfNeeded = function applyTransformIfNeeded(path, attributes) {
    let transform = parsers.parseTransform(xml.getAttribute(attributes, "transform", {def: null}));
    if (transform != null) {
      return path.transform(transform.storage);
    } else {
      return path;
    }
  };
  xml_parsers.parseClipPath = function parseClipPath(attributes, definitions) {
    let rawClipAttribute = xml.getAttribute(attributes, "clip-path");
    if (rawClipAttribute !== "") {
      return definitions.getClipPath(rawClipAttribute);
    }
    return null;
  };
  xml_parsers.parseMask = function parseMask(attributes, definitions) {
    let rawMaskAttribute = xml.getAttribute(attributes, "mask");
    if (rawMaskAttribute !== "") {
      return definitions.getDrawable(rawMaskAttribute);
    }
    return null;
  };
  xml_parsers.parseFontWeight = function parseFontWeight(fontWeight) {
    if (fontWeight == null) {
      return null;
    }
    switch (fontWeight) {
      case "100":
      {
        return ui.FontWeight.w100;
      }
      case "200":
      {
        return ui.FontWeight.w200;
      }
      case "300":
      {
        return ui.FontWeight.w300;
      }
      case "normal":
      case "400":
      {
        return ui.FontWeight.w400;
      }
      case "500":
      {
        return ui.FontWeight.w500;
      }
      case "600":
      {
        return ui.FontWeight.w600;
      }
      case "bold":
      case "700":
      {
        return ui.FontWeight.w700;
      }
      case "800":
      {
        return ui.FontWeight.w800;
      }
      case "900":
      {
        return ui.FontWeight.w900;
      }
    }
    dart.throw(new core.UnsupportedError.new("Attribute value for font-weight=\"" + dart.str(fontWeight) + "\"" + " is not supported"));
  };
  xml_parsers.parseStyle = function parseStyle(attributes, definitions, bounds, parentStyle, opts) {
    let t0, t0$, t0$0, t0$1;
    let defaultFillColor = opts && 'defaultFillColor' in opts ? opts.defaultFillColor : null;
    return vector_drawable.DrawableStyle.mergeAndBlend(parentStyle, {stroke: xml_parsers.parseStroke(attributes, bounds, definitions, (t0 = parentStyle, t0 == null ? null : t0.stroke)), dashArray: xml_parsers.parseDashArray(attributes), dashOffset: xml_parsers.parseDashOffset(attributes), fill: xml_parsers.parseFill(attributes, bounds, definitions, (t0$ = parentStyle, t0$ == null ? null : t0$.fill), defaultFillColor), pathFillType: xml_parsers.parseFillRule(attributes, "fill-rule", parentStyle != null ? null : "nonzero"), groupOpacity: xml_parsers.parseOpacity(attributes), mask: xml_parsers.parseMask(attributes, definitions), clipPath: xml_parsers.parseClipPath(attributes, definitions), textStyle: new vector_drawable.DrawableTextStyle.new({fontFamily: xml.getAttribute(attributes, "font-family"), fontSize: parsers.parseFontSize(xml.getAttribute(attributes, "font-size"), {parentValue: (t0$1 = (t0$0 = parentStyle, t0$0 == null ? null : t0$0.textStyle), t0$1 == null ? null : t0$1.fontSize)}), fontWeight: xml_parsers.parseFontWeight(xml.getAttribute(attributes, "font-weight", {def: null})), anchor: parsers.parseTextAnchor(xml.getAttribute(attributes, "text-anchor", {def: "inherit"}))}), blendMode: xml_parsers._blendModes[$_get](xml.getAttribute(attributes, "mix-blend-mode"))});
  };
  var _name = dart.privateName(ui, "_name");
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  var C8;
  var C9;
  var C10;
  var C11;
  var C12;
  var C13;
  var C14;
  var C15;
  var C0;
  dart.defineLazy(xml_parsers, {
    /*xml_parsers.emptyUrlIri*/get emptyUrlIri() {
      return "url(#)";
    },
    /*xml_parsers._blendModes*/get _blendModes() {
      return C0 || CT.C0;
    }
  }, true);
  parsers.parseFontSize = function parseFontSize(raw, opts) {
    let parentValue = opts && 'parentValue' in opts ? opts.parentValue : null;
    if (raw == null || raw === "") {
      return null;
    }
    let ret = numbers.parseDouble(raw, {tryParse: true});
    if (ret != null) {
      return ret;
    }
    raw = raw[$toLowerCase]()[$trim]();
    ret = parsers._kTextSizeMap[$_get](raw);
    if (ret != null) {
      return ret;
    }
    if (raw === "larger") {
      if (parentValue == null) {
        return parsers._kTextSizeMap[$_get]("large");
      }
      return dart.notNull(parentValue) * 1.2;
    }
    if (raw === "smaller") {
      if (parentValue == null) {
        return parsers._kTextSizeMap[$_get]("small");
      }
      return dart.notNull(parentValue) / 1.2;
    }
    dart.throw(new core.StateError.new("Could not parse font-size: " + dart.str(raw)));
  };
  parsers.parseTextAnchor = function parseTextAnchor(raw) {
    switch (raw) {
      case "inherit":
      {
        return null;
      }
      case "middle":
      {
        return vector_drawable.DrawableTextAnchorPosition.middle;
      }
      case "end":
      {
        return vector_drawable.DrawableTextAnchorPosition.end;
      }
      case "start":
      default:
      {
        return vector_drawable.DrawableTextAnchorPosition.start;
      }
    }
  };
  parsers.parseTransform = function parseTransform(transform) {
    if (transform == null || transform === "") {
      return null;
    }
    if (!dart.test(parsers._transformValidator.hasMatch(transform))) dart.throw(new core.StateError.new("illegal or unsupported transform: " + dart.str(transform)));
    let matches = parsers._transformCommand.allMatches(transform)[$toList]()[$reversed];
    let result = vector_math_64.Matrix4.identity();
    for (let m of matches) {
      let command = m.group(1)[$trim]();
      let params = m.group(2);
      let transformer = parsers._matrixParsers[$_get](command);
      if (transformer == null) {
        dart.throw(new core.StateError.new("Unsupported transform: " + command));
      }
      result = transformer(params, result);
    }
    return result;
  };
  parsers._parseSvgMatrix = function _parseSvgMatrix(paramsStr, current) {
    let params = paramsStr[$trim]()[$split](parsers._valueSeparator);
    if (!dart.test(params[$isNotEmpty])) dart.assertFailed(null, L1, 120, 10, "params.isNotEmpty");
    if (!(params[$length] === 6)) dart.assertFailed(null, L1, 121, 10, "params.length == 6");
    let a = numbers.parseDouble(params[$_get](0));
    let b = numbers.parseDouble(params[$_get](1));
    let c = numbers.parseDouble(params[$_get](2));
    let d = numbers.parseDouble(params[$_get](3));
    let e = numbers.parseDouble(params[$_get](4));
    let f = numbers.parseDouble(params[$_get](5));
    return parsers.affineMatrix(a, b, c, d, e, f).multiplied(current);
  };
  parsers._parseSvgSkewX = function _parseSvgSkewX(paramsStr, current) {
    let x = numbers.parseDouble(paramsStr);
    return parsers.affineMatrix(1.0, 0.0, math.tan(x), 1.0, 0.0, 0.0).multiplied(current);
  };
  parsers._parseSvgSkewY = function _parseSvgSkewY(paramsStr, current) {
    let y = numbers.parseDouble(paramsStr);
    return parsers.affineMatrix(1.0, math.tan(y), 0.0, 1.0, 0.0, 0.0).multiplied(current);
  };
  parsers._parseSvgTranslate = function _parseSvgTranslate(paramsStr, current) {
    let params = paramsStr[$split](parsers._valueSeparator);
    if (!dart.test(params[$isNotEmpty])) dart.assertFailed(null, L1, 144, 10, "params.isNotEmpty");
    if (!(dart.notNull(params[$length]) <= 2)) dart.assertFailed(null, L1, 145, 10, "params.length <= 2");
    let x = numbers.parseDouble(params[$_get](0));
    let y = dart.notNull(params[$length]) < 2 ? 0.0 : numbers.parseDouble(params[$_get](1));
    return parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, x, y).multiplied(current);
  };
  parsers._parseSvgScale = function _parseSvgScale(paramsStr, current) {
    let params = paramsStr[$split](parsers._valueSeparator);
    if (!dart.test(params[$isNotEmpty])) dart.assertFailed(null, L1, 153, 10, "params.isNotEmpty");
    if (!(dart.notNull(params[$length]) <= 2)) dart.assertFailed(null, L1, 154, 10, "params.length <= 2");
    let x = numbers.parseDouble(params[$_get](0));
    let y = dart.notNull(params[$length]) < 2 ? x : numbers.parseDouble(params[$_get](1));
    return parsers.affineMatrix(x, 0.0, 0.0, y, 0.0, 0.0).multiplied(current);
  };
  parsers._parseSvgRotate = function _parseSvgRotate(paramsStr, current) {
    let params = paramsStr[$split](parsers._valueSeparator);
    if (!(dart.notNull(params[$length]) <= 3)) dart.assertFailed(null, L1, 162, 10, "params.length <= 3");
    let a = vector_math_64.radians(numbers.parseDouble(params[$_get](0)));
    let rotate = parsers.affineMatrix(math.cos(a), math.sin(a), -math.sin(a), math.cos(a), 0.0, 0.0);
    if (dart.notNull(params[$length]) > 1) {
      let x = numbers.parseDouble(params[$_get](1));
      let y = params[$length] === 3 ? numbers.parseDouble(params[$_get](2)) : x;
      return parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, x, y).multiplied(current).multiplied(rotate).multiplied(parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, -dart.notNull(x), -dart.notNull(y)));
    } else {
      return rotate.multiplied(current);
    }
  };
  parsers.affineMatrix = function affineMatrix(a, b, c, d, e, f) {
    return vector_math_64.Matrix4.new(a, b, 0.0, 0.0, c, d, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, e, f, 0.0, 1.0);
  };
  parsers.parseRawFillRule = function parseRawFillRule(rawFillRule) {
    if (rawFillRule === "inherit" || rawFillRule == null) {
      return null;
    }
    return rawFillRule !== "evenodd" ? ui.PathFillType.nonZero : ui.PathFillType.evenOdd;
  };
  parsers.resolveImage = function resolveImage(href) {
    return async.async(ImageL(), function* resolveImage() {
      if (href == null || href === "") {
        return null;
      }
      let decodeImage = dart.fn(bytes => async.async(ImageL(), function*() {
        let codec = (yield ui.instantiateImageCodec(bytes));
        let frame = (yield codec.getNextFrame());
        return frame.image;
      }), Uint8ListLToFutureLOfImageL());
      if (href[$startsWith]("http")) {
        let bytes = (yield _http_web.httpGet(href));
        return decodeImage(bytes);
      }
      if (href[$startsWith]("data:")) {
        let commaLocation = href[$indexOf](",") + 1;
        let bytes = convert.base64.decode(href[$substring](commaLocation)[$replaceAll](parsers._whitespacePattern, ""));
        return decodeImage(bytes);
      }
      dart.throw(new core.UnsupportedError.new("Could not resolve image href: " + dart.str(href)));
    });
  };
  parsers.createParagraph = function createParagraph(text, style, foregroundOverride) {
    let t0, t0$;
    let builder = (t0 = ui.ParagraphBuilder.new(ui.ParagraphStyle.new()), (() => {
      t0.pushStyle(style.textStyle.toFlutterTextStyle({foregroundOverride: foregroundOverride}));
      t0.addText(text);
      return t0;
    })());
    t0$ = builder.build();
    return (() => {
      t0$.layout(parsers._infiniteParagraphConstraints);
      return t0$;
    })();
  };
  parsers.parseDecimalOrPercentage = function parseDecimalOrPercentage(val, opts) {
    let multiplier = opts && 'multiplier' in opts ? opts.multiplier : 1;
    if (dart.test(parsers.isPercentage(val))) {
      return parsers.parsePercentage(val, {multiplier: multiplier});
    } else {
      return numbers.parseDouble(val);
    }
  };
  parsers.parsePercentage = function parsePercentage(val, opts) {
    let multiplier = opts && 'multiplier' in opts ? opts.multiplier : 1;
    return dart.notNull(numbers.parseDouble(val[$substring](0, val.length - 1))) / 100 * dart.notNull(multiplier);
  };
  parsers.isPercentage = function isPercentage(val) {
    return val[$endsWith]("%");
  };
  var C17;
  var C18;
  var C19;
  var C20;
  var C21;
  var C22;
  var C16;
  var ParagraphConstraints_width = dart.privateName(ui, "ParagraphConstraints.width");
  var C23;
  var DrawablePaint_strokeWidth = dart.privateName(vector_drawable, "DrawablePaint.strokeWidth");
  var DrawablePaint_strokeMiterLimit = dart.privateName(vector_drawable, "DrawablePaint.strokeMiterLimit");
  var DrawablePaint_strokeJoin = dart.privateName(vector_drawable, "DrawablePaint.strokeJoin");
  var DrawablePaint_strokeCap = dart.privateName(vector_drawable, "DrawablePaint.strokeCap");
  var C25;
  var DrawablePaint_style = dart.privateName(vector_drawable, "DrawablePaint.style");
  var DrawablePaint_maskFilter = dart.privateName(vector_drawable, "DrawablePaint.maskFilter");
  var DrawablePaint_filterQuality = dart.privateName(vector_drawable, "DrawablePaint.filterQuality");
  var DrawablePaint_isAntiAlias = dart.privateName(vector_drawable, "DrawablePaint.isAntiAlias");
  var DrawablePaint_colorFilter = dart.privateName(vector_drawable, "DrawablePaint.colorFilter");
  var DrawablePaint_blendMode = dart.privateName(vector_drawable, "DrawablePaint.blendMode");
  var DrawablePaint_shader = dart.privateName(vector_drawable, "DrawablePaint.shader");
  var Color_value = dart.privateName(ui, "Color.value");
  var C26;
  var DrawablePaint_color = dart.privateName(vector_drawable, "DrawablePaint.color");
  var C24;
  dart.defineLazy(parsers, {
    /*parsers._kTextSizeMap*/get _kTextSizeMap() {
      return new (IdentityMapOfStringL$doubleL()).from(["xx-small", 10.0, "x-small", 12.0, "small", 14.0, "medium", 18.0, "large", 22.0, "x-large", 26.0, "xx-large", 32.0]);
    },
    /*parsers._transformCommandAtom*/get _transformCommandAtom() {
      return " *,?([^(]+)\\(([^)]*)\\)";
    },
    /*parsers._transformValidator*/get _transformValidator() {
      return core.RegExp.new("^(" + " *,?([^(]+)\\(([^)]*)\\)" + ")*$");
    },
    /*parsers._transformCommand*/get _transformCommand() {
      return core.RegExp.new(" *,?([^(]+)\\(([^)]*)\\)");
    },
    /*parsers._matrixParsers*/get _matrixParsers() {
      return C16 || CT.C16;
    },
    /*parsers._valueSeparator*/get _valueSeparator() {
      return core.RegExp.new("( *, *| +)");
    },
    /*parsers._whitespacePattern*/get _whitespacePattern() {
      return core.RegExp.new("\\s");
    },
    /*parsers._infiniteParagraphConstraints*/get _infiniteParagraphConstraints() {
      return C23 || CT.C23;
    },
    /*parsers.transparentStroke*/get transparentStroke() {
      return C24 || CT.C24;
    }
  }, true);
  vector_drawable.Drawable = class Drawable extends core.Object {};
  (vector_drawable.Drawable.new = function() {
    ;
  }).prototype = vector_drawable.Drawable.prototype;
  dart.addTypeTests(vector_drawable.Drawable);
  dart.addTypeCaches(vector_drawable.Drawable);
  dart.setLibraryUri(vector_drawable.Drawable, L2);
  vector_drawable.DrawableStyleable = class DrawableStyleable extends vector_drawable.Drawable {};
  (vector_drawable.DrawableStyleable.new = function() {
    ;
  }).prototype = vector_drawable.DrawableStyleable.prototype;
  dart.addTypeTests(vector_drawable.DrawableStyleable);
  dart.addTypeCaches(vector_drawable.DrawableStyleable);
  dart.setLibraryUri(vector_drawable.DrawableStyleable, L2);
  vector_drawable.DrawableParent = class DrawableParent extends core.Object {};
  (vector_drawable.DrawableParent.new = function() {
    ;
  }).prototype = vector_drawable.DrawableParent.prototype;
  dart.addTypeTests(vector_drawable.DrawableParent);
  dart.addTypeCaches(vector_drawable.DrawableParent);
  vector_drawable.DrawableParent[dart.implements] = () => [vector_drawable.DrawableStyleable];
  dart.setLibraryUri(vector_drawable.DrawableParent, L2);
  var stroke$ = dart.privateName(vector_drawable, "DrawableStyle.stroke");
  var dashArray$ = dart.privateName(vector_drawable, "DrawableStyle.dashArray");
  var dashOffset$ = dart.privateName(vector_drawable, "DrawableStyle.dashOffset");
  var fill$ = dart.privateName(vector_drawable, "DrawableStyle.fill");
  var textStyle$ = dart.privateName(vector_drawable, "DrawableStyle.textStyle");
  var pathFillType$ = dart.privateName(vector_drawable, "DrawableStyle.pathFillType");
  var clipPath$ = dart.privateName(vector_drawable, "DrawableStyle.clipPath");
  var mask$ = dart.privateName(vector_drawable, "DrawableStyle.mask");
  var groupOpacity$ = dart.privateName(vector_drawable, "DrawableStyle.groupOpacity");
  var blendMode$ = dart.privateName(vector_drawable, "DrawableStyle.blendMode");
  var C27;
  vector_drawable.DrawableStyle = class DrawableStyle extends core.Object {
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get dashArray() {
      return this[dashArray$];
    }
    set dashArray(value) {
      super.dashArray = value;
    }
    get dashOffset() {
      return this[dashOffset$];
    }
    set dashOffset(value) {
      super.dashOffset = value;
    }
    get fill() {
      return this[fill$];
    }
    set fill(value) {
      super.fill = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get pathFillType() {
      return this[pathFillType$];
    }
    set pathFillType(value) {
      super.pathFillType = value;
    }
    get clipPath() {
      return this[clipPath$];
    }
    set clipPath(value) {
      super.clipPath = value;
    }
    get mask() {
      return this[mask$];
    }
    set mask(value) {
      super.mask = value;
    }
    get groupOpacity() {
      return this[groupOpacity$];
    }
    set groupOpacity(value) {
      super.groupOpacity = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    static mergeAndBlend(parent, opts) {
      let t0, t0$, t1, t0$0, t1$, t0$1, t0$2, t1$0, t0$3;
      let fill = opts && 'fill' in opts ? opts.fill : null;
      let stroke = opts && 'stroke' in opts ? opts.stroke : null;
      let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
      let dashOffset = opts && 'dashOffset' in opts ? opts.dashOffset : null;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let pathFillType = opts && 'pathFillType' in opts ? opts.pathFillType : null;
      let groupOpacity = opts && 'groupOpacity' in opts ? opts.groupOpacity : null;
      let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
      let mask = opts && 'mask' in opts ? opts.mask : null;
      let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
      return new vector_drawable.DrawableStyle.new({fill: vector_drawable.DrawablePaint.merge(fill, (t0 = parent, t0 == null ? null : t0.fill)), stroke: vector_drawable.DrawablePaint.merge(stroke, (t0$ = parent, t0$ == null ? null : t0$.stroke)), dashArray: (t0$0 = dashArray, t0$0 == null ? (t1 = parent, t1 == null ? null : t1.dashArray) : t0$0), dashOffset: (t0$1 = dashOffset, t0$1 == null ? (t1$ = parent, t1$ == null ? null : t1$.dashOffset) : t0$1), textStyle: vector_drawable.DrawableTextStyle.merge(textStyle, (t0$2 = parent, t0$2 == null ? null : t0$2.textStyle)), pathFillType: (t0$3 = pathFillType, t0$3 == null ? (t1$0 = parent, t1$0 == null ? null : t1$0.pathFillType) : t0$3), groupOpacity: groupOpacity, clipPath: clipPath, mask: mask, blendMode: blendMode});
    }
    static mergeOpacity(back, front) {
      if (back == null) {
        return front;
      } else if (front == null) {
        return back;
      }
      return (dart.notNull(front) + dart.notNull(back)) / 2.0;
    }
    toString() {
      return "DrawableStyle{" + dart.str(this.stroke) + "," + dart.str(this.dashArray) + "," + dart.str(this.dashOffset) + "," + dart.str(this.fill) + "," + dart.str(this.textStyle) + "," + dart.str(this.pathFillType) + "," + dart.str(this.groupOpacity) + "," + dart.str(this.clipPath) + "," + dart.str(this.mask) + "}";
    }
  };
  (vector_drawable.DrawableStyle.new = function(opts) {
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let dashArray = opts && 'dashArray' in opts ? opts.dashArray : null;
    let dashOffset = opts && 'dashOffset' in opts ? opts.dashOffset : null;
    let fill = opts && 'fill' in opts ? opts.fill : null;
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let pathFillType = opts && 'pathFillType' in opts ? opts.pathFillType : null;
    let groupOpacity = opts && 'groupOpacity' in opts ? opts.groupOpacity : null;
    let clipPath = opts && 'clipPath' in opts ? opts.clipPath : null;
    let mask = opts && 'mask' in opts ? opts.mask : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    this[stroke$] = stroke;
    this[dashArray$] = dashArray;
    this[dashOffset$] = dashOffset;
    this[fill$] = fill;
    this[textStyle$] = textStyle;
    this[pathFillType$] = pathFillType;
    this[groupOpacity$] = groupOpacity;
    this[clipPath$] = clipPath;
    this[mask$] = mask;
    this[blendMode$] = blendMode;
    ;
  }).prototype = vector_drawable.DrawableStyle.prototype;
  dart.addTypeTests(vector_drawable.DrawableStyle);
  dart.addTypeCaches(vector_drawable.DrawableStyle);
  dart.setMethodSignature(vector_drawable.DrawableStyle, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableStyle.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(vector_drawable.DrawableStyle, L2);
  dart.setFieldSignature(vector_drawable.DrawableStyle, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableStyle.__proto__),
    stroke: dart.finalFieldType(dart.legacy(vector_drawable.DrawablePaint)),
    dashArray: dart.finalFieldType(dart.legacy(dash_path.CircularIntervalList$(dart.legacy(core.double)))),
    dashOffset: dart.finalFieldType(dart.legacy(dash_path.DashOffset)),
    fill: dart.finalFieldType(dart.legacy(vector_drawable.DrawablePaint)),
    textStyle: dart.finalFieldType(dart.legacy(vector_drawable.DrawableTextStyle)),
    pathFillType: dart.finalFieldType(dart.legacy(ui.PathFillType)),
    clipPath: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Path)))),
    mask: dart.finalFieldType(dart.legacy(vector_drawable.DrawableStyleable)),
    groupOpacity: dart.finalFieldType(dart.legacy(core.double)),
    blendMode: dart.finalFieldType(dart.legacy(ui.BlendMode))
  }));
  dart.defineExtensionMethods(vector_drawable.DrawableStyle, ['toString']);
  dart.defineLazy(vector_drawable.DrawableStyle, {
    /*vector_drawable.DrawableStyle.emptyDashArray*/get emptyDashArray() {
      return new (CircularIntervalListOfdoubleL()).new(C27 || CT.C27);
    }
  }, true);
  var C28;
  vector_drawable.DrawablePaint = class DrawablePaint extends core.Object {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get shader() {
      return this[shader$];
    }
    set shader(value) {
      super.shader = value;
    }
    get blendMode() {
      return this[blendMode$0];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    get colorFilter() {
      return this[colorFilter$];
    }
    set colorFilter(value) {
      super.colorFilter = value;
    }
    get isAntiAlias() {
      return this[isAntiAlias$];
    }
    set isAntiAlias(value) {
      super.isAntiAlias = value;
    }
    get filterQuality() {
      return this[filterQuality$];
    }
    set filterQuality(value) {
      super.filterQuality = value;
    }
    get maskFilter() {
      return this[maskFilter$];
    }
    set maskFilter(value) {
      super.maskFilter = value;
    }
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get strokeCap() {
      return this[strokeCap$];
    }
    set strokeCap(value) {
      super.strokeCap = value;
    }
    get strokeJoin() {
      return this[strokeJoin$];
    }
    set strokeJoin(value) {
      super.strokeJoin = value;
    }
    get strokeMiterLimit() {
      return this[strokeMiterLimit$];
    }
    set strokeMiterLimit(value) {
      super.strokeMiterLimit = value;
    }
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    static merge(a, b) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10;
      if (a == null && b == null) {
        return null;
      }
      if (b == null && a != null) {
        return a;
      }
      if (a == vector_drawable.DrawablePaint.empty || b == vector_drawable.DrawablePaint.empty) {
        t0 = a;
        return t0 == null ? b : t0;
      }
      if (a == null) {
        return b;
      }
      if (!dart.equals(a.style, b.style)) dart.assertFailed("Cannot merge Paints with different PaintStyles; got:\na: " + dart.str(a) + "\nb: " + dart.str(b) + ".", L3, 214, 12, "a.style == b.style");
      return new vector_drawable.DrawablePaint.new((t0$ = a.style, t0$ == null ? b.style : t0$), {color: (t0$0 = a.color, t0$0 == null ? b.color : t0$0), shader: (t0$1 = a.shader, t0$1 == null ? b.shader : t0$1), blendMode: (t0$2 = a.blendMode, t0$2 == null ? b.blendMode : t0$2), colorFilter: (t0$3 = a.colorFilter, t0$3 == null ? b.colorFilter : t0$3), isAntiAlias: (t0$4 = a.isAntiAlias, t0$4 == null ? b.isAntiAlias : t0$4), filterQuality: (t0$5 = a.filterQuality, t0$5 == null ? b.filterQuality : t0$5), maskFilter: (t0$6 = a.maskFilter, t0$6 == null ? b.maskFilter : t0$6), strokeCap: (t0$7 = a.strokeCap, t0$7 == null ? b.strokeCap : t0$7), strokeJoin: (t0$8 = a.strokeJoin, t0$8 == null ? b.strokeJoin : t0$8), strokeMiterLimit: (t0$9 = a.strokeMiterLimit, t0$9 == null ? b.strokeMiterLimit : t0$9), strokeWidth: (t0$10 = a.strokeWidth, t0$10 == null ? b.strokeWidth : t0$10)});
    }
    static isEmpty(paint) {
      return paint == null || dart.equals(paint, vector_drawable.DrawablePaint.empty);
    }
    toFlutterPaint() {
      let paint = ui.Paint.new();
      if (this.blendMode != null) {
        paint.blendMode = this.blendMode;
      }
      if (this.color != null) {
        paint.color = this.color;
      }
      if (this.colorFilter != null) {
        paint.colorFilter = this.colorFilter;
      }
      if (this.filterQuality != null) {
        paint.filterQuality = this.filterQuality;
      }
      if (this.isAntiAlias != null) {
        paint.isAntiAlias = this.isAntiAlias;
      }
      if (this.maskFilter != null) {
        paint.maskFilter = this.maskFilter;
      }
      if (this.shader != null) {
        paint.shader = this.shader;
      }
      if (this.strokeCap != null) {
        paint.strokeCap = this.strokeCap;
      }
      if (this.strokeJoin != null) {
        paint.strokeJoin = this.strokeJoin;
      }
      if (this.strokeMiterLimit != null) {
        paint.strokeMiterLimit = this.strokeMiterLimit;
      }
      if (this.strokeWidth != null) {
        paint.strokeWidth = this.strokeWidth;
      }
      if (this.style != null) {
        paint.style = this.style;
      }
      return paint;
    }
    toString() {
      return "DrawablePaint{" + dart.str(this.style) + ", color: " + dart.str(this.color) + ", shader: " + dart.str(this.shader) + ", blendMode: " + dart.str(this.blendMode) + ", " + "colorFilter: " + dart.str(this.colorFilter) + ", isAntiAlias: " + dart.str(this.isAntiAlias) + ", filterQuality: " + dart.str(this.filterQuality) + ", " + "maskFilter: " + dart.str(this.maskFilter) + ", strokeCap: " + dart.str(this.strokeCap) + ", strokeJoin: " + dart.str(this.strokeJoin) + ", " + "strokeMiterLimit: " + dart.str(this.strokeMiterLimit) + ", strokeWidth: " + dart.str(this.strokeWidth) + "}";
    }
  };
  (vector_drawable.DrawablePaint.new = function(style, opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let shader = opts && 'shader' in opts ? opts.shader : null;
    let blendMode = opts && 'blendMode' in opts ? opts.blendMode : null;
    let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
    let isAntiAlias = opts && 'isAntiAlias' in opts ? opts.isAntiAlias : null;
    let filterQuality = opts && 'filterQuality' in opts ? opts.filterQuality : null;
    let maskFilter = opts && 'maskFilter' in opts ? opts.maskFilter : null;
    let strokeCap = opts && 'strokeCap' in opts ? opts.strokeCap : null;
    let strokeJoin = opts && 'strokeJoin' in opts ? opts.strokeJoin : null;
    let strokeMiterLimit = opts && 'strokeMiterLimit' in opts ? opts.strokeMiterLimit : null;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[style$] = style;
    this[color$] = color;
    this[shader$] = shader;
    this[blendMode$0] = blendMode;
    this[colorFilter$] = colorFilter;
    this[isAntiAlias$] = isAntiAlias;
    this[filterQuality$] = filterQuality;
    this[maskFilter$] = maskFilter;
    this[strokeCap$] = strokeCap;
    this[strokeJoin$] = strokeJoin;
    this[strokeMiterLimit$] = strokeMiterLimit;
    this[strokeWidth$] = strokeWidth;
    ;
  }).prototype = vector_drawable.DrawablePaint.prototype;
  dart.addTypeTests(vector_drawable.DrawablePaint);
  dart.addTypeCaches(vector_drawable.DrawablePaint);
  const color$ = DrawablePaint_color;
  const shader$ = DrawablePaint_shader;
  const blendMode$0 = DrawablePaint_blendMode;
  const colorFilter$ = DrawablePaint_colorFilter;
  const isAntiAlias$ = DrawablePaint_isAntiAlias;
  const filterQuality$ = DrawablePaint_filterQuality;
  const maskFilter$ = DrawablePaint_maskFilter;
  const style$ = DrawablePaint_style;
  const strokeCap$ = DrawablePaint_strokeCap;
  const strokeJoin$ = DrawablePaint_strokeJoin;
  const strokeMiterLimit$ = DrawablePaint_strokeMiterLimit;
  const strokeWidth$ = DrawablePaint_strokeWidth;
  dart.setMethodSignature(vector_drawable.DrawablePaint, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawablePaint.__proto__),
    toFlutterPaint: dart.fnType(dart.legacy(ui.Paint), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(vector_drawable.DrawablePaint, L2);
  dart.setFieldSignature(vector_drawable.DrawablePaint, () => ({
    __proto__: dart.getFields(vector_drawable.DrawablePaint.__proto__),
    color: dart.finalFieldType(dart.legacy(ui.Color)),
    shader: dart.finalFieldType(dart.legacy(ui.Shader)),
    blendMode: dart.finalFieldType(dart.legacy(ui.BlendMode)),
    colorFilter: dart.finalFieldType(dart.legacy(ui.ColorFilter)),
    isAntiAlias: dart.finalFieldType(dart.legacy(core.bool)),
    filterQuality: dart.finalFieldType(dart.legacy(ui.FilterQuality)),
    maskFilter: dart.finalFieldType(dart.legacy(ui.MaskFilter)),
    style: dart.finalFieldType(dart.legacy(ui.PaintingStyle)),
    strokeCap: dart.finalFieldType(dart.legacy(ui.StrokeCap)),
    strokeJoin: dart.finalFieldType(dart.legacy(ui.StrokeJoin)),
    strokeMiterLimit: dart.finalFieldType(dart.legacy(core.double)),
    strokeWidth: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(vector_drawable.DrawablePaint, ['toString']);
  dart.defineLazy(vector_drawable.DrawablePaint, {
    /*vector_drawable.DrawablePaint.empty*/get empty() {
      return C28 || CT.C28;
    }
  }, true);
  var decoration$ = dart.privateName(vector_drawable, "DrawableTextStyle.decoration");
  var decorationColor$ = dart.privateName(vector_drawable, "DrawableTextStyle.decorationColor");
  var decorationStyle$ = dart.privateName(vector_drawable, "DrawableTextStyle.decorationStyle");
  var fontWeight$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontWeight");
  var fontStyle$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontStyle");
  var textBaseline$ = dart.privateName(vector_drawable, "DrawableTextStyle.textBaseline");
  var fontFamily$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontFamily");
  var fontSize$ = dart.privateName(vector_drawable, "DrawableTextStyle.fontSize");
  var letterSpacing$ = dart.privateName(vector_drawable, "DrawableTextStyle.letterSpacing");
  var wordSpacing$ = dart.privateName(vector_drawable, "DrawableTextStyle.wordSpacing");
  var height$ = dart.privateName(vector_drawable, "DrawableTextStyle.height");
  var locale$ = dart.privateName(vector_drawable, "DrawableTextStyle.locale");
  var background$ = dart.privateName(vector_drawable, "DrawableTextStyle.background");
  var foreground$ = dart.privateName(vector_drawable, "DrawableTextStyle.foreground");
  var anchor$ = dart.privateName(vector_drawable, "DrawableTextStyle.anchor");
  vector_drawable.DrawableTextStyle = class DrawableTextStyle extends core.Object {
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get decorationColor() {
      return this[decorationColor$];
    }
    set decorationColor(value) {
      super.decorationColor = value;
    }
    get decorationStyle() {
      return this[decorationStyle$];
    }
    set decorationStyle(value) {
      super.decorationStyle = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get textBaseline() {
      return this[textBaseline$];
    }
    set textBaseline(value) {
      super.textBaseline = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    get locale() {
      return this[locale$];
    }
    set locale(value) {
      super.locale = value;
    }
    get background() {
      return this[background$];
    }
    set background(value) {
      super.background = value;
    }
    get foreground() {
      return this[foreground$];
    }
    set foreground(value) {
      super.foreground = value;
    }
    get anchor() {
      return this[anchor$];
    }
    set anchor(value) {
      super.anchor = value;
    }
    static merge(a, b) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12;
      if (b == null) {
        return a;
      }
      if (a == null) {
        return b;
      }
      return new vector_drawable.DrawableTextStyle.new({decoration: (t0 = a.decoration, t0 == null ? b.decoration : t0), decorationColor: (t0$ = a.decorationColor, t0$ == null ? b.decorationColor : t0$), decorationStyle: (t0$0 = a.decorationStyle, t0$0 == null ? b.decorationStyle : t0$0), fontWeight: (t0$1 = a.fontWeight, t0$1 == null ? b.fontWeight : t0$1), fontStyle: (t0$2 = a.fontStyle, t0$2 == null ? b.fontStyle : t0$2), textBaseline: (t0$3 = a.textBaseline, t0$3 == null ? b.textBaseline : t0$3), fontFamily: (t0$4 = a.fontFamily, t0$4 == null ? b.fontFamily : t0$4), fontSize: (t0$5 = a.fontSize, t0$5 == null ? b.fontSize : t0$5), letterSpacing: (t0$6 = a.letterSpacing, t0$6 == null ? b.letterSpacing : t0$6), wordSpacing: (t0$7 = a.wordSpacing, t0$7 == null ? b.wordSpacing : t0$7), height: (t0$8 = a.height, t0$8 == null ? b.height : t0$8), locale: (t0$9 = a.locale, t0$9 == null ? b.locale : t0$9), background: (t0$10 = a.background, t0$10 == null ? b.background : t0$10), foreground: (t0$11 = a.foreground, t0$11 == null ? b.foreground : t0$11), anchor: (t0$12 = a.anchor, t0$12 == null ? b.anchor : t0$12)});
    }
    toFlutterTextStyle(opts) {
      let t0, t0$, t1, t0$0;
      let foregroundOverride = opts && 'foregroundOverride' in opts ? opts.foregroundOverride : null;
      return ui.TextStyle.new({decoration: this.decoration, decorationColor: this.decorationColor, decorationStyle: this.decorationStyle, fontWeight: this.fontWeight, fontStyle: this.fontStyle, textBaseline: this.textBaseline, fontFamily: this.fontFamily, fontSize: this.fontSize, letterSpacing: this.letterSpacing, wordSpacing: this.wordSpacing, height: this.height, locale: this.locale, background: (t0 = this.background, t0 == null ? null : t0.toFlutterPaint()), foreground: (t0$0 = (t0$ = foregroundOverride, t0$ == null ? null : t0$.toFlutterPaint()), t0$0 == null ? (t1 = this.foreground, t1 == null ? null : t1.toFlutterPaint()) : t0$0)});
    }
    toString() {
      return "DrawableTextStyle{" + dart.str(this.decoration) + "," + dart.str(this.decorationColor) + "," + dart.str(this.decorationStyle) + "," + dart.str(this.fontWeight) + "," + dart.str(this.fontFamily) + "," + dart.str(this.fontSize) + "," + dart.str(this.fontStyle) + "," + dart.str(this.foreground) + "," + dart.str(this.background) + "," + dart.str(this.letterSpacing) + "," + dart.str(this.wordSpacing) + "," + dart.str(this.height) + "," + dart.str(this.locale) + "," + dart.str(this.textBaseline) + "," + dart.str(this.anchor) + "}";
    }
  };
  (vector_drawable.DrawableTextStyle.new = function(opts) {
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let anchor = opts && 'anchor' in opts ? opts.anchor : null;
    this[decoration$] = decoration;
    this[decorationColor$] = decorationColor;
    this[decorationStyle$] = decorationStyle;
    this[fontWeight$] = fontWeight;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[fontStyle$] = fontStyle;
    this[foreground$] = foreground;
    this[background$] = background;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[height$] = height;
    this[locale$] = locale;
    this[textBaseline$] = textBaseline;
    this[anchor$] = anchor;
    ;
  }).prototype = vector_drawable.DrawableTextStyle.prototype;
  dart.addTypeTests(vector_drawable.DrawableTextStyle);
  dart.addTypeCaches(vector_drawable.DrawableTextStyle);
  dart.setMethodSignature(vector_drawable.DrawableTextStyle, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableTextStyle.__proto__),
    toFlutterTextStyle: dart.fnType(dart.legacy(ui.TextStyle), [], {foregroundOverride: dart.legacy(vector_drawable.DrawablePaint)}, {}),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(vector_drawable.DrawableTextStyle, L2);
  dart.setFieldSignature(vector_drawable.DrawableTextStyle, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableTextStyle.__proto__),
    decoration: dart.finalFieldType(dart.legacy(ui.TextDecoration)),
    decorationColor: dart.finalFieldType(dart.legacy(ui.Color)),
    decorationStyle: dart.finalFieldType(dart.legacy(ui.TextDecorationStyle)),
    fontWeight: dart.finalFieldType(dart.legacy(ui.FontWeight)),
    fontStyle: dart.finalFieldType(dart.legacy(ui.FontStyle)),
    textBaseline: dart.finalFieldType(dart.legacy(ui.TextBaseline)),
    fontFamily: dart.finalFieldType(dart.legacy(core.String)),
    fontSize: dart.finalFieldType(dart.legacy(core.double)),
    letterSpacing: dart.finalFieldType(dart.legacy(core.double)),
    wordSpacing: dart.finalFieldType(dart.legacy(core.double)),
    height: dart.finalFieldType(dart.legacy(core.double)),
    locale: dart.finalFieldType(dart.legacy(ui.Locale)),
    background: dart.finalFieldType(dart.legacy(vector_drawable.DrawablePaint)),
    foreground: dart.finalFieldType(dart.legacy(vector_drawable.DrawablePaint)),
    anchor: dart.finalFieldType(dart.legacy(vector_drawable.DrawableTextAnchorPosition))
  }));
  dart.defineExtensionMethods(vector_drawable.DrawableTextStyle, ['toString']);
  var _name$ = dart.privateName(vector_drawable, "_name");
  var C29;
  var C30;
  var C31;
  var C32;
  vector_drawable.DrawableTextAnchorPosition = class DrawableTextAnchorPosition extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (vector_drawable.DrawableTextAnchorPosition.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = vector_drawable.DrawableTextAnchorPosition.prototype;
  dart.addTypeTests(vector_drawable.DrawableTextAnchorPosition);
  dart.addTypeCaches(vector_drawable.DrawableTextAnchorPosition);
  dart.setMethodSignature(vector_drawable.DrawableTextAnchorPosition, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableTextAnchorPosition.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(vector_drawable.DrawableTextAnchorPosition, L2);
  dart.setFieldSignature(vector_drawable.DrawableTextAnchorPosition, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableTextAnchorPosition.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(vector_drawable.DrawableTextAnchorPosition, ['toString']);
  vector_drawable.DrawableTextAnchorPosition.start = C29 || CT.C29;
  vector_drawable.DrawableTextAnchorPosition.middle = C30 || CT.C30;
  vector_drawable.DrawableTextAnchorPosition.end = C31 || CT.C31;
  vector_drawable.DrawableTextAnchorPosition.values = C32 || CT.C32;
  var id$ = dart.privateName(vector_drawable, "DrawableText.id");
  var offset$ = dart.privateName(vector_drawable, "DrawableText.offset");
  var anchor$0 = dart.privateName(vector_drawable, "DrawableText.anchor");
  var fill$0 = dart.privateName(vector_drawable, "DrawableText.fill");
  var stroke$0 = dart.privateName(vector_drawable, "DrawableText.stroke");
  var transform$ = dart.privateName(vector_drawable, "DrawableText.transform");
  vector_drawable.DrawableText = class DrawableText extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get anchor() {
      return this[anchor$0];
    }
    set anchor(value) {
      super.anchor = value;
    }
    get fill() {
      return this[fill$0];
    }
    set fill(value) {
      super.fill = value;
    }
    get stroke() {
      return this[stroke$0];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get hasDrawableContent() {
      let t0, t0$, t0$0, t0$1;
      return dart.notNull((t0$ = (t0 = this.fill, t0 == null ? null : t0.width), t0$ == null ? 0.0 : t0$)) + dart.notNull((t0$1 = (t0$0 = this.stroke, t0$0 == null ? null : t0$0.width), t0$1 == null ? 0.0 : t0$1)) > 0.0;
    }
    draw(canvas, bounds) {
      if (!dart.test(this.hasDrawableContent)) {
        return;
      }
      if (this.transform != null) {
        canvas.save();
        canvas.transform(this.transform);
      }
      if (this.fill != null) {
        canvas.drawParagraph(this.fill, vector_drawable.DrawableText.resolveOffset(this.fill, this.anchor, this.offset));
      }
      if (this.stroke != null) {
        canvas.drawParagraph(this.stroke, vector_drawable.DrawableText.resolveOffset(this.stroke, this.anchor, this.offset));
      }
      if (this.transform != null) {
        canvas.restore();
      }
    }
    static resolveOffset(paragraph, anchor, offset) {
      if (!(paragraph != null)) dart.assertFailed(null, L3, 543, 12, "paragraph != null");
      if (!(anchor != null)) dart.assertFailed(null, L3, 544, 12, "anchor != null");
      if (!(offset != null)) dart.assertFailed(null, L3, 545, 12, "offset != null");
      switch (anchor) {
        case C30 || CT.C30:
        {
          return new ui.Offset.new(dart.notNull(offset.dx) - dart.notNull(paragraph.minIntrinsicWidth) / 2, dart.notNull(offset.dy) - dart.notNull(paragraph.alphabeticBaseline));
          break;
        }
        case C31 || CT.C31:
        {
          return new ui.Offset.new(dart.notNull(offset.dx) - dart.notNull(paragraph.minIntrinsicWidth), dart.notNull(offset.dy) - dart.notNull(paragraph.alphabeticBaseline));
          break;
        }
        case C29 || CT.C29:
        {
          return new ui.Offset.new(offset.dx, dart.notNull(offset.dy) - dart.notNull(paragraph.alphabeticBaseline));
          break;
        }
        default:
        {
          return offset;
          break;
        }
      }
    }
  };
  (vector_drawable.DrawableText.new = function(id, fill, stroke, offset, anchor, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$] = id;
    this[fill$0] = fill;
    this[stroke$0] = stroke;
    this[offset$] = offset;
    this[anchor$0] = anchor;
    this[transform$] = transform;
    if (!(fill != null || stroke != null)) dart.assertFailed(null, L3, 490, 15, "fill != null || stroke != null");
    ;
  }).prototype = vector_drawable.DrawableText.prototype;
  dart.addTypeTests(vector_drawable.DrawableText);
  dart.addTypeCaches(vector_drawable.DrawableText);
  vector_drawable.DrawableText[dart.implements] = () => [vector_drawable.Drawable];
  dart.setMethodSignature(vector_drawable.DrawableText, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableText.__proto__),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)])
  }));
  dart.setGetterSignature(vector_drawable.DrawableText, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableText.__proto__),
    hasDrawableContent: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(vector_drawable.DrawableText, L2);
  dart.setFieldSignature(vector_drawable.DrawableText, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableText.__proto__),
    id: dart.finalFieldType(dart.legacy(core.String)),
    offset: dart.finalFieldType(dart.legacy(ui.Offset)),
    anchor: dart.finalFieldType(dart.legacy(vector_drawable.DrawableTextAnchorPosition)),
    fill: dart.finalFieldType(dart.legacy(ui.Paragraph)),
    stroke: dart.finalFieldType(dart.legacy(ui.Paragraph)),
    transform: dart.finalFieldType(dart.legacy(typed_data.Float64List))
  }));
  var _gradients = dart.privateName(vector_drawable, "_gradients");
  var _clipPaths = dart.privateName(vector_drawable, "_clipPaths");
  var _drawables = dart.privateName(vector_drawable, "_drawables");
  vector_drawable.DrawableDefinitionServer = class DrawableDefinitionServer extends core.Object {
    getDrawable(id, opts) {
      let nullOk = opts && 'nullOk' in opts ? opts.nullOk : false;
      if (!(id != null)) dart.assertFailed(null, L3, 581, 12, "id != null");
      let value = this[_drawables][$_get](id);
      if (value == null && !dart.equals(nullOk, true)) {
        dart.throw(new core.StateError.new("Expected to find Drawable with id " + dart.str(id) + ".\n" + "Have ids: " + dart.str(this[_drawables][$keys])));
      }
      return value;
    }
    addDrawable(id, drawable) {
      if (!(id != null)) dart.assertFailed(null, L3, 592, 12, "id != null");
      if (!(drawable != null)) dart.assertFailed(null, L3, 593, 12, "drawable != null");
      if (!(id !== "url(#)")) dart.assertFailed(null, L3, 594, 12, "id != emptyUrlIri");
      this[_drawables][$_set](id, drawable);
    }
    getShader(id, bounds) {
      if (!(id != null)) dart.assertFailed(null, L3, 602, 12, "id != null");
      if (!(bounds != null)) dart.assertFailed(null, L3, 603, 12, "bounds != null");
      let srv = this[_gradients][$_get](id);
      return srv != null ? srv.createShader(bounds) : null;
    }
    getGradient(T, id) {
      if (!(id != null)) dart.assertFailed(null, L3, 610, 12, "id != null");
      return dart.legacy(T).as(this[_gradients][$_get](id));
    }
    addGradient(id, gradient) {
      if (!(id != null)) dart.assertFailed(null, L3, 616, 12, "id != null");
      if (!(gradient != null)) dart.assertFailed(null, L3, 617, 12, "gradient != null");
      this[_gradients][$_set](id, gradient);
    }
    getClipPath(id) {
      if (!(id != null)) dart.assertFailed(null, L3, 623, 12, "id != null");
      return this[_clipPaths][$_get](id);
    }
    addClipPath(id, paths) {
      if (!(id != null)) dart.assertFailed(null, L3, 629, 12, "id != null");
      if (!(paths != null)) dart.assertFailed(null, L3, 630, 12, "paths != null");
      this[_clipPaths][$_set](id, paths);
    }
  };
  (vector_drawable.DrawableDefinitionServer.new = function() {
    this[_gradients] = new (IdentityMapOfStringL$DrawableGradientL()).new();
    this[_clipPaths] = new (IdentityMapOfStringL$ListLOfPathL()).new();
    this[_drawables] = new (IdentityMapOfStringL$DrawableStyleableL()).new();
    ;
  }).prototype = vector_drawable.DrawableDefinitionServer.prototype;
  dart.addTypeTests(vector_drawable.DrawableDefinitionServer);
  dart.addTypeCaches(vector_drawable.DrawableDefinitionServer);
  dart.setMethodSignature(vector_drawable.DrawableDefinitionServer, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableDefinitionServer.__proto__),
    getDrawable: dart.fnType(dart.legacy(vector_drawable.DrawableStyleable), [dart.legacy(core.String)], {nullOk: dart.legacy(core.bool)}, {}),
    addDrawable: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(vector_drawable.DrawableStyleable)]),
    getShader: dart.fnType(dart.legacy(ui.Shader), [dart.legacy(core.String), dart.legacy(ui.Rect)]),
    getGradient: dart.gFnType(T => [dart.legacy(T), [dart.legacy(core.String)]], T => [dart.legacy(vector_drawable.DrawableGradient)]),
    addGradient: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(vector_drawable.DrawableGradient)]),
    getClipPath: dart.fnType(dart.legacy(core.List$(dart.legacy(ui.Path))), [dart.legacy(core.String)]),
    addClipPath: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(ui.Path)))])
  }));
  dart.setLibraryUri(vector_drawable.DrawableDefinitionServer, L2);
  dart.setFieldSignature(vector_drawable.DrawableDefinitionServer, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableDefinitionServer.__proto__),
    [_gradients]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(vector_drawable.DrawableGradient)))),
    [_clipPaths]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(ui.Path)))))),
    [_drawables]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(vector_drawable.DrawableStyleable))))
  }));
  var C33;
  var C34;
  var C35;
  vector_drawable.GradientUnitMode = class GradientUnitMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (vector_drawable.GradientUnitMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = vector_drawable.GradientUnitMode.prototype;
  dart.addTypeTests(vector_drawable.GradientUnitMode);
  dart.addTypeCaches(vector_drawable.GradientUnitMode);
  dart.setMethodSignature(vector_drawable.GradientUnitMode, () => ({
    __proto__: dart.getMethods(vector_drawable.GradientUnitMode.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(vector_drawable.GradientUnitMode, L2);
  dart.setFieldSignature(vector_drawable.GradientUnitMode, () => ({
    __proto__: dart.getFields(vector_drawable.GradientUnitMode.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(vector_drawable.GradientUnitMode, ['toString']);
  vector_drawable.GradientUnitMode.objectBoundingBox = C33 || CT.C33;
  vector_drawable.GradientUnitMode.userSpaceOnUse = C34 || CT.C34;
  vector_drawable.GradientUnitMode.values = C35 || CT.C35;
  var C36;
  var offsets$ = dart.privateName(vector_drawable, "DrawableGradient.offsets");
  var colors$ = dart.privateName(vector_drawable, "DrawableGradient.colors");
  var spreadMethod$ = dart.privateName(vector_drawable, "DrawableGradient.spreadMethod");
  var unitMode$ = dart.privateName(vector_drawable, "DrawableGradient.unitMode");
  var transform$0 = dart.privateName(vector_drawable, "DrawableGradient.transform");
  vector_drawable.DrawableGradient = class DrawableGradient extends core.Object {
    get offsets() {
      return this[offsets$];
    }
    set offsets(value) {
      super.offsets = value;
    }
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get spreadMethod() {
      return this[spreadMethod$];
    }
    set spreadMethod(value) {
      super.spreadMethod = value;
    }
    get unitMode() {
      return this[unitMode$];
    }
    set unitMode(value) {
      super.unitMode = value;
    }
    get transform() {
      return this[transform$0];
    }
    set transform(value) {
      super.transform = value;
    }
  };
  (vector_drawable.DrawableGradient.new = function(offsets, colors, opts) {
    let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : C36 || CT.C36;
    let unitMode = opts && 'unitMode' in opts ? opts.unitMode : C33 || CT.C33;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[offsets$] = offsets;
    this[colors$] = colors;
    this[spreadMethod$] = spreadMethod;
    this[unitMode$] = unitMode;
    this[transform$0] = transform;
    ;
  }).prototype = vector_drawable.DrawableGradient.prototype;
  dart.addTypeTests(vector_drawable.DrawableGradient);
  dart.addTypeCaches(vector_drawable.DrawableGradient);
  dart.setLibraryUri(vector_drawable.DrawableGradient, L2);
  dart.setFieldSignature(vector_drawable.DrawableGradient, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableGradient.__proto__),
    offsets: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    colors: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(ui.Color)))),
    spreadMethod: dart.finalFieldType(dart.legacy(ui.TileMode)),
    unitMode: dart.finalFieldType(dart.legacy(vector_drawable.GradientUnitMode)),
    transform: dart.finalFieldType(dart.legacy(typed_data.Float64List))
  }));
  var from$ = dart.privateName(vector_drawable, "DrawableLinearGradient.from");
  var to$ = dart.privateName(vector_drawable, "DrawableLinearGradient.to");
  vector_drawable.DrawableLinearGradient = class DrawableLinearGradient extends vector_drawable.DrawableGradient {
    get from() {
      return this[from$];
    }
    set from(value) {
      super.from = value;
    }
    get to() {
      return this[to$];
    }
    set to(value) {
      super.to = value;
    }
    createShader(bounds) {
      let t0;
      let isObjectBoundingBox = this.unitMode == vector_drawable.GradientUnitMode.objectBoundingBox;
      let m4transform = this.transform == null ? vector_math_64.Matrix4.identity() : new vector_math_64.Matrix4.fromFloat64List(this.transform);
      if (isObjectBoundingBox) {
        let scale = parsers.affineMatrix(bounds.width, 0.0, 0.0, bounds.height, 0.0, 0.0);
        let translate = parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, bounds.left, bounds.top);
        m4transform = (t0 = translate.multiplied(scale), (() => {
          t0.multiply(m4transform);
          return t0;
        })());
      }
      let v3from = m4transform.transform3(vector_math_64.Vector3.new(this.from.dx, this.from.dy, 0.0));
      let v3to = m4transform.transform3(vector_math_64.Vector3.new(this.to.dx, this.to.dy, 0.0));
      return ui.Gradient.linear(new ui.Offset.new(v3from.x, v3from.y), new ui.Offset.new(v3to.x, v3to.y), this.colors, this.offsets, this.spreadMethod);
    }
  };
  (vector_drawable.DrawableLinearGradient.new = function(opts) {
    let from = opts && 'from' in opts ? opts.from : null;
    let to = opts && 'to' in opts ? opts.to : null;
    let offsets = opts && 'offsets' in opts ? opts.offsets : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : null;
    let unitMode = opts && 'unitMode' in opts ? opts.unitMode : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[from$] = from;
    this[to$] = to;
    vector_drawable.DrawableLinearGradient.__proto__.new.call(this, offsets, colors, {spreadMethod: spreadMethod, unitMode: unitMode, transform: transform});
    ;
  }).prototype = vector_drawable.DrawableLinearGradient.prototype;
  dart.addTypeTests(vector_drawable.DrawableLinearGradient);
  dart.addTypeCaches(vector_drawable.DrawableLinearGradient);
  dart.setMethodSignature(vector_drawable.DrawableLinearGradient, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableLinearGradient.__proto__),
    createShader: dart.fnType(dart.legacy(ui.Shader), [dart.legacy(ui.Rect)])
  }));
  dart.setLibraryUri(vector_drawable.DrawableLinearGradient, L2);
  dart.setFieldSignature(vector_drawable.DrawableLinearGradient, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableLinearGradient.__proto__),
    from: dart.finalFieldType(dart.legacy(ui.Offset)),
    to: dart.finalFieldType(dart.legacy(ui.Offset))
  }));
  var center$ = dart.privateName(vector_drawable, "DrawableRadialGradient.center");
  var radius$ = dart.privateName(vector_drawable, "DrawableRadialGradient.radius");
  var focal$ = dart.privateName(vector_drawable, "DrawableRadialGradient.focal");
  var focalRadius$ = dart.privateName(vector_drawable, "DrawableRadialGradient.focalRadius");
  vector_drawable.DrawableRadialGradient = class DrawableRadialGradient extends vector_drawable.DrawableGradient {
    get center() {
      return this[center$];
    }
    set center(value) {
      super.center = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get focal() {
      return this[focal$];
    }
    set focal(value) {
      super.focal = value;
    }
    get focalRadius() {
      return this[focalRadius$];
    }
    set focalRadius(value) {
      super.focalRadius = value;
    }
    createShader(bounds) {
      let t0;
      let isObjectBoundingBox = this.unitMode == vector_drawable.GradientUnitMode.objectBoundingBox;
      let m4transform = this.transform == null ? vector_math_64.Matrix4.identity() : new vector_math_64.Matrix4.fromFloat64List(this.transform);
      if (isObjectBoundingBox) {
        let scale = parsers.affineMatrix(bounds.width, 0.0, 0.0, bounds.height, 0.0, 0.0);
        let translate = parsers.affineMatrix(1.0, 0.0, 0.0, 1.0, bounds.left, bounds.top);
        m4transform = (t0 = translate.multiplied(scale), (() => {
          t0.multiply(m4transform);
          return t0;
        })());
      }
      return ui.Gradient.radial(this.center, this.radius, this.colors, this.offsets, this.spreadMethod, m4transform.storage, this.focal, 0.0);
    }
  };
  (vector_drawable.DrawableRadialGradient.new = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let focal = opts && 'focal' in opts ? opts.focal : null;
    let focalRadius = opts && 'focalRadius' in opts ? opts.focalRadius : 0;
    let offsets = opts && 'offsets' in opts ? opts.offsets : null;
    let colors = opts && 'colors' in opts ? opts.colors : null;
    let spreadMethod = opts && 'spreadMethod' in opts ? opts.spreadMethod : null;
    let unitMode = opts && 'unitMode' in opts ? opts.unitMode : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[center$] = center;
    this[radius$] = radius;
    this[focal$] = focal;
    this[focalRadius$] = focalRadius;
    vector_drawable.DrawableRadialGradient.__proto__.new.call(this, offsets, colors, {spreadMethod: spreadMethod, unitMode: unitMode, transform: transform});
    ;
  }).prototype = vector_drawable.DrawableRadialGradient.prototype;
  dart.addTypeTests(vector_drawable.DrawableRadialGradient);
  dart.addTypeCaches(vector_drawable.DrawableRadialGradient);
  dart.setMethodSignature(vector_drawable.DrawableRadialGradient, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableRadialGradient.__proto__),
    createShader: dart.fnType(dart.legacy(ui.Shader), [dart.legacy(ui.Rect)])
  }));
  dart.setLibraryUri(vector_drawable.DrawableRadialGradient, L2);
  dart.setFieldSignature(vector_drawable.DrawableRadialGradient, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableRadialGradient.__proto__),
    center: dart.finalFieldType(dart.legacy(ui.Offset)),
    radius: dart.finalFieldType(dart.legacy(core.double)),
    focal: dart.finalFieldType(dart.legacy(ui.Offset)),
    focalRadius: dart.finalFieldType(dart.legacy(core.double))
  }));
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C37;
  var viewBoxOffset$ = dart.privateName(vector_drawable, "DrawableViewport.viewBoxOffset");
  var viewBox$ = dart.privateName(vector_drawable, "DrawableViewport.viewBox");
  var size$ = dart.privateName(vector_drawable, "DrawableViewport.size");
  vector_drawable.DrawableViewport = class DrawableViewport extends core.Object {
    get viewBoxOffset() {
      return this[viewBoxOffset$];
    }
    set viewBoxOffset(value) {
      super.viewBoxOffset = value;
    }
    get viewBox() {
      return this[viewBox$];
    }
    set viewBox(value) {
      super.viewBox = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get viewBoxRect() {
      return ui.Offset.zero['&'](this.viewBox);
    }
    get width() {
      return this.size.width;
    }
    get height() {
      return this.size.height;
    }
    toString() {
      return "DrawableViewport{" + dart.str(this.size) + ", viewBox: " + dart.str(this.viewBox) + ", " + "viewBoxOffset: " + dart.str(this.viewBoxOffset) + "}";
    }
  };
  (vector_drawable.DrawableViewport.new = function(size, viewBox, opts) {
    let viewBoxOffset = opts && 'viewBoxOffset' in opts ? opts.viewBoxOffset : C37 || CT.C37;
    this[size$] = size;
    this[viewBox$] = viewBox;
    this[viewBoxOffset$] = viewBoxOffset;
    if (!(size != null)) dart.assertFailed(null, L3, 820, 16, "size != null");
    if (!(viewBox != null)) dart.assertFailed(null, L3, 821, 16, "viewBox != null");
    if (!(viewBoxOffset != null)) dart.assertFailed(null, L3, 822, 16, "viewBoxOffset != null");
    ;
  }).prototype = vector_drawable.DrawableViewport.prototype;
  dart.addTypeTests(vector_drawable.DrawableViewport);
  dart.addTypeCaches(vector_drawable.DrawableViewport);
  dart.setMethodSignature(vector_drawable.DrawableViewport, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableViewport.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(vector_drawable.DrawableViewport, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableViewport.__proto__),
    viewBoxRect: dart.legacy(ui.Rect),
    width: dart.legacy(core.double),
    height: dart.legacy(core.double)
  }));
  dart.setLibraryUri(vector_drawable.DrawableViewport, L2);
  dart.setFieldSignature(vector_drawable.DrawableViewport, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableViewport.__proto__),
    viewBoxOffset: dart.finalFieldType(dart.legacy(ui.Offset)),
    viewBox: dart.finalFieldType(dart.legacy(ui.Size)),
    size: dart.finalFieldType(dart.legacy(ui.Size))
  }));
  dart.defineExtensionMethods(vector_drawable.DrawableViewport, ['toString']);
  var viewport$ = dart.privateName(vector_drawable, "DrawableRoot.viewport");
  var id$0 = dart.privateName(vector_drawable, "DrawableRoot.id");
  var transform$1 = dart.privateName(vector_drawable, "DrawableRoot.transform");
  var children$ = dart.privateName(vector_drawable, "DrawableRoot.children");
  var definitions$ = dart.privateName(vector_drawable, "DrawableRoot.definitions");
  var style$0 = dart.privateName(vector_drawable, "DrawableRoot.style");
  vector_drawable.DrawableRoot = class DrawableRoot extends core.Object {
    get viewport() {
      return this[viewport$];
    }
    set viewport(value) {
      super.viewport = value;
    }
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get transform() {
      return this[transform$1];
    }
    set transform(value) {
      super.transform = value;
    }
    get children() {
      return this[children$];
    }
    set children(value) {
      super.children = value;
    }
    get definitions() {
      return this[definitions$];
    }
    set definitions(value) {
      super.definitions = value;
    }
    get style() {
      return this[style$0];
    }
    set style(value) {
      super.style = value;
    }
    scaleCanvasToViewBox(canvas, desiredSize) {
      render_picture.scaleCanvasToViewBox(canvas, desiredSize, this.viewport.viewBoxRect, this.viewport.size);
    }
    clipCanvasToViewBox(canvas) {
      canvas.clipRect(this.viewport.viewBoxRect);
    }
    get hasDrawableContent() {
      return dart.equals(this.children[$isNotEmpty], true) && this.viewport != null && !dart.test(this.viewport.viewBox.isEmpty);
    }
    draw(canvas, bounds) {
      if (!dart.test(this.hasDrawableContent)) {
        return;
      }
      if (this.transform != null) {
        canvas.save();
        canvas.transform(this.transform);
      }
      if (!dart.equals(this.viewport.viewBoxOffset, ui.Offset.zero)) {
        canvas.translate(this.viewport.viewBoxOffset.dx, this.viewport.viewBoxOffset.dy);
      }
      for (let child of this.children) {
        child.draw(canvas, this.viewport.viewBoxRect);
      }
      if (this.transform != null) {
        canvas.restore();
      }
      if (!dart.equals(this.viewport.viewBoxOffset, ui.Offset.zero)) {
        canvas.restore();
      }
    }
    toPicture(opts) {
      let t0;
      let size = opts && 'size' in opts ? opts.size : null;
      let clipToViewBox = opts && 'clipToViewBox' in opts ? opts.clipToViewBox : true;
      let colorFilter = opts && 'colorFilter' in opts ? opts.colorFilter : null;
      if (this.viewport == null || this.viewport.viewBox.width === 0) {
        return null;
      }
      let recorder = ui.PictureRecorder.new();
      let canvas = ui.Canvas.new(recorder, this.viewport.viewBoxRect);
      if (colorFilter != null) {
        canvas.saveLayer(null, (t0 = ui.Paint.new(), (() => {
          t0.colorFilter = colorFilter;
          return t0;
        })()));
      } else {
        canvas.save();
      }
      if (size != null) {
        this.scaleCanvasToViewBox(canvas, size);
      }
      if (dart.equals(clipToViewBox, true)) {
        this.clipCanvasToViewBox(canvas);
      }
      this.draw(canvas, this.viewport.viewBoxRect);
      canvas.restore();
      return recorder.endRecording();
    }
    mergeStyle(newStyle) {
      if (!(newStyle != null)) dart.assertFailed(null, L3, 967, 12, "newStyle != null");
      let mergedStyle = vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, mask: newStyle.mask, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle});
      let mergedChildren = this.children[$map](DrawableL(), dart.fn(child => {
        if (DrawableStyleableL().is(child)) {
          return child.mergeStyle(mergedStyle);
        }
        return child;
      }, DrawableLToDrawableL()))[$toList]();
      return new vector_drawable.DrawableRoot.new(this.id, this.viewport, mergedChildren, this.definitions, mergedStyle, {transform: this.transform});
    }
  };
  (vector_drawable.DrawableRoot.new = function(id, viewport, children, definitions, style, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$0] = id;
    this[viewport$] = viewport;
    this[children$] = children;
    this[definitions$] = definitions;
    this[style$0] = style;
    this[transform$1] = transform;
    ;
  }).prototype = vector_drawable.DrawableRoot.prototype;
  dart.addTypeTests(vector_drawable.DrawableRoot);
  dart.addTypeCaches(vector_drawable.DrawableRoot);
  vector_drawable.DrawableRoot[dart.implements] = () => [vector_drawable.DrawableParent];
  dart.setMethodSignature(vector_drawable.DrawableRoot, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableRoot.__proto__),
    scaleCanvasToViewBox: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)]),
    clipCanvasToViewBox: dart.fnType(dart.void, [dart.legacy(ui.Canvas)]),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)]),
    toPicture: dart.fnType(dart.legacy(ui.Picture), [], {clipToViewBox: dart.legacy(core.bool), colorFilter: dart.legacy(ui.ColorFilter), size: dart.legacy(ui.Size)}, {}),
    mergeStyle: dart.fnType(dart.legacy(vector_drawable.DrawableRoot), [dart.legacy(vector_drawable.DrawableStyle)])
  }));
  dart.setGetterSignature(vector_drawable.DrawableRoot, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableRoot.__proto__),
    hasDrawableContent: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(vector_drawable.DrawableRoot, L2);
  dart.setFieldSignature(vector_drawable.DrawableRoot, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableRoot.__proto__),
    viewport: dart.finalFieldType(dart.legacy(vector_drawable.DrawableViewport)),
    id: dart.finalFieldType(dart.legacy(core.String)),
    transform: dart.finalFieldType(dart.legacy(typed_data.Float64List)),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(vector_drawable.Drawable)))),
    definitions: dart.finalFieldType(dart.legacy(vector_drawable.DrawableDefinitionServer)),
    style: dart.finalFieldType(dart.legacy(vector_drawable.DrawableStyle))
  }));
  var id$1 = dart.privateName(vector_drawable, "DrawableGroup.id");
  var children$0 = dart.privateName(vector_drawable, "DrawableGroup.children");
  var style$1 = dart.privateName(vector_drawable, "DrawableGroup.style");
  var transform$2 = dart.privateName(vector_drawable, "DrawableGroup.transform");
  vector_drawable.DrawableGroup = class DrawableGroup extends core.Object {
    get id() {
      return this[id$1];
    }
    set id(value) {
      super.id = value;
    }
    get children() {
      return this[children$0];
    }
    set children(value) {
      super.children = value;
    }
    get style() {
      return this[style$1];
    }
    set style(value) {
      super.style = value;
    }
    get transform() {
      return this[transform$2];
    }
    set transform(value) {
      super.transform = value;
    }
    get hasDrawableContent() {
      return this.children != null && dart.test(this.children[$isNotEmpty]);
    }
    draw(canvas, bounds) {
      let t0, t0$;
      if (!dart.test(this.hasDrawableContent)) {
        return;
      }
      let innerDraw = dart.fn(() => {
        if (this.style.groupOpacity === 0) {
          return;
        }
        if (this.transform != null) {
          canvas.save();
          canvas.transform(this.transform);
        }
        let needsSaveLayer = this.style.mask != null;
        let blendingPaint = ui.Paint.new();
        if (this.style.groupOpacity != null && this.style.groupOpacity !== 1.0) {
          blendingPaint.color = new ui.Color.fromRGBO(0, 0, 0, this.style.groupOpacity);
          needsSaveLayer = true;
        }
        if (this.style.blendMode != null) {
          blendingPaint.blendMode = this.style.blendMode;
          needsSaveLayer = true;
        }
        if (needsSaveLayer) {
          canvas.saveLayer(null, blendingPaint);
        }
        for (let child of this.children) {
          child.draw(canvas, bounds);
        }
        if (this.style.mask != null) {
          canvas.saveLayer(null, vector_drawable._grayscaleDstInPaint);
          this.style.mask.draw(canvas, bounds);
          canvas.restore();
        }
        if (needsSaveLayer) {
          canvas.restore();
        }
        if (this.transform != null) {
          canvas.restore();
        }
      }, VoidToNull());
      if (dart.equals((t0$ = (t0 = this.style, t0 == null ? null : t0.clipPath), t0$ == null ? null : t0$[$isNotEmpty]), true)) {
        for (let clipPath of this.style.clipPath) {
          canvas.save();
          canvas.clipPath(clipPath);
          if (dart.notNull(this.children[$length]) > 1) {
            canvas.saveLayer(null, ui.Paint.new());
          }
          dart.dcall(innerDraw, []);
          if (dart.notNull(this.children[$length]) > 1) {
            canvas.restore();
          }
          canvas.restore();
        }
      } else {
        dart.dcall(innerDraw, []);
      }
    }
    mergeStyle(newStyle) {
      if (!(newStyle != null)) dart.assertFailed(null, L3, 1087, 12, "newStyle != null");
      let mergedStyle = vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle});
      let mergedChildren = this.children[$map](DrawableL(), dart.fn(child => {
        if (DrawableStyleableL().is(child)) {
          return child.mergeStyle(mergedStyle);
        }
        return child;
      }, DrawableLToDrawableL()))[$toList]();
      return new vector_drawable.DrawableGroup.new(this.id, mergedChildren, mergedStyle, {transform: this.transform});
    }
  };
  (vector_drawable.DrawableGroup.new = function(id, children, style, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$1] = id;
    this[children$0] = children;
    this[style$1] = style;
    this[transform$2] = transform;
    ;
  }).prototype = vector_drawable.DrawableGroup.prototype;
  dart.addTypeTests(vector_drawable.DrawableGroup);
  dart.addTypeCaches(vector_drawable.DrawableGroup);
  vector_drawable.DrawableGroup[dart.implements] = () => [vector_drawable.DrawableStyleable, vector_drawable.DrawableParent];
  dart.setMethodSignature(vector_drawable.DrawableGroup, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableGroup.__proto__),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)]),
    mergeStyle: dart.fnType(dart.legacy(vector_drawable.DrawableGroup), [dart.legacy(vector_drawable.DrawableStyle)])
  }));
  dart.setGetterSignature(vector_drawable.DrawableGroup, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableGroup.__proto__),
    hasDrawableContent: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(vector_drawable.DrawableGroup, L2);
  dart.setFieldSignature(vector_drawable.DrawableGroup, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableGroup.__proto__),
    id: dart.finalFieldType(dart.legacy(core.String)),
    children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(vector_drawable.Drawable)))),
    style: dart.finalFieldType(dart.legacy(vector_drawable.DrawableStyle)),
    transform: dart.finalFieldType(dart.legacy(typed_data.Float64List))
  }));
  var id$2 = dart.privateName(vector_drawable, "DrawableRasterImage.id");
  var image$ = dart.privateName(vector_drawable, "DrawableRasterImage.image");
  var offset$0 = dart.privateName(vector_drawable, "DrawableRasterImage.offset");
  var size$0 = dart.privateName(vector_drawable, "DrawableRasterImage.size");
  var transform$3 = dart.privateName(vector_drawable, "DrawableRasterImage.transform");
  var style$2 = dart.privateName(vector_drawable, "DrawableRasterImage.style");
  vector_drawable.DrawableRasterImage = class DrawableRasterImage extends core.Object {
    get id() {
      return this[id$2];
    }
    set id(value) {
      super.id = value;
    }
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get offset() {
      return this[offset$0];
    }
    set offset(value) {
      super.offset = value;
    }
    get size() {
      return this[size$0];
    }
    set size(value) {
      super.size = value;
    }
    get transform() {
      return this[transform$3];
    }
    set transform(value) {
      super.transform = value;
    }
    get style() {
      return this[style$2];
    }
    set style(value) {
      super.style = value;
    }
    draw(canvas, bounds) {
      let imageSize = new ui.Size.new(this.image.width[$toDouble](), this.image.height[$toDouble]());
      let desiredSize = imageSize;
      let scale = 1.0;
      if (this.size != null) {
        desiredSize = this.size;
        scale = math.min(doubleL(), dart.notNull(this.size.width) / dart.notNull(this.image.width), dart.notNull(this.size.height) / dart.notNull(this.image.height));
      }
      if (scale !== 1.0 || !dart.equals(this.offset, ui.Offset.zero) || this.transform != null) {
        let halfDesiredSize = desiredSize['/'](2.0);
        let scaledHalfImageSize = imageSize['*'](scale)['/'](2.0);
        let shift = new ui.Offset.new(dart.notNull(halfDesiredSize.width) - dart.notNull(scaledHalfImageSize.width), dart.notNull(halfDesiredSize.height) - dart.notNull(scaledHalfImageSize.height));
        canvas.save();
        canvas.translate(dart.notNull(this.offset.dx) + dart.notNull(shift.dx), dart.notNull(this.offset.dy) + dart.notNull(shift.dy));
        canvas.scale(scale, scale);
        if (this.transform != null) {
          canvas.transform(this.transform);
        }
      }
      canvas.drawImage(this.image, ui.Offset.zero, ui.Paint.new());
      if (scale !== 1.0 || !dart.equals(this.offset, ui.Offset.zero) || this.transform != null) {
        canvas.restore();
      }
    }
    get hasDrawableContent() {
      return dart.notNull(this.image.height) > 0 && dart.notNull(this.image.width) > 0;
    }
    mergeStyle(newStyle) {
      if (!(newStyle != null)) dart.assertFailed(null, L3, 1187, 12, "newStyle != null");
      return new vector_drawable.DrawableRasterImage.new(this.id, this.image, this.offset, vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, mask: newStyle.mask, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle}), {size: this.size, transform: this.transform});
    }
  };
  (vector_drawable.DrawableRasterImage.new = function(id, image, offset, style, opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$2] = id;
    this[image$] = image;
    this[offset$0] = offset;
    this[style$2] = style;
    this[size$0] = size;
    this[transform$3] = transform;
    if (!(image != null)) dart.assertFailed(null, L3, 1126, 16, "image != null");
    if (!(offset != null)) dart.assertFailed(null, L3, 1127, 16, "offset != null");
    ;
  }).prototype = vector_drawable.DrawableRasterImage.prototype;
  dart.addTypeTests(vector_drawable.DrawableRasterImage);
  dart.addTypeCaches(vector_drawable.DrawableRasterImage);
  vector_drawable.DrawableRasterImage[dart.implements] = () => [vector_drawable.DrawableStyleable];
  dart.setMethodSignature(vector_drawable.DrawableRasterImage, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableRasterImage.__proto__),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)]),
    mergeStyle: dart.fnType(dart.legacy(vector_drawable.DrawableRasterImage), [dart.legacy(vector_drawable.DrawableStyle)])
  }));
  dart.setGetterSignature(vector_drawable.DrawableRasterImage, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableRasterImage.__proto__),
    hasDrawableContent: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(vector_drawable.DrawableRasterImage, L2);
  dart.setFieldSignature(vector_drawable.DrawableRasterImage, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableRasterImage.__proto__),
    id: dart.finalFieldType(dart.legacy(core.String)),
    image: dart.finalFieldType(dart.legacy(ui.Image)),
    offset: dart.finalFieldType(dart.legacy(ui.Offset)),
    size: dart.finalFieldType(dart.legacy(ui.Size)),
    transform: dart.finalFieldType(dart.legacy(typed_data.Float64List)),
    style: dart.finalFieldType(dart.legacy(vector_drawable.DrawableStyle))
  }));
  var id$3 = dart.privateName(vector_drawable, "DrawableShape.id");
  var transform$4 = dart.privateName(vector_drawable, "DrawableShape.transform");
  var style$3 = dart.privateName(vector_drawable, "DrawableShape.style");
  var path$ = dart.privateName(vector_drawable, "DrawableShape.path");
  vector_drawable.DrawableShape = class DrawableShape extends core.Object {
    get id() {
      return this[id$3];
    }
    set id(value) {
      super.id = value;
    }
    get transform() {
      return this[transform$4];
    }
    set transform(value) {
      super.transform = value;
    }
    get style() {
      return this[style$3];
    }
    set style(value) {
      super.style = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get bounds() {
      return this.path.getBounds();
    }
    get hasDrawableContent() {
      return dart.notNull(this.bounds.width) + dart.notNull(this.bounds.height) > 0;
    }
    draw(canvas, bounds) {
      let t0, t0$;
      if (!dart.test(this.hasDrawableContent) || this.style == null) {
        return;
      }
      this.path.fillType = (t0 = this.style.pathFillType, t0 == null ? ui.PathFillType.nonZero : t0);
      let innerDraw = dart.fn(() => {
        let t0, t0$, t0$0;
        if (this.transform != null) {
          canvas.save();
          canvas.transform(this.transform);
        }
        if (this.style.blendMode != null) {
          canvas.saveLayer(null, (t0 = ui.Paint.new(), (() => {
            t0.blendMode = this.style.blendMode;
            return t0;
          })()));
        }
        if (this.style.mask != null) {
          canvas.saveLayer(null, ui.Paint.new());
        }
        if ((t0$ = this.style.fill, t0$ == null ? null : t0$.style) != null) {
          if (!dart.equals(this.style.fill.style, ui.PaintingStyle.fill)) dart.assertFailed(null, L3, 1258, 16, "style.fill.style == PaintingStyle.fill");
          canvas.drawPath(this.path, this.style.fill.toFlutterPaint());
        }
        if ((t0$0 = this.style.stroke, t0$0 == null ? null : t0$0.style) != null) {
          if (!dart.equals(this.style.stroke.style, ui.PaintingStyle.stroke)) dart.assertFailed(null, L3, 1263, 16, "style.stroke.style == PaintingStyle.stroke");
          if (this.style.dashArray != null && this.style.dashArray != vector_drawable.DrawableStyle.emptyDashArray) {
            canvas.drawPath(dash_path.dashPath(this.path, {dashArray: this.style.dashArray, dashOffset: this.style.dashOffset}), this.style.stroke.toFlutterPaint());
          } else {
            canvas.drawPath(this.path, this.style.stroke.toFlutterPaint());
          }
        }
        if (this.style.mask != null) {
          canvas.saveLayer(null, vector_drawable._grayscaleDstInPaint);
          this.style.mask.draw(canvas, bounds);
          canvas.restore();
          canvas.restore();
        }
        if (this.style.blendMode != null) {
          canvas.restore();
        }
        if (this.transform != null) {
          canvas.restore();
        }
      }, VoidToNull());
      if (dart.equals((t0$ = this.style.clipPath, t0$ == null ? null : t0$[$isNotEmpty]), true)) {
        for (let clip of this.style.clipPath) {
          canvas.save();
          canvas.clipPath(clip);
          dart.dcall(innerDraw, []);
          canvas.restore();
        }
      } else {
        dart.dcall(innerDraw, []);
      }
    }
    mergeStyle(newStyle) {
      if (!(newStyle != null)) dart.assertFailed(null, L3, 1307, 12, "newStyle != null");
      return new vector_drawable.DrawableShape.new(this.id, this.path, vector_drawable.DrawableStyle.mergeAndBlend(this.style, {fill: newStyle.fill, stroke: newStyle.stroke, clipPath: newStyle.clipPath, mask: newStyle.mask, dashArray: newStyle.dashArray, dashOffset: newStyle.dashOffset, pathFillType: newStyle.pathFillType, textStyle: newStyle.textStyle}), {transform: this.transform});
    }
  };
  (vector_drawable.DrawableShape.new = function(id, path, style, opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this[id$3] = id;
    this[path$] = path;
    this[style$3] = style;
    this[transform$4] = transform;
    if (!(path != null)) dart.assertFailed(null, L3, 1213, 16, "path != null");
    if (!(style != null)) dart.assertFailed(null, L3, 1214, 16, "style != null");
    ;
  }).prototype = vector_drawable.DrawableShape.prototype;
  dart.addTypeTests(vector_drawable.DrawableShape);
  dart.addTypeCaches(vector_drawable.DrawableShape);
  vector_drawable.DrawableShape[dart.implements] = () => [vector_drawable.DrawableStyleable];
  dart.setMethodSignature(vector_drawable.DrawableShape, () => ({
    __proto__: dart.getMethods(vector_drawable.DrawableShape.__proto__),
    draw: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Rect)]),
    mergeStyle: dart.fnType(dart.legacy(vector_drawable.DrawableShape), [dart.legacy(vector_drawable.DrawableStyle)])
  }));
  dart.setGetterSignature(vector_drawable.DrawableShape, () => ({
    __proto__: dart.getGetters(vector_drawable.DrawableShape.__proto__),
    bounds: dart.legacy(ui.Rect),
    hasDrawableContent: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(vector_drawable.DrawableShape, L2);
  dart.setFieldSignature(vector_drawable.DrawableShape, () => ({
    __proto__: dart.getFields(vector_drawable.DrawableShape.__proto__),
    id: dart.finalFieldType(dart.legacy(core.String)),
    transform: dart.finalFieldType(dart.legacy(typed_data.Float64List)),
    style: dart.finalFieldType(dart.legacy(vector_drawable.DrawableStyle)),
    path: dart.finalFieldType(dart.legacy(ui.Path))
  }));
  var C39;
  var _CkMatrixColorFilter_matrix = dart.privateName(_engine, "_CkMatrixColorFilter.matrix");
  var C38;
  dart.defineLazy(vector_drawable, {
    /*vector_drawable._grayscaleDstInPaint*/get _grayscaleDstInPaint() {
      let t0;
      return t0 = ui.Paint.new(), (() => {
        t0.blendMode = ui.BlendMode.dstIn;
        t0.colorFilter = C38 || CT.C38;
        return t0;
      })();
    }
  }, true);
  dart.trackLibraries("packages/flutter_svg/src/svg/xml_parsers.dart", {
    "package:flutter_svg/src/svg/xml_parsers.dart": xml_parsers,
    "package:flutter_svg/src/svg/parsers.dart": parsers,
    "package:flutter_svg/src/vector_drawable.dart": vector_drawable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["xml_parsers.dart","parsers.dart","../vector_drawable.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/flutter_svg/src/svg/xml_parsers.dart.lib.js"}');
  // Exports:
  return {
    src__svg__xml_parsers: xml_parsers,
    src__svg__parsers: parsers,
    src__vector_drawable: vector_drawable
  };
}));

//# sourceMappingURL=xml_parsers.dart.lib.js.map
