define(['dart_sdk', 'packages/flutter/src/foundation/debug.dart'], (function load__packages__flutter_svg__src__picture_stream_dart(dart_sdk, packages__flutter__src__foundation__debug$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  var picture_stream = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $add = dartx.add;
  var $removeWhere = dartx.removeWhere;
  var $length = dartx.length;
  var $isEmpty = dartx.isEmpty;
  var PictureInfoL = () => (PictureInfoL = dart.constFn(dart.legacy(picture_stream.PictureInfo)))();
  var _PictureListenerPairL = () => (_PictureListenerPairL = dart.constFn(dart.legacy(picture_stream._PictureListenerPair)))();
  var JSArrayOf_PictureListenerPairL = () => (JSArrayOf_PictureListenerPairL = dart.constFn(_interceptors.JSArray$(_PictureListenerPairL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var _PictureListenerPairLToboolL = () => (_PictureListenerPairLToboolL = dart.constFn(dart.fnType(boolL(), [_PictureListenerPairL()])))();
  var PictureStreamCompleterL = () => (PictureStreamCompleterL = dart.constFn(dart.legacy(picture_stream.PictureStreamCompleter)))();
  var ObjectFlagPropertyOfPictureStreamCompleterL = () => (ObjectFlagPropertyOfPictureStreamCompleterL = dart.constFn(diagnostics.ObjectFlagProperty$(PictureStreamCompleterL())))();
  var ListOf_PictureListenerPairL = () => (ListOf_PictureListenerPairL = dart.constFn(core.List$(_PictureListenerPairL())))();
  var ListLOf_PictureListenerPairL = () => (ListLOf_PictureListenerPairL = dart.constFn(dart.legacy(ListOf_PictureListenerPairL())))();
  var ObjectFlagPropertyOfListLOf_PictureListenerPairL = () => (ObjectFlagPropertyOfListLOf_PictureListenerPairL = dart.constFn(diagnostics.ObjectFlagProperty$(ListLOf_PictureListenerPairL())))();
  var StackTraceL = () => (StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))();
  var DiagnosticsPropertyOfPictureInfoL = () => (DiagnosticsPropertyOfPictureInfoL = dart.constFn(diagnostics.DiagnosticsProperty$(PictureInfoL())))();
  var dynamicAndStackTraceLToNull = () => (dynamicAndStackTraceLToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, StackTraceL()])))();
  const CT = Object.create(null);
  var L1 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-0.19.1/lib/src/picture_stream.dart";
  var L0 = "package:flutter_svg/src/picture_stream.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 1 / 0,
        [OffsetBase__dx]: 1 / 0
      });
    }
  }, false);
  var listener$ = dart.privateName(picture_stream, "_PictureListenerPair.listener");
  var errorListener$ = dart.privateName(picture_stream, "_PictureListenerPair.errorListener");
  picture_stream._PictureListenerPair = class _PictureListenerPair extends core.Object {
    get listener() {
      return this[listener$];
    }
    set listener(value) {
      super.listener = value;
    }
    get errorListener() {
      return this[errorListener$];
    }
    set errorListener(value) {
      super.errorListener = value;
    }
  };
  (picture_stream._PictureListenerPair.new = function(listener, errorListener) {
    this[listener$] = listener;
    this[errorListener$] = errorListener;
    ;
  }).prototype = picture_stream._PictureListenerPair.prototype;
  dart.addTypeTests(picture_stream._PictureListenerPair);
  dart.addTypeCaches(picture_stream._PictureListenerPair);
  dart.setLibraryUri(picture_stream._PictureListenerPair, L0);
  dart.setFieldSignature(picture_stream._PictureListenerPair, () => ({
    __proto__: dart.getFields(picture_stream._PictureListenerPair.__proto__),
    listener: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(picture_stream.PictureInfo), dart.legacy(core.bool)]))),
    errorListener: dart.finalFieldType(dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)])))
  }));
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var C0;
  var picture$ = dart.privateName(picture_stream, "PictureInfo.picture");
  var viewport$ = dart.privateName(picture_stream, "PictureInfo.viewport");
  var size$ = dart.privateName(picture_stream, "PictureInfo.size");
  picture_stream.PictureInfo = class PictureInfo extends core.Object {
    get picture() {
      return this[picture$];
    }
    set picture(value) {
      super.picture = value;
    }
    get viewport() {
      return this[viewport$];
    }
    set viewport(value) {
      super.viewport = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get hashCode() {
      return ui.hashValues(this.picture, this.viewport, this.size);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this.runtimeType)) {
        return false;
      }
      return PictureInfoL().is(other) && dart.equals(other.picture, this.picture) && dart.equals(other.viewport, this.viewport) && dart.equals(other.size, this.size);
    }
  };
  (picture_stream.PictureInfo.new = function(opts) {
    let picture = opts && 'picture' in opts ? opts.picture : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    let size = opts && 'size' in opts ? opts.size : C0 || CT.C0;
    this[picture$] = picture;
    this[viewport$] = viewport;
    this[size$] = size;
    if (!(picture != null)) dart.assertFailed(null, L1, 29, 16, "picture != null");
    if (!(viewport != null)) dart.assertFailed(null, L1, 30, 16, "viewport != null");
    if (!(size != null)) dart.assertFailed(null, L1, 31, 16, "size != null");
    ;
  }).prototype = picture_stream.PictureInfo.prototype;
  dart.addTypeTests(picture_stream.PictureInfo);
  dart.addTypeCaches(picture_stream.PictureInfo);
  dart.setMethodSignature(picture_stream.PictureInfo, () => ({
    __proto__: dart.getMethods(picture_stream.PictureInfo.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(picture_stream.PictureInfo, () => ({
    __proto__: dart.getGetters(picture_stream.PictureInfo.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(picture_stream.PictureInfo, L0);
  dart.setFieldSignature(picture_stream.PictureInfo, () => ({
    __proto__: dart.getFields(picture_stream.PictureInfo.__proto__),
    picture: dart.finalFieldType(dart.legacy(ui.Picture)),
    viewport: dart.finalFieldType(dart.legacy(ui.Rect)),
    size: dart.finalFieldType(dart.legacy(ui.Size))
  }));
  dart.defineExtensionMethods(picture_stream.PictureInfo, ['_equals']);
  dart.defineExtensionAccessors(picture_stream.PictureInfo, ['hashCode']);
  var _completer = dart.privateName(picture_stream, "_completer");
  var _listeners = dart.privateName(picture_stream, "_listeners");
  const Object_Diagnosticable$36 = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36.new = function() {
  }).prototype = Object_Diagnosticable$36.prototype;
  dart.applyMixin(Object_Diagnosticable$36, diagnostics.Diagnosticable);
  picture_stream.PictureStream = class PictureStream extends Object_Diagnosticable$36 {
    get completer() {
      return this[_completer];
    }
    setCompleter(value) {
      if (!(this[_completer] == null)) dart.assertFailed(null, L1, 111, 12, "_completer == null");
      this[_completer] = value;
      if (this[_listeners] != null) {
        let initialListeners = this[_listeners];
        this[_listeners] = null;
        for (let pair of initialListeners) {
          this[_completer].addListener(pair.listener, {onError: pair.errorListener});
        }
      }
    }
    addListener(listener, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      if (this[_completer] != null) {
        return this[_completer].addListener(listener, {onError: onError});
      }
      this[_listeners] == null ? this[_listeners] = JSArrayOf_PictureListenerPairL().of([]) : null;
      this[_listeners][$add](new picture_stream._PictureListenerPair.new(listener, onError));
    }
    removeListener(listener) {
      if (this[_completer] != null) {
        return this[_completer].removeListener(listener);
      }
      if (!(this[_listeners] != null)) dart.assertFailed(null, L1, 146, 12, "_listeners != null");
      this[_listeners][$removeWhere](dart.fn(pair => dart.equals(pair.listener, listener), _PictureListenerPairLToboolL()));
    }
    get key() {
      return this[_completer] != null ? this[_completer] : this;
    }
    debugFillProperties(properties) {
      let t0, t0$, t0$0, t0$1;
      super.debugFillProperties(properties);
      properties.add(new (ObjectFlagPropertyOfPictureStreamCompleterL()).new("completer", this[_completer], {ifPresent: (t0 = this[_completer], t0 == null ? null : t0.toStringShort()), ifNull: "unresolved"}));
      properties.add(new (ObjectFlagPropertyOfListLOf_PictureListenerPairL()).new("listeners", this[_listeners], {ifPresent: dart.str((t0$ = this[_listeners], t0$ == null ? null : t0$[$length])) + " listener" + ((t0$0 = this[_listeners], t0$0 == null ? null : t0$0[$length]) === 1 ? "" : "s"), ifNull: "no listeners", level: this[_completer] != null ? diagnostics.DiagnosticLevel.hidden : diagnostics.DiagnosticLevel.info}));
      t0$1 = this[_completer];
      t0$1 == null ? null : t0$1.debugFillProperties(properties);
    }
  };
  (picture_stream.PictureStream.new = function() {
    this[_completer] = null;
    this[_listeners] = null;
    ;
  }).prototype = picture_stream.PictureStream.prototype;
  dart.addTypeTests(picture_stream.PictureStream);
  dart.addTypeCaches(picture_stream.PictureStream);
  dart.setMethodSignature(picture_stream.PictureStream, () => ({
    __proto__: dart.getMethods(picture_stream.PictureStream.__proto__),
    setCompleter: dart.fnType(dart.void, [dart.legacy(picture_stream.PictureStreamCompleter)]),
    addListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(picture_stream.PictureInfo), dart.legacy(core.bool)]))], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    removeListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(picture_stream.PictureInfo), dart.legacy(core.bool)]))]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setGetterSignature(picture_stream.PictureStream, () => ({
    __proto__: dart.getGetters(picture_stream.PictureStream.__proto__),
    completer: dart.legacy(picture_stream.PictureStreamCompleter),
    key: dart.legacy(core.Object)
  }));
  dart.setLibraryUri(picture_stream.PictureStream, L0);
  dart.setFieldSignature(picture_stream.PictureStream, () => ({
    __proto__: dart.getFields(picture_stream.PictureStream.__proto__),
    [_completer]: dart.fieldType(dart.legacy(picture_stream.PictureStreamCompleter)),
    [_listeners]: dart.fieldType(dart.legacy(core.List$(dart.legacy(picture_stream._PictureListenerPair))))
  }));
  var _current = dart.privateName(picture_stream, "_current");
  var _handleImageError = dart.privateName(picture_stream, "_handleImageError");
  const Object_Diagnosticable$36$ = class Object_Diagnosticable extends core.Object {};
  (Object_Diagnosticable$36$.new = function() {
  }).prototype = Object_Diagnosticable$36$.prototype;
  dart.applyMixin(Object_Diagnosticable$36$, diagnostics.Diagnosticable);
  picture_stream.PictureStreamCompleter = class PictureStreamCompleter extends Object_Diagnosticable$36$ {
    addListener(listener, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      this[_listeners][$add](new picture_stream._PictureListenerPair.new(listener, onError));
      if (this[_current] != null) {
        try {
          listener(this[_current], true);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          this[_handleImageError](new assertions.ErrorDescription.new("by a synchronously-called image listener"), exception, stack);
        }
      }
    }
    removeListener(listener) {
      this[_listeners][$removeWhere](dart.fn(pair => dart.equals(pair.listener, listener), _PictureListenerPairLToboolL()));
    }
    setPicture(picture) {
      let t3, t2, t1, t4, t3$, t2$;
      this[_current] = picture;
      if (dart.test(this[_listeners][$isEmpty])) {
        return;
      }
      let localListeners = ListOf_PictureListenerPairL().from(this[_listeners]);
      for (let listenerPair of localListeners) {
        try {
          t1 = listenerPair;
          t2 = picture;
          t3 = false;
          t1.listener(t2, t3);
        } catch (e) {
          let exception = dart.getThrown(e);
          let stack = dart.stackTrace(e);
          if (listenerPair.errorListener != null) {
            t2$ = listenerPair;
            t3$ = exception;
            t4 = stack;
            t2$.errorListener(t3$, t4);
          } else {
            this[_handleImageError](new assertions.ErrorDescription.new("by a picture listener"), exception, stack);
          }
        }
      }
    }
    [_handleImageError](context, exception, stack) {
      assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: exception, stack: StackTraceL().as(stack), library: "SVG", context: context}));
    }
    debugFillProperties(description) {
      let t2, t2$;
      super.debugFillProperties(description);
      description.add(new (DiagnosticsPropertyOfPictureInfoL()).new("current", this[_current], {ifNull: "unresolved", showName: false}));
      description.add(new (ObjectFlagPropertyOfListLOf_PictureListenerPairL()).new("listeners", this[_listeners], {ifPresent: dart.str((t2 = this[_listeners], t2 == null ? null : t2[$length])) + " listener" + ((t2$ = this[_listeners], t2$ == null ? null : t2$[$length]) === 1 ? "" : "s")}));
    }
  };
  (picture_stream.PictureStreamCompleter.new = function() {
    this[_listeners] = JSArrayOf_PictureListenerPairL().of([]);
    this[_current] = null;
    ;
  }).prototype = picture_stream.PictureStreamCompleter.prototype;
  dart.addTypeTests(picture_stream.PictureStreamCompleter);
  dart.addTypeCaches(picture_stream.PictureStreamCompleter);
  dart.setMethodSignature(picture_stream.PictureStreamCompleter, () => ({
    __proto__: dart.getMethods(picture_stream.PictureStreamCompleter.__proto__),
    addListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(picture_stream.PictureInfo), dart.legacy(core.bool)]))], {onError: dart.legacy(dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]))}, {}),
    removeListener: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(picture_stream.PictureInfo), dart.legacy(core.bool)]))]),
    setPicture: dart.fnType(dart.void, [dart.legacy(picture_stream.PictureInfo)]),
    [_handleImageError]: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticsNode), dart.dynamic, dart.dynamic]),
    debugFillProperties: dart.fnType(dart.void, [dart.legacy(diagnostics.DiagnosticPropertiesBuilder)])
  }));
  dart.setLibraryUri(picture_stream.PictureStreamCompleter, L0);
  dart.setFieldSignature(picture_stream.PictureStreamCompleter, () => ({
    __proto__: dart.getFields(picture_stream.PictureStreamCompleter.__proto__),
    [_listeners]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(picture_stream._PictureListenerPair)))),
    [_current]: dart.fieldType(dart.legacy(picture_stream.PictureInfo))
  }));
  picture_stream.OneFramePictureStreamCompleter = class OneFramePictureStreamCompleter extends picture_stream.PictureStreamCompleter {};
  (picture_stream.OneFramePictureStreamCompleter.new = function(picture, opts) {
    let informationCollector = opts && 'informationCollector' in opts ? opts.informationCollector : null;
    if (!(picture != null)) dart.assertFailed(null, L1, 297, 16, "picture != null");
    picture_stream.OneFramePictureStreamCompleter.__proto__.new.call(this);
    picture.then(dart.void, dart.bind(this, 'setPicture'), {onError: dart.fn((error, stack) => {
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: error, stack: stack, library: "SVG", context: new assertions.ErrorDescription.new("resolving a single-frame picture stream"), informationCollector: informationCollector, silent: true}));
      }, dynamicAndStackTraceLToNull())});
  }).prototype = picture_stream.OneFramePictureStreamCompleter.prototype;
  dart.addTypeTests(picture_stream.OneFramePictureStreamCompleter);
  dart.addTypeCaches(picture_stream.OneFramePictureStreamCompleter);
  dart.setLibraryUri(picture_stream.OneFramePictureStreamCompleter, L0);
  dart.trackLibraries("packages/flutter_svg/src/picture_stream.dart", {
    "package:flutter_svg/src/picture_stream.dart": picture_stream
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["picture_stream.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/flutter_svg/src/picture_stream.dart.lib.js"}');
  // Exports:
  return {
    src__picture_stream: picture_stream
  };
}));

//# sourceMappingURL=picture_stream.dart.lib.js.map
