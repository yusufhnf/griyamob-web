define(['dart_sdk', 'packages/petitparser/src/parser/character/predicate.dart', 'packages/petitparser/src/parser/character/code.dart'], (function load__packages__petitparser__src__parser__combinator__optional_dart(dart_sdk, packages__petitparser__src__parser__character__predicate$46dart, packages__petitparser__src__parser__character__code$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const predicate = packages__petitparser__src__parser__character__predicate$46dart.src__parser__character__predicate;
  const code = packages__petitparser__src__parser__character__code$46dart.src__parser__character__code;
  var optional = Object.create(dart.library);
  var parser = Object.create(dart.library);
  var char$ = Object.create(dart.library);
  var token$ = Object.create(dart.library);
  var sequence = Object.create(dart.library);
  var and = Object.create(dart.library);
  var matches = Object.create(dart.library);
  var repeating = Object.create(dart.library);
  var possessive = Object.create(dart.library);
  var any = Object.create(dart.library);
  var list = Object.create(dart.library);
  var choice = Object.create(dart.library);
  var delegate = Object.create(dart.library);
  var map = Object.create(dart.library);
  var success = Object.create(dart.library);
  var result = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var failure = Object.create(dart.library);
  var parser$ = Object.create(dart.library);
  var matches_skipping = Object.create(dart.library);
  var token$0 = Object.create(dart.library);
  var context = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $codeUnitAt = dartx.codeUnitAt;
  var $toString = dartx.toString;
  var $substring = dartx.substring;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var ParserL = () => (ParserL = dart.constFn(dart.legacy(parser$.Parser)))();
  var JSArrayOfParserL = () => (JSArrayOfParserL = dart.constFn(_interceptors.JSArray$(ParserL())))();
  var LinkedHashSetOfParserL = () => (LinkedHashSetOfParserL = dart.constFn(collection.LinkedHashSet$(ParserL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var CharacterParserL = () => (CharacterParserL = dart.constFn(dart.legacy(parser.CharacterParser)))();
  var SingleCharPredicateL = () => (SingleCharPredicateL = dart.constFn(dart.legacy(char$.SingleCharPredicate)))();
  var TokenL = () => (TokenL = dart.constFn(dart.legacy(token$0.Token)))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var ListOfParserL = () => (ListOfParserL = dart.constFn(core.List$(ParserL())))();
  var SequenceParserL = () => (SequenceParserL = dart.constFn(dart.legacy(sequence.SequenceParser)))();
  var ParserOfListL = () => (ParserOfListL = dart.constFn(parser$.Parser$(ListL())))();
  var ParserLOfListL = () => (ParserLOfListL = dart.constFn(dart.legacy(ParserOfListL())))();
  var ParserLToParserLOfListL = () => (ParserLToParserLOfListL = dart.constFn(dart.fnType(ParserLOfListL(), [ParserL()])))();
  var VoidToParserLOfListL = () => (VoidToParserLOfListL = dart.constFn(dart.fnType(ParserLOfListL(), [])))();
  var AnyParserL = () => (AnyParserL = dart.constFn(dart.legacy(any.AnyParser)))();
  var ChoiceParserL = () => (ChoiceParserL = dart.constFn(dart.legacy(choice.ChoiceParser)))();
  var ParserLToParserL = () => (ParserLToParserL = dart.constFn(dart.fnType(ParserL(), [ParserL()])))();
  var VoidToParserL = () => (VoidToParserL = dart.constFn(dart.fnType(ParserL(), [])))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  const CT = Object.create(null);
  var L13 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/petitparser-3.1.0/lib/src/parser/repeater/repeating.dart";
  var L25 = "package:petitparser/src/context/failure.dart";
  var L7 = "package:petitparser/src/parser/character/char.dart";
  var L1 = "package:petitparser/src/core/parser.dart";
  var L4 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/petitparser-3.1.0/lib/src/parser/character/parser.dart";
  var L6 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/petitparser-3.1.0/lib/src/parser/character/char.dart";
  var L5 = "package:petitparser/src/parser/character/parser.dart";
  var L24 = "package:petitparser/src/core/exception.dart";
  var L8 = "package:petitparser/src/core/token.dart";
  var L18 = "package:petitparser/src/parser/combinator/choice.dart";
  var L17 = "package:petitparser/src/parser/predicate/any.dart";
  var L0 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/petitparser-3.1.0/lib/src/parser/combinator/delegate.dart";
  var L15 = "package:petitparser/src/parser/repeater/possessive.dart";
  var L14 = "package:petitparser/src/parser/repeater/repeating.dart";
  var L23 = "package:petitparser/src/context/success.dart";
  var L22 = "package:petitparser/src/context/result.dart";
  var L9 = "package:petitparser/src/parser/action/token.dart";
  var L10 = "package:petitparser/src/parser/combinator/list.dart";
  var L12 = "package:petitparser/src/parser/combinator/and.dart";
  var L3 = "package:petitparser/src/parser/combinator/optional.dart";
  var L2 = "package:petitparser/src/parser/combinator/delegate.dart";
  var L16 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/petitparser-3.1.0/lib/src/parser/predicate/any.dart";
  var L20 = "package:petitparser/src/parser/action/map.dart";
  var L11 = "package:petitparser/src/parser/combinator/sequence.dart";
  var L19 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/petitparser-3.1.0/lib/src/parser/action/map.dart";
  var L21 = "package:petitparser/src/context/context.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList([], ParserL());
    }
  }, false);
  var C0;
  const _is_Parser_default = Symbol('_is_Parser_default');
  parser$.Parser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ParserOfTL = () => (ParserOfTL = dart.constFn(parser$.Parser$(TL())))();
    var ParserLOfTL = () => (ParserLOfTL = dart.constFn(dart.legacy(ParserOfTL())))();
    class Parser extends core.Object {
      fastParseOn(buffer, position) {
        let result = this.parseOn(new context.Context.new(buffer, position));
        return dart.test(result.isSuccess) ? result.position : -1;
      }
      parse(input) {
        return this.parseOn(new context.Context.new(input, 0));
      }
      isEqualTo(other, seen = null) {
        seen == null ? seen = LinkedHashSetOfParserL().new() : null;
        if (this._equals(other) || dart.test(seen.contains(this))) {
          return true;
        }
        seen.add(this);
        return dart.equals(this.runtimeType, dart.runtimeType(other)) && dart.test(this.hasEqualProperties(ParserLOfTL().as(other))) && dart.test(this.hasEqualChildren(ParserLOfTL().as(other), seen));
      }
      hasEqualProperties(other) {
        ParserLOfTL().as(other);
        return true;
      }
      hasEqualChildren(other, seen) {
        ParserLOfTL().as(other);
        let thisChildren = this.children;
        let otherChildren = other.children;
        if (thisChildren[$length] != otherChildren[$length]) {
          return false;
        }
        for (let i = 0; i < dart.notNull(thisChildren[$length]); i = i + 1) {
          if (!dart.test(thisChildren[$_get](i).isEqualTo(otherChildren[$_get](i), seen))) {
            return false;
          }
        }
        return true;
      }
      get children() {
        return C0 || CT.C0;
      }
      replace(source, target) {
      }
    }
    (Parser.new = function() {
      ;
    }).prototype = Parser.prototype;
    dart.addTypeTests(Parser);
    Parser.prototype[_is_Parser_default] = true;
    dart.addTypeCaches(Parser);
    dart.setMethodSignature(Parser, () => ({
      __proto__: dart.getMethods(Parser.__proto__),
      fastParseOn: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String), dart.legacy(core.int)]),
      parse: dart.fnType(dart.legacy(result.Result$(dart.legacy(T))), [dart.legacy(core.String)]),
      isEqualTo: dart.fnType(dart.legacy(core.bool), [dart.legacy(parser$.Parser)], [dart.legacy(core.Set$(dart.legacy(parser$.Parser)))]),
      hasEqualProperties: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      hasEqualChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Set$(dart.legacy(parser$.Parser)))]),
      replace: dart.fnType(dart.void, [dart.legacy(parser$.Parser), dart.legacy(parser$.Parser)])
    }));
    dart.setGetterSignature(Parser, () => ({
      __proto__: dart.getGetters(Parser.__proto__),
      children: dart.legacy(core.List$(dart.legacy(parser$.Parser)))
    }));
    dart.setLibraryUri(Parser, L1);
    return Parser;
  });
  parser$.Parser = parser$.Parser$();
  dart.addTypeTests(parser$.Parser, _is_Parser_default);
  const _is_DelegateParser_default = Symbol('_is_DelegateParser_default');
  var delegate$ = dart.privateName(delegate, "DelegateParser.delegate");
  delegate.DelegateParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ResultOfTL = () => (ResultOfTL = dart.constFn(result.Result$(TL())))();
    var ResultLOfTL = () => (ResultLOfTL = dart.constFn(dart.legacy(ResultOfTL())))();
    var DelegateParserOfTL = () => (DelegateParserOfTL = dart.constFn(delegate.DelegateParser$(TL())))();
    class DelegateParser extends parser$.Parser$(dart.legacy(T)) {
      get delegate() {
        return this[delegate$];
      }
      set delegate(value) {
        this[delegate$] = value;
      }
      parseOn(context) {
        return ResultLOfTL().as(this.delegate.parseOn(context));
      }
      get children() {
        return JSArrayOfParserL().of([this.delegate]);
      }
      replace(source, target) {
        super.replace(source, target);
        if (dart.equals(this.delegate, source)) {
          this.delegate = target;
        }
      }
      copy() {
        return new (DelegateParserOfTL()).new(this.delegate);
      }
    }
    (DelegateParser.new = function(delegate) {
      this[delegate$] = delegate;
      if (!(delegate != null)) dart.assertFailed("delegate must not be null", L0, 22, 16, "delegate != null");
      DelegateParser.__proto__.new.call(this);
      ;
    }).prototype = DelegateParser.prototype;
    dart.addTypeTests(DelegateParser);
    DelegateParser.prototype[_is_DelegateParser_default] = true;
    dart.addTypeCaches(DelegateParser);
    dart.setMethodSignature(DelegateParser, () => ({
      __proto__: dart.getMethods(DelegateParser.__proto__),
      parseOn: dart.fnType(dart.legacy(result.Result$(dart.legacy(T))), [dart.legacy(context.Context)]),
      copy: dart.fnType(dart.legacy(delegate.DelegateParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(DelegateParser, L2);
    dart.setFieldSignature(DelegateParser, () => ({
      __proto__: dart.getFields(DelegateParser.__proto__),
      delegate: dart.fieldType(dart.legacy(parser$.Parser))
    }));
    return DelegateParser;
  });
  delegate.DelegateParser = delegate.DelegateParser$();
  dart.addTypeTests(delegate.DelegateParser, _is_DelegateParser_default);
  const _is_OptionalParser_default = Symbol('_is_OptionalParser_default');
  var otherwise$ = dart.privateName(optional, "OptionalParser.otherwise");
  optional.OptionalParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ResultOfTL = () => (ResultOfTL = dart.constFn(result.Result$(TL())))();
    var ResultLOfTL = () => (ResultLOfTL = dart.constFn(dart.legacy(ResultOfTL())))();
    var OptionalParserOfTL = () => (OptionalParserOfTL = dart.constFn(optional.OptionalParser$(TL())))();
    var ParserOfTL = () => (ParserOfTL = dart.constFn(parser$.Parser$(TL())))();
    var ParserLOfTL = () => (ParserLOfTL = dart.constFn(dart.legacy(ParserOfTL())))();
    var OptionalParserLOfTL = () => (OptionalParserLOfTL = dart.constFn(dart.legacy(OptionalParserOfTL())))();
    class OptionalParser extends delegate.DelegateParser$(dart.legacy(T)) {
      get otherwise() {
        return this[otherwise$];
      }
      set otherwise(value) {
        super.otherwise = value;
      }
      parseOn(context) {
        let result = this.delegate.parseOn(context);
        if (dart.test(result.isSuccess)) {
          return ResultLOfTL().as(result);
        } else {
          return context.success(TL(), this.otherwise);
        }
      }
      fastParseOn(buffer, position) {
        let result = this.delegate.fastParseOn(buffer, position);
        return dart.notNull(result) < 0 ? position : result;
      }
      copy() {
        return new (OptionalParserOfTL()).new(ParserLOfTL().as(this.delegate), this.otherwise);
      }
      hasEqualProperties(other) {
        OptionalParserLOfTL().as(other);
        return dart.test(super.hasEqualProperties(other)) && dart.equals(this.otherwise, other.otherwise);
      }
    }
    (OptionalParser.new = function(delegate, otherwise) {
      this[otherwise$] = otherwise;
      OptionalParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = OptionalParser.prototype;
    dart.addTypeTests(OptionalParser);
    OptionalParser.prototype[_is_OptionalParser_default] = true;
    dart.addTypeCaches(OptionalParser);
    dart.setMethodSignature(OptionalParser, () => ({
      __proto__: dart.getMethods(OptionalParser.__proto__),
      copy: dart.fnType(dart.legacy(optional.OptionalParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(OptionalParser, L3);
    dart.setFieldSignature(OptionalParser, () => ({
      __proto__: dart.getFields(OptionalParser.__proto__),
      otherwise: dart.finalFieldType(dart.legacy(T))
    }));
    return OptionalParser;
  });
  optional.OptionalParser = optional.OptionalParser$();
  dart.addTypeTests(optional.OptionalParser, _is_OptionalParser_default);
  optional['OptionalParserExtension|optional'] = function OptionalParserExtension$124optional(T, $this, otherwise = null) {
    return new (optional.OptionalParser$(dart.legacy(T))).new($this, otherwise);
  };
  optional['OptionalParserExtension|get#optional'] = function OptionalParserExtension$124get$35optional(T, $this) {
    return dart.fn((otherwise = null) => optional['OptionalParserExtension|optional'](dart.legacy(T), $this, otherwise), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(T))), [], [dart.legacy(T)]));
  };
  var predicate$ = dart.privateName(parser, "CharacterParser.predicate");
  var message$ = dart.privateName(parser, "CharacterParser.message");
  parser.CharacterParser = class CharacterParser extends parser$.Parser$(dart.legacy(core.String)) {
    get predicate() {
      return this[predicate$];
    }
    set predicate(value) {
      super.predicate = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    parseOn(context) {
      let buffer = context.buffer;
      let position = context.position;
      if (dart.notNull(position) < buffer.length && dart.test(this.predicate.test(buffer[$codeUnitAt](position)))) {
        return context.success(StringL(), buffer[$_get](position), dart.notNull(position) + 1);
      }
      return context.failure(StringL(), this.message);
    }
    fastParseOn(buffer, position) {
      return dart.notNull(position) < buffer.length && dart.test(this.predicate.test(buffer[$codeUnitAt](position))) ? dart.notNull(position) + 1 : -1;
    }
    toString() {
      return dart.str(super[$toString]()) + "[" + dart.str(this.message) + "]";
    }
    copy() {
      return new parser.CharacterParser.new(this.predicate, this.message);
    }
    hasEqualProperties(other) {
      CharacterParserL().as(other);
      return dart.test(super.hasEqualProperties(other)) && dart.test(this.predicate.isEqualTo(other.predicate)) && this.message == other.message;
    }
  };
  (parser.CharacterParser.new = function(predicate, message) {
    this[predicate$] = predicate;
    this[message$] = message;
    if (!(predicate != null)) dart.assertFailed("predicate must not be null", L4, 15, 16, "predicate != null");
    if (!(message != null)) dart.assertFailed("message must not be null", L4, 16, 16, "message != null");
    parser.CharacterParser.__proto__.new.call(this);
    ;
  }).prototype = parser.CharacterParser.prototype;
  dart.addTypeTests(parser.CharacterParser);
  dart.addTypeCaches(parser.CharacterParser);
  dart.setMethodSignature(parser.CharacterParser, () => ({
    __proto__: dart.getMethods(parser.CharacterParser.__proto__),
    parseOn: dart.fnType(dart.legacy(result.Result$(dart.legacy(core.String))), [dart.legacy(context.Context)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    copy: dart.fnType(dart.legacy(parser.CharacterParser), [])
  }));
  dart.setLibraryUri(parser.CharacterParser, L5);
  dart.setFieldSignature(parser.CharacterParser, () => ({
    __proto__: dart.getFields(parser.CharacterParser.__proto__),
    predicate: dart.finalFieldType(dart.legacy(predicate.CharacterPredicate)),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(parser.CharacterParser, ['toString']);
  var value$ = dart.privateName(char$, "SingleCharPredicate.value");
  char$.SingleCharPredicate = class SingleCharPredicate extends predicate.CharacterPredicate {
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    test(value) {
      return this.value == value;
    }
    isEqualTo(other) {
      return SingleCharPredicateL().is(other) && other.value == this.value;
    }
  };
  (char$.SingleCharPredicate.new = function(value) {
    this[value$] = value;
    if (!(value != null)) dart.assertFailed("value must not be null", L6, 18, 16, "value != null");
    char$.SingleCharPredicate.__proto__.new.call(this);
    ;
  }).prototype = char$.SingleCharPredicate.prototype;
  dart.addTypeTests(char$.SingleCharPredicate);
  dart.addTypeCaches(char$.SingleCharPredicate);
  dart.setMethodSignature(char$.SingleCharPredicate, () => ({
    __proto__: dart.getMethods(char$.SingleCharPredicate.__proto__),
    test: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.int)]),
    isEqualTo: dart.fnType(dart.legacy(core.bool), [dart.legacy(predicate.CharacterPredicate)])
  }));
  dart.setLibraryUri(char$.SingleCharPredicate, L7);
  dart.setFieldSignature(char$.SingleCharPredicate, () => ({
    __proto__: dart.getFields(char$.SingleCharPredicate.__proto__),
    value: dart.finalFieldType(dart.legacy(core.int))
  }));
  char$.char = function char(char, message = null) {
    let t2;
    return new parser.CharacterParser.new(new char$.SingleCharPredicate.new(code.toCharCode(char)), (t2 = message, t2 == null ? "\"" + dart.str(code.toReadableString(char)) + "\" expected" : t2));
  };
  const _is_Token_default = Symbol('_is_Token_default');
  var value$0 = dart.privateName(token$0, "Token.value");
  var buffer$ = dart.privateName(token$0, "Token.buffer");
  var start$ = dart.privateName(token$0, "Token.start");
  var stop$ = dart.privateName(token$0, "Token.stop");
  token$0.Token$ = dart.generic(T => {
    class Token extends core.Object {
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      get buffer() {
        return this[buffer$];
      }
      set buffer(value) {
        super.buffer = value;
      }
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get stop() {
        return this[stop$];
      }
      set stop(value) {
        super.stop = value;
      }
      get input() {
        return this.buffer[$substring](this.start, this.stop);
      }
      get length() {
        return dart.notNull(this.stop) - dart.notNull(this.start);
      }
      get line() {
        return token$0.Token.lineAndColumnOf(this.buffer, this.start)[$_get](0);
      }
      get column() {
        return token$0.Token.lineAndColumnOf(this.buffer, this.start)[$_get](1);
      }
      toString() {
        return "Token[" + dart.str(token$0.Token.positionString(this.buffer, this.start)) + "]: " + dart.str(this.value);
      }
      _equals(other) {
        if (other == null) return false;
        return TokenL().is(other) && dart.equals(this.value, other.value) && this.start == other.start && this.stop == other.stop;
      }
      get hashCode() {
        return dart.notNull(dart.hashCode(this.value)) + dart.hashCode(this.start) + dart.hashCode(this.stop);
      }
      static newlineParser() {
        return token$0.Token._newlineParser;
      }
      static lineAndColumnOf(buffer, position) {
        let line = 1;
        let offset = 0;
        let iter = matches_skipping['MatchesSkippingParser|matchesSkipping'](TokenL(), token$['TokenParserExtension|token'](dart.dynamic, token$0.Token.newlineParser()), buffer);
        for (let token of iter) {
          if (dart.notNull(position) < dart.notNull(token.stop)) {
            return JSArrayOfintL().of([line, dart.notNull(position) - dart.notNull(offset) + 1]);
          }
          line = line + 1;
          offset = token.stop;
        }
        return JSArrayOfintL().of([line, dart.notNull(position) - dart.notNull(offset) + 1]);
      }
      static positionString(buffer, position) {
        let lineAndColumn = token$0.Token.lineAndColumnOf(buffer, position);
        return dart.str(lineAndColumn[$_get](0)) + ":" + dart.str(lineAndColumn[$_get](1));
      }
    }
    (Token.new = function(value, buffer, start, stop) {
      this[value$0] = value;
      this[buffer$] = buffer;
      this[start$] = start;
      this[stop$] = stop;
      ;
    }).prototype = Token.prototype;
    dart.addTypeTests(Token);
    Token.prototype[_is_Token_default] = true;
    dart.addTypeCaches(Token);
    dart.setMethodSignature(Token, () => ({
      __proto__: dart.getMethods(Token.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(Token, () => ({
      __proto__: dart.getGetters(Token.__proto__),
      input: dart.legacy(core.String),
      length: dart.legacy(core.int),
      line: dart.legacy(core.int),
      column: dart.legacy(core.int),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(Token, L8);
    dart.setFieldSignature(Token, () => ({
      __proto__: dart.getFields(Token.__proto__),
      value: dart.finalFieldType(dart.legacy(T)),
      buffer: dart.finalFieldType(dart.legacy(core.String)),
      start: dart.finalFieldType(dart.legacy(core.int)),
      stop: dart.finalFieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(Token, ['toString', '_equals']);
    dart.defineExtensionAccessors(Token, ['hashCode']);
    return Token;
  });
  token$0.Token = token$0.Token$();
  dart.defineLazy(token$0.Token, {
    /*token$0.Token._newlineParser*/get _newlineParser() {
      return choice['ChoiceParserExtension||'](StringL(), char$.char("\n"), sequence['SequenceParserExtension|&'](StringL(), char$.char("\r"), optional['OptionalParserExtension|optional'](StringL(), char$.char("\n"))));
    }
  }, true);
  dart.addTypeTests(token$0.Token, _is_Token_default);
  const _is_TokenParser_default = Symbol('_is_TokenParser_default');
  token$.TokenParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var TokenOfTL = () => (TokenOfTL = dart.constFn(token$0.Token$(TL())))();
    var TokenLOfTL = () => (TokenLOfTL = dart.constFn(dart.legacy(TokenOfTL())))();
    var TokenParserOfTL = () => (TokenParserOfTL = dart.constFn(token$.TokenParser$(TL())))();
    class TokenParser extends delegate.DelegateParser$(dart.legacy(token$0.Token$(dart.legacy(T)))) {
      parseOn(context) {
        let result = this.delegate.parseOn(context);
        if (dart.test(result.isSuccess)) {
          let token = new (TokenOfTL()).new(TL().as(result.value), context.buffer, context.position, result.position);
          return result.success(TokenLOfTL(), token);
        } else {
          return result.failure(TokenLOfTL(), result.message);
        }
      }
      fastParseOn(buffer, position) {
        return this.delegate.fastParseOn(buffer, position);
      }
      copy() {
        return new (TokenParserOfTL()).new(this.delegate);
      }
    }
    (TokenParser.new = function(delegate) {
      TokenParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = TokenParser.prototype;
    dart.addTypeTests(TokenParser);
    TokenParser.prototype[_is_TokenParser_default] = true;
    dart.addTypeCaches(TokenParser);
    dart.setMethodSignature(TokenParser, () => ({
      __proto__: dart.getMethods(TokenParser.__proto__),
      copy: dart.fnType(dart.legacy(token$.TokenParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(TokenParser, L9);
    return TokenParser;
  });
  token$.TokenParser = token$.TokenParser$();
  dart.addTypeTests(token$.TokenParser, _is_TokenParser_default);
  token$['TokenParserExtension|token'] = function TokenParserExtension$124token(T, $this) {
    return new (token$.TokenParser$(dart.legacy(T))).new($this);
  };
  token$['TokenParserExtension|get#token'] = function TokenParserExtension$124get$35token(T, $this) {
    return dart.fn(() => token$['TokenParserExtension|token'](dart.legacy(T), $this), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(token$0.Token$(dart.legacy(T))))), []));
  };
  const _is_ListParser_default = Symbol('_is_ListParser_default');
  var children$ = dart.privateName(list, "ListParser.children");
  list.ListParser$ = dart.generic(T => {
    class ListParser extends parser$.Parser$(dart.legacy(T)) {
      get children() {
        return this[children$];
      }
      set children(value) {
        super.children = value;
      }
      replace(source, target) {
        super.replace(source, target);
        for (let i = 0; i < dart.notNull(this.children[$length]); i = i + 1) {
          if (dart.equals(this.children[$_get](i), source)) {
            this.children[$_set](i, target);
          }
        }
      }
    }
    (ListParser.new = function(children) {
      this[children$] = ListOfParserL().of(children, {growable: false});
      ListParser.__proto__.new.call(this);
      ;
    }).prototype = ListParser.prototype;
    dart.addTypeTests(ListParser);
    ListParser.prototype[_is_ListParser_default] = true;
    dart.addTypeCaches(ListParser);
    dart.setLibraryUri(ListParser, L10);
    dart.setFieldSignature(ListParser, () => ({
      __proto__: dart.getFields(ListParser.__proto__),
      children: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(parser$.Parser))))
    }));
    return ListParser;
  });
  list.ListParser = list.ListParser$();
  dart.addTypeTests(list.ListParser, _is_ListParser_default);
  sequence.SequenceParser = class SequenceParser extends list.ListParser$(dart.legacy(core.List)) {
    parseOn(context) {
      let current = context;
      let elements = core.List.new(this.children[$length]);
      for (let i = 0; i < dart.notNull(this.children[$length]); i = i + 1) {
        let result = this.children[$_get](i).parseOn(current);
        if (dart.test(result.isFailure)) {
          return result.failure(ListL(), result.message);
        }
        elements[$_set](i, result.value);
        current = result;
      }
      return current.success(ListL(), elements);
    }
    fastParseOn(buffer, position) {
      for (let i = 0; i < dart.notNull(this.children[$length]); i = i + 1) {
        position = this.children[$_get](i).fastParseOn(buffer, position);
        if (dart.notNull(position) < 0) {
          return position;
        }
      }
      return position;
    }
    copy() {
      return new sequence.SequenceParser.new(this.children);
    }
  };
  (sequence.SequenceParser.new = function(children) {
    sequence.SequenceParser.__proto__.new.call(this, children);
    ;
  }).prototype = sequence.SequenceParser.prototype;
  dart.addTypeTests(sequence.SequenceParser);
  dart.addTypeCaches(sequence.SequenceParser);
  dart.setMethodSignature(sequence.SequenceParser, () => ({
    __proto__: dart.getMethods(sequence.SequenceParser.__proto__),
    parseOn: dart.fnType(dart.legacy(result.Result$(dart.legacy(core.List))), [dart.legacy(context.Context)]),
    copy: dart.fnType(dart.legacy(sequence.SequenceParser), [])
  }));
  dart.setLibraryUri(sequence.SequenceParser, L11);
  sequence['SequenceParserExtension|seq'] = function SequenceParserExtension$124seq(T, $this, other) {
    return SequenceParserL().is($this) ? new sequence.SequenceParser.new((() => {
      let t5 = ListOfParserL().of($this.children);
      t5[$add](other);
      return t5;
    })()) : new sequence.SequenceParser.new(JSArrayOfParserL().of([$this, other]));
  };
  sequence['SequenceParserExtension|get#seq'] = function SequenceParserExtension$124get$35seq(T, $this) {
    return dart.fn(other => sequence['SequenceParserExtension|seq'](dart.legacy(T), $this, other), ParserLToParserLOfListL());
  };
  sequence['SequenceParserExtension|&'] = function SequenceParserExtension$124$38(T, $this, other) {
    return sequence['SequenceParserExtension|seq'](dart.legacy(T), $this, other);
  };
  sequence['SequenceIterableExtension|toSequenceParser'] = function SequenceIterableExtension$124toSequenceParser(T, $this) {
    return new sequence.SequenceParser.new($this);
  };
  sequence['SequenceIterableExtension|get#toSequenceParser'] = function SequenceIterableExtension$124get$35toSequenceParser(T, $this) {
    return dart.fn(() => sequence['SequenceIterableExtension|toSequenceParser'](dart.legacy(T), $this), VoidToParserLOfListL());
  };
  const _is_AndParser_default = Symbol('_is_AndParser_default');
  and.AndParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ResultOfTL = () => (ResultOfTL = dart.constFn(result.Result$(TL())))();
    var ResultLOfTL = () => (ResultLOfTL = dart.constFn(dart.legacy(ResultOfTL())))();
    var AndParserOfTL = () => (AndParserOfTL = dart.constFn(and.AndParser$(TL())))();
    class AndParser extends delegate.DelegateParser$(dart.legacy(T)) {
      parseOn(context) {
        let result = this.delegate.parseOn(context);
        if (dart.test(result.isSuccess)) {
          return context.success(TL(), TL().as(result.value));
        } else {
          return ResultLOfTL().as(result);
        }
      }
      fastParseOn(buffer, position) {
        let result = this.delegate.fastParseOn(buffer, position);
        return dart.notNull(result) < 0 ? -1 : position;
      }
      copy() {
        return new (AndParserOfTL()).new(this.delegate);
      }
    }
    (AndParser.new = function(delegate) {
      AndParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = AndParser.prototype;
    dart.addTypeTests(AndParser);
    AndParser.prototype[_is_AndParser_default] = true;
    dart.addTypeCaches(AndParser);
    dart.setMethodSignature(AndParser, () => ({
      __proto__: dart.getMethods(AndParser.__proto__),
      copy: dart.fnType(dart.legacy(and.AndParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(AndParser, L12);
    return AndParser;
  });
  and.AndParser = and.AndParser$();
  dart.addTypeTests(and.AndParser, _is_AndParser_default);
  and['AndParserExtension|and'] = function AndParserExtension$124and(T, $this) {
    return new (and.AndParser$(dart.legacy(T))).new($this);
  };
  and['AndParserExtension|get#and'] = function AndParserExtension$124get$35and(T, $this) {
    return dart.fn(() => and['AndParserExtension|and'](dart.legacy(T), $this), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(T))), []));
  };
  matches['MatchesParser|matches'] = function MatchesParser$124matches(T, $this, input) {
    let list = _interceptors.JSArray$(dart.legacy(T)).of([]);
    possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](ListL(), sequence['SequenceParserExtension|seq'](dart.void, map['MapParserExtension|map'](dart.legacy(T), dart.void, and['AndParserExtension|and'](dart.legacy(T), $this), dart.bind(list, $add), {hasSideEffects: true}), any.any()), any.any())).fastParseOn(input, 0);
    return list;
  };
  matches['MatchesParser|get#matches'] = function MatchesParser$124get$35matches(T, $this) {
    return dart.fn(input => matches['MatchesParser|matches'](dart.legacy(T), $this, input), dart.fnType(dart.legacy(core.List$(dart.legacy(T))), [StringL()]));
  };
  const _is_RepeatingParser_default = Symbol('_is_RepeatingParser_default');
  var min$ = dart.privateName(repeating, "RepeatingParser.min");
  var max$ = dart.privateName(repeating, "RepeatingParser.max");
  repeating.RepeatingParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var RepeatingParserOfTL = () => (RepeatingParserOfTL = dart.constFn(repeating.RepeatingParser$(TL())))();
    var RepeatingParserLOfTL = () => (RepeatingParserLOfTL = dart.constFn(dart.legacy(RepeatingParserOfTL())))();
    class RepeatingParser extends delegate.DelegateParser$(dart.legacy(core.List$(dart.legacy(T)))) {
      get min() {
        return this[min$];
      }
      set min(value) {
        super.min = value;
      }
      get max() {
        return this[max$];
      }
      set max(value) {
        super.max = value;
      }
      toString() {
        return dart.str(super[$toString]()) + "[" + dart.str(this.min) + ".." + dart.str(this.max === -1 ? "*" : this.max) + "]";
      }
      hasEqualProperties(other) {
        RepeatingParserLOfTL().as(other);
        return dart.test(super.hasEqualProperties(other)) && this.min == other.min && this.max == other.max;
      }
    }
    (RepeatingParser.new = function(parser, min, max) {
      this[min$] = min;
      this[max$] = max;
      if (!(min != null)) dart.assertFailed("min must not be null", L13, 14, 16, "min != null");
      if (!(max != null)) dart.assertFailed("max must not be null", L13, 15, 16, "max != null");
      RepeatingParser.__proto__.new.call(this, parser);
      if (dart.notNull(this.min) < 0) {
        dart.throw(new core.ArgumentError.new("Minimum repetitions must be positive, but got " + dart.str(this.min) + "."));
      }
      if (this.max !== -1 && dart.notNull(this.max) < dart.notNull(this.min)) {
        dart.throw(new core.ArgumentError.new("Maximum repetitions must be larger than " + dart.str(this.min) + ", but got " + dart.str(this.max) + "."));
      }
    }).prototype = RepeatingParser.prototype;
    dart.addTypeTests(RepeatingParser);
    RepeatingParser.prototype[_is_RepeatingParser_default] = true;
    dart.addTypeCaches(RepeatingParser);
    dart.setMethodSignature(RepeatingParser, () => ({
      __proto__: dart.getMethods(RepeatingParser.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setLibraryUri(RepeatingParser, L14);
    dart.setFieldSignature(RepeatingParser, () => ({
      __proto__: dart.getFields(RepeatingParser.__proto__),
      min: dart.finalFieldType(dart.legacy(core.int)),
      max: dart.finalFieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(RepeatingParser, ['toString']);
    return RepeatingParser;
  });
  repeating.RepeatingParser = repeating.RepeatingParser$();
  dart.addTypeTests(repeating.RepeatingParser, _is_RepeatingParser_default);
  const _is_PossessiveRepeatingParser_default = Symbol('_is_PossessiveRepeatingParser_default');
  possessive.PossessiveRepeatingParser$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var JSArrayOfTL = () => (JSArrayOfTL = dart.constFn(_interceptors.JSArray$(TL())))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var PossessiveRepeatingParserOfTL = () => (PossessiveRepeatingParserOfTL = dart.constFn(possessive.PossessiveRepeatingParser$(TL())))();
    var ParserOfTL = () => (ParserOfTL = dart.constFn(parser$.Parser$(TL())))();
    var ParserLOfTL = () => (ParserLOfTL = dart.constFn(dart.legacy(ParserOfTL())))();
    class PossessiveRepeatingParser extends repeating.RepeatingParser$(dart.legacy(T)) {
      parseOn(context) {
        let elements = JSArrayOfTL().of([]);
        let current = context;
        while (dart.notNull(elements[$length]) < dart.notNull(this.min)) {
          let result = this.delegate.parseOn(current);
          if (dart.test(result.isFailure)) {
            return result.failure(ListLOfTL(), result.message);
          }
          elements[$add](TL().as(result.value));
          current = result;
        }
        while (this.max === -1 || dart.notNull(elements[$length]) < dart.notNull(this.max)) {
          let result = this.delegate.parseOn(current);
          if (dart.test(result.isFailure)) {
            return current.success(ListLOfTL(), elements);
          }
          elements[$add](TL().as(result.value));
          current = result;
        }
        return current.success(ListLOfTL(), elements);
      }
      fastParseOn(buffer, position) {
        let count = 0;
        let current = position;
        while (count < dart.notNull(this.min)) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (dart.notNull(result) < 0) {
            return -1;
          }
          current = result;
          count = count + 1;
        }
        while (this.max === -1 || count < dart.notNull(this.max)) {
          let result = this.delegate.fastParseOn(buffer, current);
          if (dart.notNull(result) < 0) {
            return current;
          }
          current = result;
          count = count + 1;
        }
        return current;
      }
      copy() {
        return new (PossessiveRepeatingParserOfTL()).new(ParserLOfTL().as(this.delegate), this.min, this.max);
      }
    }
    (PossessiveRepeatingParser.new = function(parser, min, max) {
      PossessiveRepeatingParser.__proto__.new.call(this, parser, min, max);
      ;
    }).prototype = PossessiveRepeatingParser.prototype;
    dart.addTypeTests(PossessiveRepeatingParser);
    PossessiveRepeatingParser.prototype[_is_PossessiveRepeatingParser_default] = true;
    dart.addTypeCaches(PossessiveRepeatingParser);
    dart.setMethodSignature(PossessiveRepeatingParser, () => ({
      __proto__: dart.getMethods(PossessiveRepeatingParser.__proto__),
      copy: dart.fnType(dart.legacy(possessive.PossessiveRepeatingParser$(dart.legacy(T))), [])
    }));
    dart.setLibraryUri(PossessiveRepeatingParser, L15);
    return PossessiveRepeatingParser;
  });
  possessive.PossessiveRepeatingParser = possessive.PossessiveRepeatingParser$();
  dart.addTypeTests(possessive.PossessiveRepeatingParser, _is_PossessiveRepeatingParser_default);
  possessive['PossessiveRepeatingParserExtension|star'] = function PossessiveRepeatingParserExtension$124star(T, $this) {
    return possessive['PossessiveRepeatingParserExtension|repeat'](dart.legacy(T), $this, 0, -1);
  };
  possessive['PossessiveRepeatingParserExtension|get#star'] = function PossessiveRepeatingParserExtension$124get$35star(T, $this) {
    return dart.fn(() => possessive['PossessiveRepeatingParserExtension|star'](dart.legacy(T), $this), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(core.List$(dart.legacy(T))))), []));
  };
  possessive['PossessiveRepeatingParserExtension|plus'] = function PossessiveRepeatingParserExtension$124plus(T, $this) {
    return possessive['PossessiveRepeatingParserExtension|repeat'](dart.legacy(T), $this, 1, -1);
  };
  possessive['PossessiveRepeatingParserExtension|get#plus'] = function PossessiveRepeatingParserExtension$124get$35plus(T, $this) {
    return dart.fn(() => possessive['PossessiveRepeatingParserExtension|plus'](dart.legacy(T), $this), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(core.List$(dart.legacy(T))))), []));
  };
  possessive['PossessiveRepeatingParserExtension|times'] = function PossessiveRepeatingParserExtension$124times(T, $this, count) {
    return possessive['PossessiveRepeatingParserExtension|repeat'](dart.legacy(T), $this, count, count);
  };
  possessive['PossessiveRepeatingParserExtension|get#times'] = function PossessiveRepeatingParserExtension$124get$35times(T, $this) {
    return dart.fn(count => possessive['PossessiveRepeatingParserExtension|times'](dart.legacy(T), $this, count), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [intL()]));
  };
  possessive['PossessiveRepeatingParserExtension|repeat'] = function PossessiveRepeatingParserExtension$124repeat(T, $this, min, max = null) {
    let t21;
    return new (possessive.PossessiveRepeatingParser$(dart.legacy(T))).new($this, min, (t21 = max, t21 == null ? min : t21));
  };
  possessive['PossessiveRepeatingParserExtension|get#repeat'] = function PossessiveRepeatingParserExtension$124get$35repeat(T, $this) {
    return dart.fn((min, max = null) => possessive['PossessiveRepeatingParserExtension|repeat'](dart.legacy(T), $this, min, max), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(core.List$(dart.legacy(T))))), [intL()], [intL()]));
  };
  var message$0 = dart.privateName(any, "AnyParser.message");
  any.AnyParser = class AnyParser extends parser$.Parser$(dart.legacy(core.String)) {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    parseOn(context) {
      let position = context.position;
      let buffer = context.buffer;
      return dart.notNull(position) < buffer.length ? context.success(StringL(), buffer[$_get](position), dart.notNull(position) + 1) : context.failure(StringL(), this.message);
    }
    fastParseOn(buffer, position) {
      return dart.notNull(position) < buffer.length ? dart.notNull(position) + 1 : -1;
    }
    copy() {
      return new any.AnyParser.new(this.message);
    }
    hasEqualProperties(other) {
      AnyParserL().as(other);
      return dart.test(super.hasEqualProperties(other)) && this.message == other.message;
    }
  };
  (any.AnyParser.new = function(message) {
    this[message$0] = message;
    if (!(message != null)) dart.assertFailed("message must not be null", L16, 19, 36, "message != null");
    any.AnyParser.__proto__.new.call(this);
    ;
  }).prototype = any.AnyParser.prototype;
  dart.addTypeTests(any.AnyParser);
  dart.addTypeCaches(any.AnyParser);
  dart.setMethodSignature(any.AnyParser, () => ({
    __proto__: dart.getMethods(any.AnyParser.__proto__),
    parseOn: dart.fnType(dart.legacy(result.Result$(dart.legacy(core.String))), [dart.legacy(context.Context)]),
    copy: dart.fnType(dart.legacy(any.AnyParser), [])
  }));
  dart.setLibraryUri(any.AnyParser, L17);
  dart.setFieldSignature(any.AnyParser, () => ({
    __proto__: dart.getFields(any.AnyParser.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String))
  }));
  any.any = function any$(message = "input expected") {
    return new any.AnyParser.new(message);
  };
  choice.ChoiceParser = class ChoiceParser extends list.ListParser {
    parseOn(context) {
      let result = null;
      for (let i = 0; i < dart.notNull(this.children[$length]); i = i + 1) {
        result = this.children[$_get](i).parseOn(context);
        if (dart.test(result.isSuccess)) {
          return result;
        }
      }
      return result;
    }
    fastParseOn(buffer, position) {
      let result = -1;
      for (let i = 0; i < dart.notNull(this.children[$length]); i = i + 1) {
        result = this.children[$_get](i).fastParseOn(buffer, position);
        if (dart.notNull(result) >= 0) {
          return result;
        }
      }
      return result;
    }
    copy() {
      return new choice.ChoiceParser.new(this.children);
    }
  };
  (choice.ChoiceParser.new = function(children) {
    choice.ChoiceParser.__proto__.new.call(this, children);
    if (dart.test(children[$isEmpty])) {
      dart.throw(new core.ArgumentError.new("Choice parser cannot be empty."));
    }
  }).prototype = choice.ChoiceParser.prototype;
  dart.addTypeTests(choice.ChoiceParser);
  dart.addTypeCaches(choice.ChoiceParser);
  dart.setMethodSignature(choice.ChoiceParser, () => ({
    __proto__: dart.getMethods(choice.ChoiceParser.__proto__),
    parseOn: dart.fnType(dart.legacy(result.Result), [dart.legacy(context.Context)]),
    copy: dart.fnType(dart.legacy(choice.ChoiceParser), [])
  }));
  dart.setLibraryUri(choice.ChoiceParser, L18);
  choice['ChoiceParserExtension|or'] = function ChoiceParserExtension$124or(T, $this, other) {
    return ChoiceParserL().is($this) ? new choice.ChoiceParser.new((() => {
      let t23 = ListOfParserL().of($this.children);
      t23[$add](other);
      return t23;
    })()) : new choice.ChoiceParser.new(JSArrayOfParserL().of([$this, other]));
  };
  choice['ChoiceParserExtension|get#or'] = function ChoiceParserExtension$124get$35or(T, $this) {
    return dart.fn(other => choice['ChoiceParserExtension|or'](dart.legacy(T), $this, other), ParserLToParserL());
  };
  choice['ChoiceParserExtension||'] = function ChoiceParserExtension$124$124(T, $this, other) {
    return choice['ChoiceParserExtension|or'](dart.legacy(T), $this, other);
  };
  choice['ChoiceIterableExtension|toChoiceParser'] = function ChoiceIterableExtension$124toChoiceParser(T, $this) {
    return new choice.ChoiceParser.new($this);
  };
  choice['ChoiceIterableExtension|get#toChoiceParser'] = function ChoiceIterableExtension$124get$35toChoiceParser(T, $this) {
    return dart.fn(() => choice['ChoiceIterableExtension|toChoiceParser'](dart.legacy(T), $this), VoidToParserL());
  };
  delegate['DelegateParserExtension|delegate'] = function DelegateParserExtension$124delegate(T, $this) {
    return new (delegate.DelegateParser$(dart.legacy(T))).new($this);
  };
  delegate['DelegateParserExtension|get#delegate'] = function DelegateParserExtension$124get$35delegate(T, $this) {
    return dart.fn(() => delegate['DelegateParserExtension|delegate'](dart.legacy(T), $this), dart.fnType(dart.legacy(parser$.Parser$(dart.legacy(T))), []));
  };
  const _is_MapParser_default = Symbol('_is_MapParser_default');
  var callback$ = dart.privateName(map, "MapParser.callback");
  var hasSideEffects$ = dart.privateName(map, "MapParser.hasSideEffects");
  map.MapParser$ = dart.generic((T, R) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var MapParserOfTL$RL = () => (MapParserOfTL$RL = dart.constFn(map.MapParser$(TL(), RL())))();
    var ParserOfTL = () => (ParserOfTL = dart.constFn(parser$.Parser$(TL())))();
    var ParserLOfTL = () => (ParserLOfTL = dart.constFn(dart.legacy(ParserOfTL())))();
    var MapParserLOfTL$RL = () => (MapParserLOfTL$RL = dart.constFn(dart.legacy(MapParserOfTL$RL())))();
    var TLToRL = () => (TLToRL = dart.constFn(dart.fnType(RL(), [TL()])))();
    var TLToLRL = () => (TLToLRL = dart.constFn(dart.legacy(TLToRL())))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    class MapParser extends delegate.DelegateParser$(dart.legacy(R)) {
      get callback() {
        return this[callback$];
      }
      set callback(value) {
        super.callback = value;
      }
      get hasSideEffects() {
        return this[hasSideEffects$];
      }
      set hasSideEffects(value) {
        super.hasSideEffects = value;
      }
      parseOn(context) {
        let t30;
        let result = this.delegate.parseOn(context);
        if (dart.test(result.isSuccess)) {
          return result.success(RL(), (t30 = result.value, this.callback(TL().as(t30))));
        } else {
          return result.failure(RL(), result.message);
        }
      }
      fastParseOn(buffer, position) {
        return dart.test(this.hasSideEffects) ? super.fastParseOn(buffer, position) : this.delegate.fastParseOn(buffer, position);
      }
      copy() {
        return new (MapParserOfTL$RL()).new(ParserLOfTL().as(this.delegate), this.callback, this.hasSideEffects);
      }
      hasEqualProperties(other) {
        MapParserLOfTL$RL().as(other);
        return dart.test(super.hasEqualProperties(other)) && dart.equals(this.callback, TLToLRL().as(other.callback)) && dart.equals(this.hasSideEffects, other.hasSideEffects);
      }
    }
    (MapParser.new = function(delegate, callback, hasSideEffects = false) {
      this[callback$] = callback;
      this[hasSideEffects$] = hasSideEffects;
      if (!(callback != null)) dart.assertFailed("callback must not be null", L19, 33, 16, "callback != null");
      if (!(hasSideEffects != null)) dart.assertFailed("hasSideEffects must not be null", L19, 34, 16, "hasSideEffects != null");
      MapParser.__proto__.new.call(this, delegate);
      ;
    }).prototype = MapParser.prototype;
    dart.addTypeTests(MapParser);
    MapParser.prototype[_is_MapParser_default] = true;
    dart.addTypeCaches(MapParser);
    dart.setMethodSignature(MapParser, () => ({
      __proto__: dart.getMethods(MapParser.__proto__),
      copy: dart.fnType(dart.legacy(map.MapParser$(dart.legacy(T), dart.legacy(R))), [])
    }));
    dart.setLibraryUri(MapParser, L20);
    dart.setFieldSignature(MapParser, () => ({
      __proto__: dart.getFields(MapParser.__proto__),
      callback: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(R), [dart.legacy(T)]))),
      hasSideEffects: dart.finalFieldType(dart.legacy(core.bool))
    }));
    return MapParser;
  });
  map.MapParser = map.MapParser$();
  dart.addTypeTests(map.MapParser, _is_MapParser_default);
  map['MapParserExtension|map'] = function MapParserExtension$124map(T, R, $this, callback, opts) {
    let hasSideEffects = opts && 'hasSideEffects' in opts ? opts.hasSideEffects : false;
    return new (map.MapParser$(dart.legacy(T), dart.legacy(R))).new($this, callback, hasSideEffects);
  };
  map['MapParserExtension|get#map'] = function MapParserExtension$124get$35map(T, $this) {
    return dart.fn((R, callback, opts) => {
      let hasSideEffects = opts && 'hasSideEffects' in opts ? opts.hasSideEffects : false;
      return map['MapParserExtension|map'](dart.legacy(T), dart.legacy(R), $this, callback, {hasSideEffects: hasSideEffects});
    }, dart.gFnType(R => {
      var RL = () => (RL = dart.constFn(dart.legacy(R)))();
      var ParserOfRL = () => (ParserOfRL = dart.constFn(parser$.Parser$(RL())))();
      var ParserLOfRL = () => (ParserLOfRL = dart.constFn(dart.legacy(ParserOfRL())))();
      return [ParserLOfRL(), [dart.legacy(dart.fnType(RL(), [dart.legacy(T)]))], {hasSideEffects: boolL()}, {}];
    }));
  };
  var buffer$0 = dart.privateName(context, "Context.buffer");
  var position$ = dart.privateName(context, "Context.position");
  context.Context = class Context extends core.Object {
    get buffer() {
      return this[buffer$0];
    }
    set buffer(value) {
      super.buffer = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    success(R, result, position = null) {
      let t32;
      return new (success.Success$(dart.legacy(R))).new(this.buffer, (t32 = position, t32 == null ? this.position : t32), result);
    }
    failure(R, message, position = null) {
      let t32;
      return new (failure.Failure$(dart.legacy(R))).new(this.buffer, (t32 = position, t32 == null ? this.position : t32), message);
    }
    toString() {
      return "Context[" + dart.str(this.toPositionString()) + "]";
    }
    toPositionString() {
      return token$0.Token.positionString(this.buffer, this.position);
    }
  };
  (context.Context.new = function(buffer, position) {
    this[buffer$0] = buffer;
    this[position$] = position;
    ;
  }).prototype = context.Context.prototype;
  dart.addTypeTests(context.Context);
  dart.addTypeCaches(context.Context);
  dart.setMethodSignature(context.Context, () => ({
    __proto__: dart.getMethods(context.Context.__proto__),
    success: dart.gFnType(R => [dart.legacy(result.Result$(dart.legacy(R))), [dart.legacy(R)], [dart.legacy(core.int)]]),
    failure: dart.gFnType(R => [dart.legacy(result.Result$(dart.legacy(R))), [dart.legacy(core.String)], [dart.legacy(core.int)]]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    toPositionString: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(context.Context, L21);
  dart.setFieldSignature(context.Context, () => ({
    __proto__: dart.getFields(context.Context.__proto__),
    buffer: dart.finalFieldType(dart.legacy(core.String)),
    position: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(context.Context, ['toString']);
  const _is_Result_default = Symbol('_is_Result_default');
  result.Result$ = dart.generic(R => {
    class Result extends context.Context {
      get isSuccess() {
        return false;
      }
      get isFailure() {
        return false;
      }
    }
    (Result.new = function(buffer, position) {
      Result.__proto__.new.call(this, buffer, position);
      ;
    }).prototype = Result.prototype;
    dart.addTypeTests(Result);
    Result.prototype[_is_Result_default] = true;
    dart.addTypeCaches(Result);
    dart.setGetterSignature(Result, () => ({
      __proto__: dart.getGetters(Result.__proto__),
      isSuccess: dart.legacy(core.bool),
      isFailure: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(Result, L22);
    return Result;
  });
  result.Result = result.Result$();
  dart.addTypeTests(result.Result, _is_Result_default);
  const _is_Success_default = Symbol('_is_Success_default');
  var value$1 = dart.privateName(success, "Success.value");
  success.Success$ = dart.generic(R => {
    class Success extends result.Result$(dart.legacy(R)) {
      get value() {
        return this[value$1];
      }
      set value(value) {
        super.value = value;
      }
      get isSuccess() {
        return true;
      }
      get message() {
        return null;
      }
      map(T, callback) {
        return this.success(dart.legacy(T), callback(this.value));
      }
      toString() {
        return "Success[" + dart.str(this.toPositionString()) + "]: " + dart.str(this.value);
      }
    }
    (Success.new = function(buffer, position, value) {
      this[value$1] = value;
      Success.__proto__.new.call(this, buffer, position);
      ;
    }).prototype = Success.prototype;
    dart.addTypeTests(Success);
    Success.prototype[_is_Success_default] = true;
    dart.addTypeCaches(Success);
    dart.setMethodSignature(Success, () => ({
      __proto__: dart.getMethods(Success.__proto__),
      map: dart.gFnType(T => [dart.legacy(result.Result$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(R)]))]])
    }));
    dart.setGetterSignature(Success, () => ({
      __proto__: dart.getGetters(Success.__proto__),
      message: dart.legacy(core.String)
    }));
    dart.setLibraryUri(Success, L23);
    dart.setFieldSignature(Success, () => ({
      __proto__: dart.getFields(Success.__proto__),
      value: dart.finalFieldType(dart.legacy(R))
    }));
    dart.defineExtensionMethods(Success, ['toString']);
    return Success;
  });
  success.Success = success.Success$();
  dart.addTypeTests(success.Success, _is_Success_default);
  var failure$ = dart.privateName(exception, "ParserException.failure");
  exception.ParserException = class ParserException extends core.Object {
    get failure() {
      return this[failure$];
    }
    set failure(value) {
      super.failure = value;
    }
    get message() {
      return this.failure.message;
    }
    get offset() {
      return this.failure.position;
    }
    get source() {
      return this.failure.buffer;
    }
    toString() {
      return dart.str(this.failure.message) + " at " + dart.str(this.failure.toPositionString());
    }
  };
  (exception.ParserException.new = function(failure) {
    this[failure$] = failure;
    ;
  }).prototype = exception.ParserException.prototype;
  dart.addTypeTests(exception.ParserException);
  dart.addTypeCaches(exception.ParserException);
  exception.ParserException[dart.implements] = () => [core.FormatException];
  dart.setMethodSignature(exception.ParserException, () => ({
    __proto__: dart.getMethods(exception.ParserException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(exception.ParserException, () => ({
    __proto__: dart.getGetters(exception.ParserException.__proto__),
    message: dart.legacy(core.String),
    offset: dart.legacy(core.int),
    source: dart.legacy(core.String)
  }));
  dart.setLibraryUri(exception.ParserException, L24);
  dart.setFieldSignature(exception.ParserException, () => ({
    __proto__: dart.getFields(exception.ParserException.__proto__),
    failure: dart.finalFieldType(dart.legacy(failure.Failure))
  }));
  dart.defineExtensionMethods(exception.ParserException, ['toString']);
  const _is_Failure_default = Symbol('_is_Failure_default');
  var message$1 = dart.privateName(failure, "Failure.message");
  failure.Failure$ = dart.generic(R => {
    class Failure extends result.Result$(dart.legacy(R)) {
      get message() {
        return this[message$1];
      }
      set message(value) {
        super.message = value;
      }
      get isFailure() {
        return true;
      }
      get value() {
        return dart.throw(new exception.ParserException.new(this));
      }
      map(T, callback) {
        return this.failure(dart.legacy(T), this.message);
      }
      toString() {
        return "Failure[" + dart.str(this.toPositionString()) + "]: " + dart.str(this.message);
      }
    }
    (Failure.new = function(buffer, position, message) {
      this[message$1] = message;
      Failure.__proto__.new.call(this, buffer, position);
      ;
    }).prototype = Failure.prototype;
    dart.addTypeTests(Failure);
    Failure.prototype[_is_Failure_default] = true;
    dart.addTypeCaches(Failure);
    dart.setMethodSignature(Failure, () => ({
      __proto__: dart.getMethods(Failure.__proto__),
      map: dart.gFnType(T => [dart.legacy(result.Result$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(R)]))]])
    }));
    dart.setGetterSignature(Failure, () => ({
      __proto__: dart.getGetters(Failure.__proto__),
      value: dart.legacy(R)
    }));
    dart.setLibraryUri(Failure, L25);
    dart.setFieldSignature(Failure, () => ({
      __proto__: dart.getFields(Failure.__proto__),
      message: dart.finalFieldType(dart.legacy(core.String))
    }));
    dart.defineExtensionMethods(Failure, ['toString']);
    return Failure;
  });
  failure.Failure = failure.Failure$();
  dart.addTypeTests(failure.Failure, _is_Failure_default);
  matches_skipping['MatchesSkippingParser|matchesSkipping'] = function MatchesSkippingParser$124matchesSkipping(T, $this, input) {
    let list = _interceptors.JSArray$(dart.legacy(T)).of([]);
    possessive['PossessiveRepeatingParserExtension|star'](dart.dynamic, choice['ChoiceParserExtension|or'](dart.void, map['MapParserExtension|map'](dart.legacy(T), dart.void, $this, dart.bind(list, $add), {hasSideEffects: true}), any.any())).fastParseOn(input, 0);
    return list;
  };
  matches_skipping['MatchesSkippingParser|get#matchesSkipping'] = function MatchesSkippingParser$124get$35matchesSkipping(T, $this) {
    return dart.fn(input => matches_skipping['MatchesSkippingParser|matchesSkipping'](dart.legacy(T), $this, input), dart.fnType(dart.legacy(core.List$(dart.legacy(T))), [StringL()]));
  };
  dart.trackLibraries("packages/petitparser/src/parser/combinator/optional.dart", {
    "package:petitparser/src/parser/combinator/optional.dart": optional,
    "package:petitparser/src/parser/character/parser.dart": parser,
    "package:petitparser/src/parser/character/char.dart": char$,
    "package:petitparser/src/parser/action/token.dart": token$,
    "package:petitparser/src/parser/combinator/sequence.dart": sequence,
    "package:petitparser/src/parser/combinator/and.dart": and,
    "package:petitparser/src/matcher/matches.dart": matches,
    "package:petitparser/src/parser/repeater/repeating.dart": repeating,
    "package:petitparser/src/parser/repeater/possessive.dart": possessive,
    "package:petitparser/src/parser/predicate/any.dart": any,
    "package:petitparser/src/parser/combinator/list.dart": list,
    "package:petitparser/src/parser/combinator/choice.dart": choice,
    "package:petitparser/src/parser/combinator/delegate.dart": delegate,
    "package:petitparser/src/parser/action/map.dart": map,
    "package:petitparser/src/context/success.dart": success,
    "package:petitparser/src/context/result.dart": result,
    "package:petitparser/src/core/exception.dart": exception,
    "package:petitparser/src/context/failure.dart": failure,
    "package:petitparser/src/core/parser.dart": parser$,
    "package:petitparser/src/matcher/matches_skipping.dart": matches_skipping,
    "package:petitparser/src/core/token.dart": token$0,
    "package:petitparser/src/context/context.dart": context
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../../core/parser.dart","delegate.dart","optional.dart","../character/parser.dart","../character/char.dart","../../core/token.dart","../action/token.dart","list.dart","sequence.dart","and.dart","../../matcher/matches.dart","../repeater/repeating.dart","../repeater/possessive.dart","../predicate/any.dart","choice.dart","../action/map.dart","../../context/context.dart","../../context/result.dart","../../context/success.dart","../../core/exception.dart","../../context/failure.dart","../../matcher/matches_skipping.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../packages/petitparser/src/parser/combinator/optional.dart.lib.js"}');
  // Exports:
  return {
    src__parser__combinator__optional: optional,
    src__parser__character__parser: parser,
    src__parser__character__char: char$,
    src__parser__action__token: token$,
    src__parser__combinator__sequence: sequence,
    src__parser__combinator__and: and,
    src__matcher__matches: matches,
    src__parser__repeater__repeating: repeating,
    src__parser__repeater__possessive: possessive,
    src__parser__predicate__any: any,
    src__parser__combinator__list: list,
    src__parser__combinator__choice: choice,
    src__parser__combinator__delegate: delegate,
    src__parser__action__map: map,
    src__context__success: success,
    src__context__result: result,
    src__core__exception: exception,
    src__context__failure: failure,
    src__core__parser: parser$,
    src__matcher__matches_skipping: matches_skipping,
    src__core__token: token$0,
    src__context__context: context
  };
}));

//# sourceMappingURL=optional.dart.lib.js.map
