define(['dart_sdk', 'packages/flutter_svg/src/svg/xml_parsers.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter_svg/src/utilities/xml.dart', 'packages/flutter_svg/src/utilities/numbers.dart', 'packages/xml/src/xml_events/events/text.dart', 'packages/flutter_svg/src/svg/colors.dart', 'packages/flutter_svg/src/utilities/errors.dart', 'packages/path_drawing/src/parse_path.dart'], (function load__packages__flutter_svg__src__svg__parser_state_dart(dart_sdk, packages__flutter_svg__src__svg__xml_parsers$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter_svg__src__utilities__xml$46dart, packages__flutter_svg__src__utilities__numbers$46dart, packages__xml__src__xml_events__events__text$46dart, packages__flutter_svg__src__svg__colors$46dart, packages__flutter_svg__src__utilities__errors$46dart, packages__path_drawing__src__parse_path$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const vector_drawable = packages__flutter_svg__src__svg__xml_parsers$46dart.src__vector_drawable;
  const xml_parsers = packages__flutter_svg__src__svg__xml_parsers$46dart.src__svg__xml_parsers;
  const parsers = packages__flutter_svg__src__svg__xml_parsers$46dart.src__svg__parsers;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const xml = packages__flutter_svg__src__utilities__xml$46dart.src__utilities__xml;
  const numbers = packages__flutter_svg__src__utilities__numbers$46dart.src__utilities__numbers;
  const end_element = packages__xml__src__xml_events__events__text$46dart.src__xml_events__events__end_element;
  const start_element = packages__xml__src__xml_events__events__text$46dart.src__xml_events__events__start_element;
  const cdata = packages__xml__src__xml_events__events__text$46dart.src__xml_events__events__cdata;
  const text = packages__xml__src__xml_events__events__text$46dart.src__xml_events__events__text;
  const event_attribute = packages__xml__src__xml_events__events__text$46dart.src__xml_events__utils__event_attribute;
  const event = packages__xml__src__xml_events__events__text$46dart.src__xml_events__event;
  const colors$ = packages__flutter_svg__src__svg__colors$46dart.src__svg__colors;
  const errors = packages__flutter_svg__src__utilities__errors$46dart.src__utilities__errors;
  const parse_path = packages__path_drawing__src__parse_path$46dart.src__parse_path;
  var parser_state = Object.create(dart.library);
  var $toString = dartx.toString;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $addAll = dartx.addAll;
  var $_get = dartx._get;
  var $forEach = dartx.forEach;
  var $last = dartx.last;
  var $isNotEmpty = dartx.isNotEmpty;
  var $trim = dartx.trim;
  var $iterator = dartx.iterator;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var DiagnosticsPropertyOfStringL = () => (DiagnosticsPropertyOfStringL = dart.constFn(diagnostics.DiagnosticsProperty$(StringL())))();
  var DiagnosticsNodeL = () => (DiagnosticsNodeL = dart.constFn(dart.legacy(diagnostics.DiagnosticsNode)))();
  var SyncIterableOfDiagnosticsNodeL = () => (SyncIterableOfDiagnosticsNodeL = dart.constFn(_js_helper.SyncIterable$(DiagnosticsNodeL())))();
  var IterableOfDiagnosticsNodeL = () => (IterableOfDiagnosticsNodeL = dart.constFn(core.Iterable$(DiagnosticsNodeL())))();
  var IterableLOfDiagnosticsNodeL = () => (IterableLOfDiagnosticsNodeL = dart.constFn(dart.legacy(IterableOfDiagnosticsNodeL())))();
  var VoidToIterableLOfDiagnosticsNodeL = () => (VoidToIterableLOfDiagnosticsNodeL = dart.constFn(dart.fnType(IterableLOfDiagnosticsNodeL(), [])))();
  var DrawableL = () => (DrawableL = dart.constFn(dart.legacy(vector_drawable.Drawable)))();
  var JSArrayOfDrawableL = () => (JSArrayOfDrawableL = dart.constFn(_interceptors.JSArray$(DrawableL())))();
  var XmlEndElementEventL = () => (XmlEndElementEventL = dart.constFn(dart.legacy(end_element.XmlEndElementEvent)))();
  var XmlStartElementEventL = () => (XmlStartElementEventL = dart.constFn(dart.legacy(start_element.XmlStartElementEvent)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var JSArrayOfdoubleL = () => (JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(doubleL())))();
  var ColorL = () => (ColorL = dart.constFn(dart.legacy(ui.Color)))();
  var JSArrayOfColorL = () => (JSArrayOfColorL = dart.constFn(_interceptors.JSArray$(ColorL())))();
  var DrawableGradientL = () => (DrawableGradientL = dart.constFn(dart.legacy(vector_drawable.DrawableGradient)))();
  var PathL = () => (PathL = dart.constFn(dart.legacy(ui.Path)))();
  var JSArrayOfPathL = () => (JSArrayOfPathL = dart.constFn(_interceptors.JSArray$(PathL())))();
  var DrawableShapeL = () => (DrawableShapeL = dart.constFn(dart.legacy(vector_drawable.DrawableShape)))();
  var DrawableGroupL = () => (DrawableGroupL = dart.constFn(dart.legacy(vector_drawable.DrawableGroup)))();
  var DrawableLTovoid = () => (DrawableLTovoid = dart.constFn(dart.fnType(dart.void, [DrawableL()])))();
  var _TextInfoL = () => (_TextInfoL = dart.constFn(dart.legacy(parser_state._TextInfo)))();
  var ListQueueOf_TextInfoL = () => (ListQueueOf_TextInfoL = dart.constFn(collection.ListQueue$(_TextInfoL())))();
  var StringLTovoid = () => (StringLTovoid = dart.constFn(dart.fnType(dart.void, [StringL()])))();
  var XmlStartElementEventLTovoid = () => (XmlStartElementEventLTovoid = dart.constFn(dart.fnType(dart.void, [XmlStartElementEventL()])))();
  var XmlCDATAEventL = () => (XmlCDATAEventL = dart.constFn(dart.legacy(cdata.XmlCDATAEvent)))();
  var XmlTextEventL = () => (XmlTextEventL = dart.constFn(dart.legacy(text.XmlTextEvent)))();
  var _SvgGroupTupleL = () => (_SvgGroupTupleL = dart.constFn(dart.legacy(parser_state._SvgGroupTuple)))();
  var ListQueueOf_SvgGroupTupleL = () => (ListQueueOf_SvgGroupTupleL = dart.constFn(collection.ListQueue$(_SvgGroupTupleL())))();
  var XmlEventAttributeL = () => (XmlEventAttributeL = dart.constFn(dart.legacy(event_attribute.XmlEventAttribute)))();
  var JSArrayOfXmlEventAttributeL = () => (JSArrayOfXmlEventAttributeL = dart.constFn(_interceptors.JSArray$(XmlEventAttributeL())))();
  var XmlEventL = () => (XmlEventL = dart.constFn(dart.legacy(event.XmlEvent)))();
  var SyncIterableOfXmlEventL = () => (SyncIterableOfXmlEventL = dart.constFn(_js_helper.SyncIterable$(XmlEventL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var DrawableRootL = () => (DrawableRootL = dart.constFn(dart.legacy(vector_drawable.DrawableRoot)))();
  var LinkedHashSetOfStringL = () => (LinkedHashSetOfStringL = dart.constFn(collection.LinkedHashSet$(StringL())))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var FutureLOfvoid = () => (FutureLOfvoid = dart.constFn(dart.legacy(FutureOfvoid())))();
  var SvgParserStateL = () => (SvgParserStateL = dart.constFn(dart.legacy(parser_state.SvgParserState)))();
  var SvgParserStateLToFutureLOfvoid = () => (SvgParserStateLToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [SvgParserStateL()])))();
  var SvgParserStateLToLFutureLOfvoid = () => (SvgParserStateLToLFutureLOfvoid = dart.constFn(dart.legacy(SvgParserStateLToFutureLOfvoid())))();
  var ListOfXmlEventAttributeL = () => (ListOfXmlEventAttributeL = dart.constFn(core.List$(XmlEventAttributeL())))();
  var ListLOfXmlEventAttributeL = () => (ListLOfXmlEventAttributeL = dart.constFn(dart.legacy(ListOfXmlEventAttributeL())))();
  var ListLOfXmlEventAttributeLToPathL = () => (ListLOfXmlEventAttributeLToPathL = dart.constFn(dart.fnType(PathL(), [ListLOfXmlEventAttributeL()])))();
  var ListLOfXmlEventAttributeLToLPathL = () => (ListLOfXmlEventAttributeLToLPathL = dart.constFn(dart.legacy(ListLOfXmlEventAttributeLToPathL())))();
  const CT = Object.create(null);
  var L0 = "package:flutter_svg/src/svg/parser_state.dart";
  var L1 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_svg-0.19.1/lib/src/svg/parser_state.dart";
  dart.defineLazy(CT, {
    get C1() {
      return C1 = dart.fn(parser_state._Elements.svg, SvgParserStateLToFutureLOfvoid());
    },
    get C2() {
      return C2 = dart.fn(parser_state._Elements.g, SvgParserStateLToFutureLOfvoid());
    },
    get C3() {
      return C3 = dart.fn(parser_state._Elements.use, SvgParserStateLToFutureLOfvoid());
    },
    get C4() {
      return C4 = dart.fn(parser_state._Elements.symbol, SvgParserStateLToFutureLOfvoid());
    },
    get C5() {
      return C5 = dart.fn(parser_state._Elements.radialGradient, SvgParserStateLToFutureLOfvoid());
    },
    get C6() {
      return C6 = dart.fn(parser_state._Elements.linearGradient, SvgParserStateLToFutureLOfvoid());
    },
    get C7() {
      return C7 = dart.fn(parser_state._Elements.clipPath, SvgParserStateLToFutureLOfvoid());
    },
    get C8() {
      return C8 = dart.fn(parser_state._Elements.image, SvgParserStateLToFutureLOfvoid());
    },
    get C9() {
      return C9 = dart.fn(parser_state._Elements.text, SvgParserStateLToFutureLOfvoid());
    },
    get C0() {
      return C0 = dart.constMap(StringL(), SvgParserStateLToLFutureLOfvoid(), ["svg", C1 || CT.C1, "g", C2 || CT.C2, "a", C2 || CT.C2, "use", C3 || CT.C3, "symbol", C4 || CT.C4, "mask", C4 || CT.C4, "radialGradient", C5 || CT.C5, "linearGradient", C6 || CT.C6, "clipPath", C7 || CT.C7, "image", C8 || CT.C8, "text", C9 || CT.C9]);
    },
    get C11() {
      return C11 = dart.fn(parser_state._Paths.circle, ListLOfXmlEventAttributeLToPathL());
    },
    get C12() {
      return C12 = dart.fn(parser_state._Paths.path, ListLOfXmlEventAttributeLToPathL());
    },
    get C13() {
      return C13 = dart.fn(parser_state._Paths.rect, ListLOfXmlEventAttributeLToPathL());
    },
    get C14() {
      return C14 = dart.fn(parser_state._Paths.polygon, ListLOfXmlEventAttributeLToPathL());
    },
    get C15() {
      return C15 = dart.fn(parser_state._Paths.polyline, ListLOfXmlEventAttributeLToPathL());
    },
    get C16() {
      return C16 = dart.fn(parser_state._Paths.ellipse, ListLOfXmlEventAttributeLToPathL());
    },
    get C17() {
      return C17 = dart.fn(parser_state._Paths.line, ListLOfXmlEventAttributeLToPathL());
    },
    get C10() {
      return C10 = dart.constMap(StringL(), ListLOfXmlEventAttributeLToLPathL(), ["circle", C11 || CT.C11, "path", C12 || CT.C12, "rect", C13 || CT.C13, "polygon", C14 || CT.C14, "polyline", C15 || CT.C15, "ellipse", C16 || CT.C16, "line", C17 || CT.C17]);
    }
  }, false);
  var style$ = dart.privateName(parser_state, "_TextInfo.style");
  var offset$ = dart.privateName(parser_state, "_TextInfo.offset");
  var transform$ = dart.privateName(parser_state, "_TextInfo.transform");
  parser_state._TextInfo = class _TextInfo extends core.Object {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    toString() {
      return dart.str(this.runtimeType) + "{" + dart.str(this.offset) + ", " + dart.str(this.style) + ", " + dart.str(this.transform) + "}";
    }
  };
  (parser_state._TextInfo.new = function(style, offset, transform) {
    this[style$] = style;
    this[offset$] = offset;
    this[transform$] = transform;
    ;
  }).prototype = parser_state._TextInfo.prototype;
  dart.addTypeTests(parser_state._TextInfo);
  dart.addTypeCaches(parser_state._TextInfo);
  dart.setMethodSignature(parser_state._TextInfo, () => ({
    __proto__: dart.getMethods(parser_state._TextInfo.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(parser_state._TextInfo, L0);
  dart.setFieldSignature(parser_state._TextInfo, () => ({
    __proto__: dart.getFields(parser_state._TextInfo.__proto__),
    style: dart.finalFieldType(dart.legacy(vector_drawable.DrawableStyle)),
    offset: dart.finalFieldType(dart.legacy(ui.Offset)),
    transform: dart.finalFieldType(dart.legacy(vector_math_64.Matrix4))
  }));
  dart.defineExtensionMethods(parser_state._TextInfo, ['toString']);
  var _root = dart.privateName(parser_state, "_root");
  var _key$ = dart.privateName(parser_state, "_key");
  var _parentDrawables = dart.privateName(parser_state, "_parentDrawables");
  var _definitions = dart.privateName(parser_state, "_definitions");
  var _currentStartElement = dart.privateName(parser_state, "_currentStartElement");
  var _inDefs = dart.privateName(parser_state, "_inDefs");
  var _readSubtree = dart.privateName(parser_state, "_readSubtree");
  parser_state._Elements = class _Elements extends core.Object {
    static svg(parserState) {
      let viewBox = xml_parsers.parseViewBox(parserState.attributes);
      let id = parserState.attribute("id", {def: ""});
      if (parserState[_root] != null) {
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new core.UnsupportedError.new("Unsupported nested <svg> element."), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new(function*() {
            yield new assertions.ErrorDescription.new("The root <svg> element contained an unsupported nested SVG element.");
            if (parserState[_key$] != null) {
              yield new assertions.ErrorDescription.new("");
              yield new (DiagnosticsPropertyOfStringL()).new("Picture key", parserState[_key$]);
            }
          }), VoidToIterableLOfDiagnosticsNodeL()), library: "SVG", context: new assertions.ErrorDescription.new("in _Element.svg")}));
        parserState[_parentDrawables].addLast(new parser_state._SvgGroupTuple.new("svg", new vector_drawable.DrawableGroup.new(id, JSArrayOfDrawableL().of([]), xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], viewBox.viewBoxRect, null))));
        return null;
      }
      parserState[_root] = new vector_drawable.DrawableRoot.new(id, viewBox, JSArrayOfDrawableL().of([]), parserState[_definitions], xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], viewBox.viewBoxRect, null));
      parserState.addGroup(parserState[_currentStartElement], parserState[_root]);
      return null;
    }
    static g(parserState) {
      let t0;
      let parent = parserState.currentGroup;
      let group = new vector_drawable.DrawableGroup.new(parserState.attribute("id", {def: ""}), JSArrayOfDrawableL().of([]), xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], parserState.rootBounds, parent.style), {transform: (t0 = parsers.parseTransform(parserState.attribute("transform")), t0 == null ? null : t0.storage)});
      if (!dart.test(parserState[_inDefs])) {
        parent.children[$add](group);
      }
      parserState.addGroup(parserState[_currentStartElement], group);
      return null;
    }
    static symbol(parserState) {
      let t0;
      let parent = parserState.currentGroup;
      let group = new vector_drawable.DrawableGroup.new(parserState.attribute("id", {def: ""}), JSArrayOfDrawableL().of([]), xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], null, parent.style), {transform: (t0 = parsers.parseTransform(parserState.attribute("transform")), t0 == null ? null : t0.storage)});
      parserState.addGroup(parserState[_currentStartElement], group);
      return null;
    }
    static use(parserState) {
      let t0;
      let parent = parserState.currentGroup;
      let xlinkHref = xml.getHrefAttribute(parserState.attributes);
      if (xlinkHref[$isEmpty]) {
        return null;
      }
      let style = xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], parserState.rootBounds, parent.style);
      let transform = (t0 = parsers.parseTransform(parserState.attribute("transform")), t0 == null ? vector_math_64.Matrix4.identity() : t0);
      transform.translate(numbers.parseDouble(parserState.attribute("x", {def: "0"})), numbers.parseDouble(parserState.attribute("y", {def: "0"})));
      let ref = parserState[_definitions].getDrawable("url(" + dart.str(xlinkHref) + ")");
      let group = new vector_drawable.DrawableGroup.new(parserState.attribute("id", {def: ""}), JSArrayOfDrawableL().of([ref.mergeStyle(style)]), style, {transform: transform.storage});
      let isIri = parserState.checkForIri(group);
      if (!dart.test(parserState[_inDefs]) || !dart.test(isIri)) {
        parent.children[$add](group);
      }
      return null;
    }
    static parseStops(parserState, colors, offsets) {
      let t0;
      for (let event of parserState[_readSubtree]()) {
        if (XmlEndElementEventL().is(event)) {
          continue;
        }
        if (XmlStartElementEventL().is(event)) {
          let rawOpacity = xml.getAttribute(parserState.attributes, "stop-opacity", {def: "1"});
          let stopColor = (t0 = colors$.parseColor(xml.getAttribute(parserState.attributes, "stop-color")), t0 == null ? colors$.colorBlack : t0);
          colors[$add](stopColor.withOpacity(numbers.parseDouble(rawOpacity)));
          let rawOffset = xml.getAttribute(parserState.attributes, "offset", {def: "0%"});
          offsets[$add](parsers.parseDecimalOrPercentage(rawOffset));
        }
      }
      return null;
    }
    static radialGradient(parserState) {
      let t0;
      let gradientUnits = xml.getAttribute(parserState.attributes, "gradientUnits", {def: null});
      let isObjectBoundingBox = gradientUnits !== "userSpaceOnUse";
      let rawCx = parserState.attribute("cx", {def: "50%"});
      let rawCy = parserState.attribute("cy", {def: "50%"});
      let rawR = parserState.attribute("r", {def: "50%"});
      let rawFx = parserState.attribute("fx", {def: rawCx});
      let rawFy = parserState.attribute("fy", {def: rawCy});
      let spreadMethod = xml_parsers.parseTileMode(parserState.attributes);
      let id = xml_parsers.buildUrlIri(parserState.attributes);
      let originalTransform = parsers.parseTransform(parserState.attribute("gradientTransform", {def: null}));
      let offsets = JSArrayOfdoubleL().of([]);
      let colors = JSArrayOfColorL().of([]);
      if (dart.test(parserState[_currentStartElement].isSelfClosing)) {
        let href = xml.getHrefAttribute(parserState.attributes);
        let ref = parserState[_definitions].getGradient(DrawableGradientL(), "url(" + dart.str(href) + ")");
        if (ref == null) {
          errors.reportMissingDef(href, "radialGradient");
        } else {
          if (gradientUnits == null) {
            isObjectBoundingBox = ref.unitMode == vector_drawable.GradientUnitMode.objectBoundingBox;
          }
          colors[$addAll](ref.colors);
          offsets[$addAll](ref.offsets);
        }
      } else {
        parser_state._Elements.parseStops(parserState, colors, offsets);
      }
      let cx = null;
      let cy = null;
      let r = null;
      let fx = null;
      let fy = null;
      if (isObjectBoundingBox) {
        cx = parsers.parseDecimalOrPercentage(rawCx);
        cy = parsers.parseDecimalOrPercentage(rawCy);
        r = parsers.parseDecimalOrPercentage(rawR);
        fx = parsers.parseDecimalOrPercentage(rawFx);
        fy = parsers.parseDecimalOrPercentage(rawFy);
      } else {
        cx = dart.test(parsers.isPercentage(rawCx)) ? dart.notNull(parsers.parsePercentage(rawCx)) * dart.notNull(parserState.rootBounds.width) + dart.notNull(parserState.rootBounds.left) : numbers.parseDouble(rawCx);
        cy = dart.test(parsers.isPercentage(rawCy)) ? dart.notNull(parsers.parsePercentage(rawCy)) * dart.notNull(parserState.rootBounds.height) + dart.notNull(parserState.rootBounds.top) : numbers.parseDouble(rawCy);
        r = dart.test(parsers.isPercentage(rawR)) ? dart.notNull(parsers.parsePercentage(rawR)) * ((dart.notNull(parserState.rootBounds.height) + dart.notNull(parserState.rootBounds.width)) / 2) : numbers.parseDouble(rawR);
        fx = dart.test(parsers.isPercentage(rawFx)) ? dart.notNull(parsers.parsePercentage(rawFx)) * dart.notNull(parserState.rootBounds.width) + dart.notNull(parserState.rootBounds.left) : numbers.parseDouble(rawFx);
        fy = dart.test(parsers.isPercentage(rawFy)) ? dart.notNull(parsers.parsePercentage(rawFy)) * dart.notNull(parserState.rootBounds.height) + dart.notNull(parserState.rootBounds.top) : numbers.parseDouble(rawFy);
      }
      parserState[_definitions].addGradient(id, new vector_drawable.DrawableRadialGradient.new({center: new ui.Offset.new(cx, cy), radius: r, focal: fx != cx || fy != cy ? new ui.Offset.new(fx, fy) : new ui.Offset.new(cx, cy), focalRadius: 0.0, colors: colors, offsets: offsets, unitMode: isObjectBoundingBox ? vector_drawable.GradientUnitMode.objectBoundingBox : vector_drawable.GradientUnitMode.userSpaceOnUse, spreadMethod: spreadMethod, transform: (t0 = originalTransform, t0 == null ? null : t0.storage)}));
      return null;
    }
    static linearGradient(parserState) {
      let t0;
      let gradientUnits = xml.getAttribute(parserState.attributes, "gradientUnits", {def: null});
      let isObjectBoundingBox = gradientUnits !== "userSpaceOnUse";
      let x1 = parserState.attribute("x1", {def: "0%"});
      let x2 = parserState.attribute("x2", {def: "100%"});
      let y1 = parserState.attribute("y1", {def: "0%"});
      let y2 = parserState.attribute("y2", {def: "0%"});
      let id = xml_parsers.buildUrlIri(parserState.attributes);
      let originalTransform = parsers.parseTransform(parserState.attribute("gradientTransform", {def: null}));
      let spreadMethod = xml_parsers.parseTileMode(parserState.attributes);
      let colors = JSArrayOfColorL().of([]);
      let offsets = JSArrayOfdoubleL().of([]);
      if (dart.test(parserState[_currentStartElement].isSelfClosing)) {
        let href = xml.getHrefAttribute(parserState.attributes);
        let ref = parserState[_definitions].getGradient(DrawableGradientL(), "url(" + dart.str(href) + ")");
        if (ref == null) {
          errors.reportMissingDef(href, "linearGradient");
        } else {
          if (gradientUnits == null) {
            isObjectBoundingBox = ref.unitMode == vector_drawable.GradientUnitMode.objectBoundingBox;
          }
          colors[$addAll](ref.colors);
          offsets[$addAll](ref.offsets);
        }
      } else {
        parser_state._Elements.parseStops(parserState, colors, offsets);
      }
      let fromOffset = null;
      let toOffset = null;
      if (isObjectBoundingBox) {
        fromOffset = new ui.Offset.new(parsers.parseDecimalOrPercentage(x1), parsers.parseDecimalOrPercentage(y1));
        toOffset = new ui.Offset.new(parsers.parseDecimalOrPercentage(x2), parsers.parseDecimalOrPercentage(y2));
      } else {
        fromOffset = new ui.Offset.new(dart.test(parsers.isPercentage(x1)) ? dart.notNull(parsers.parsePercentage(x1)) * dart.notNull(parserState.rootBounds.width) + dart.notNull(parserState.rootBounds.left) : numbers.parseDouble(x1), dart.test(parsers.isPercentage(y1)) ? dart.notNull(parsers.parsePercentage(y1)) * dart.notNull(parserState.rootBounds.height) + dart.notNull(parserState.rootBounds.top) : numbers.parseDouble(y1));
        toOffset = new ui.Offset.new(dart.test(parsers.isPercentage(x2)) ? dart.notNull(parsers.parsePercentage(x2)) * dart.notNull(parserState.rootBounds.width) + dart.notNull(parserState.rootBounds.left) : numbers.parseDouble(x2), dart.test(parsers.isPercentage(y2)) ? dart.notNull(parsers.parsePercentage(y2)) * dart.notNull(parserState.rootBounds.height) + dart.notNull(parserState.rootBounds.top) : numbers.parseDouble(y2));
      }
      parserState[_definitions].addGradient(id, new vector_drawable.DrawableLinearGradient.new({from: fromOffset, to: toOffset, colors: colors, offsets: offsets, spreadMethod: spreadMethod, unitMode: isObjectBoundingBox ? vector_drawable.GradientUnitMode.objectBoundingBox : vector_drawable.GradientUnitMode.userSpaceOnUse, transform: (t0 = originalTransform, t0 == null ? null : t0.storage)}));
      return null;
    }
    static clipPath(parserState) {
      let id = xml_parsers.buildUrlIri(parserState.attributes);
      let paths = JSArrayOfPathL().of([]);
      let currentPath = null;
      for (let event of parserState[_readSubtree]()) {
        if (XmlEndElementEventL().is(event)) {
          continue;
        }
        if (XmlStartElementEventL().is(event)) {
          let pathFn = parser_state._svgPathFuncs[$_get](event.name);
          if (pathFn != null) {
            let nextPath = xml_parsers.applyTransformIfNeeded(pathFn(parserState.attributes), parserState.attributes);
            nextPath.fillType = xml_parsers.parseFillRule(parserState.attributes, "clip-rule");
            if (currentPath != null && !dart.equals(nextPath.fillType, currentPath.fillType)) {
              currentPath = nextPath;
              paths[$add](currentPath);
            } else if (currentPath == null) {
              currentPath = nextPath;
              paths[$add](currentPath);
            } else {
              currentPath.addPath(nextPath, ui.Offset.zero);
            }
          } else if (event.name === "use") {
            let xlinkHref = xml.getHrefAttribute(parserState.attributes);
            let definitionDrawable = parserState[_definitions].getDrawable("url(" + dart.str(xlinkHref) + ")");
            function extractPathsFromDrawable(target) {
              if (DrawableShapeL().is(target)) {
                paths[$add](target.path);
              } else if (DrawableGroupL().is(target)) {
                target.children[$forEach](extractPathsFromDrawable);
              }
            }
            dart.fn(extractPathsFromDrawable, DrawableLTovoid());
            extractPathsFromDrawable(definitionDrawable);
          } else {
            assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new core.UnsupportedError.new("Unsupported clipPath child " + dart.str(event.name)), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new(function*() {
                yield new assertions.ErrorDescription.new("The <clipPath> element contained an unsupported child " + dart.str(event.name));
                if (parserState[_key$] != null) {
                  yield new assertions.ErrorDescription.new("");
                  yield new (DiagnosticsPropertyOfStringL()).new("Picture key", parserState[_key$]);
                }
              }), VoidToIterableLOfDiagnosticsNodeL()), library: "SVG", context: new assertions.ErrorDescription.new("in _Element.clipPath")}));
          }
        }
      }
      parserState[_definitions].addClipPath(id, paths);
      return null;
    }
    static image(parserState) {
      return async.async(dart.void, function* image() {
        let t0;
        let href = xml.getHrefAttribute(parserState.attributes);
        let offset = new ui.Offset.new(numbers.parseDouble(parserState.attribute("x", {def: "0"})), numbers.parseDouble(parserState.attribute("y", {def: "0"})));
        let size = new ui.Size.new(numbers.parseDouble(parserState.attribute("width", {def: "0"})), numbers.parseDouble(parserState.attribute("height", {def: "0"})));
        let image = (yield parsers.resolveImage(href));
        let parent = parserState[_parentDrawables][$last].drawable;
        let parentStyle = parent.style;
        let drawable = new vector_drawable.DrawableRasterImage.new(parserState.attribute("id", {def: ""}), image, offset, xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], parserState.rootBounds, parentStyle), {size: size, transform: (t0 = parsers.parseTransform(parserState.attribute("transform")), t0 == null ? null : t0.storage)});
        let isIri = parserState.checkForIri(drawable);
        if (!dart.test(parserState[_inDefs]) || !dart.test(isIri)) {
          parserState.currentGroup.children[$add](drawable);
        }
      });
    }
    static text(parserState) {
      return async.async(dart.void, function* text() {
        if (!(parserState != null)) dart.assertFailed(null, L1, 515, 12, "parserState != null");
        if (!(parserState.currentGroup != null)) dart.assertFailed(null, L1, 516, 12, "parserState.currentGroup != null");
        if (dart.test(parserState[_currentStartElement].isSelfClosing)) {
          return;
        }
        let textInfos = new (ListQueueOf_TextInfoL()).new();
        let lastTextWidth = 0.0;
        function _processText(value) {
          let t0, t0$;
          if (value[$isEmpty]) {
            return;
          }
          if (!dart.test(textInfos[$isNotEmpty])) dart.assertFailed(null, L1, 532, 14, "textInfos.isNotEmpty");
          let lastTextInfo = textInfos[$last];
          let fill = parsers.createParagraph(value, lastTextInfo.style, lastTextInfo.style.fill);
          let stroke = parsers.createParagraph(value, lastTextInfo.style, dart.test(vector_drawable.DrawablePaint.isEmpty(lastTextInfo.style.stroke)) ? parsers.transparentStroke : lastTextInfo.style.stroke);
          parserState.currentGroup.children[$add](new vector_drawable.DrawableText.new(parserState.attribute("id", {def: ""}), fill, stroke, lastTextInfo.offset, (t0 = lastTextInfo.style.textStyle.anchor, t0 == null ? vector_drawable.DrawableTextAnchorPosition.start : t0), {transform: (t0$ = lastTextInfo.transform, t0$ == null ? null : t0$.storage)}));
          lastTextWidth = fill.maxIntrinsicWidth;
        }
        dart.fn(_processText, StringLTovoid());
        function _processStartElement(event) {
          let t0, t0$, t0$0, t0$1, t0$2;
          let lastTextInfo = null;
          if (dart.test(textInfos[$isNotEmpty])) {
            lastTextInfo = textInfos[$last];
          }
          let currentOffset = parser_state._parseCurrentOffset(parserState, (t0$ = (t0 = lastTextInfo, t0 == null ? null : t0.offset), t0$ == null ? null : t0$.translate(lastTextWidth, 0.0)));
          let transform = parsers.parseTransform(parserState.attribute("transform"));
          if ((t0$0 = lastTextInfo, t0$0 == null ? null : t0$0.transform) != null) {
            if (transform == null) {
              transform = lastTextInfo.transform;
            } else {
              transform = lastTextInfo.transform.multiplied(transform);
            }
          }
          textInfos.add(new parser_state._TextInfo.new(xml_parsers.parseStyle(parserState.attributes, parserState[_definitions], parserState.rootBounds, (t0$2 = (t0$1 = lastTextInfo, t0$1 == null ? null : t0$1.style), t0$2 == null ? parserState.currentGroup.style : t0$2)), currentOffset, transform));
          if (dart.test(event.isSelfClosing)) {
            textInfos.removeLast();
          }
        }
        dart.fn(_processStartElement, XmlStartElementEventLTovoid());
        _processStartElement(parserState[_currentStartElement]);
        for (let event of parserState[_readSubtree]()) {
          if (XmlCDATAEventL().is(event)) {
            _processText(event.text[$trim]());
          } else if (XmlTextEventL().is(event)) {
            _processText(event.text[$trim]());
          }
          if (XmlStartElementEventL().is(event)) {
            _processStartElement(event);
          } else if (XmlEndElementEventL().is(event)) {
            textInfos.removeLast();
          }
        }
      });
    }
  };
  (parser_state._Elements.new = function() {
    ;
  }).prototype = parser_state._Elements.prototype;
  dart.addTypeTests(parser_state._Elements);
  dart.addTypeCaches(parser_state._Elements);
  dart.setLibraryUri(parser_state._Elements, L0);
  parser_state._Paths = class _Paths extends core.Object {
    static circle(attributes) {
      let t0;
      let cx = numbers.parseDouble(xml.getAttribute(attributes, "cx", {def: "0"}));
      let cy = numbers.parseDouble(xml.getAttribute(attributes, "cy", {def: "0"}));
      let r = numbers.parseDouble(xml.getAttribute(attributes, "r", {def: "0"}));
      let oval = new ui.Rect.fromCircle({center: new ui.Offset.new(cx, cy), radius: r});
      t0 = ui.Path.new();
      return (() => {
        t0.addOval(oval);
        return t0;
      })();
    }
    static path(attributes) {
      let d = xml.getAttribute(attributes, "d");
      return parse_path.parseSvgPathData(d);
    }
    static rect(attributes) {
      let t0, t0$;
      let x = numbers.parseDouble(xml.getAttribute(attributes, "x", {def: "0"}));
      let y = numbers.parseDouble(xml.getAttribute(attributes, "y", {def: "0"}));
      let w = numbers.parseDouble(xml.getAttribute(attributes, "width", {def: "0"}));
      let h = numbers.parseDouble(xml.getAttribute(attributes, "height", {def: "0"}));
      let rect = new ui.Rect.fromLTWH(x, y, w, h);
      let rxRaw = xml.getAttribute(attributes, "rx", {def: null});
      let ryRaw = xml.getAttribute(attributes, "ry", {def: null});
      rxRaw == null ? rxRaw = ryRaw : null;
      ryRaw == null ? ryRaw = rxRaw : null;
      if (rxRaw != null && rxRaw !== "") {
        let rx = numbers.parseDouble(rxRaw);
        let ry = numbers.parseDouble(ryRaw);
        t0 = ui.Path.new();
        return (() => {
          t0.addRRect(new ui.RRect.fromRectXY(rect, rx, ry));
          return t0;
        })();
      }
      t0$ = ui.Path.new();
      return (() => {
        t0$.addRect(rect);
        return t0$;
      })();
    }
    static polygon(attributes) {
      return parser_state._Paths.parsePathFromPoints(attributes, true);
    }
    static polyline(attributes) {
      return parser_state._Paths.parsePathFromPoints(attributes, false);
    }
    static parsePathFromPoints(attributes, close) {
      let points = xml.getAttribute(attributes, "points");
      if (points === "") {
        return null;
      }
      let path = "M" + dart.str(points) + (dart.test(close) ? "z" : "");
      return parse_path.parseSvgPathData(path);
    }
    static ellipse(attributes) {
      let t0;
      let cx = numbers.parseDouble(xml.getAttribute(attributes, "cx", {def: "0"}));
      let cy = numbers.parseDouble(xml.getAttribute(attributes, "cy", {def: "0"}));
      let rx = numbers.parseDouble(xml.getAttribute(attributes, "rx", {def: "0"}));
      let ry = numbers.parseDouble(xml.getAttribute(attributes, "ry", {def: "0"}));
      let r = new ui.Rect.fromLTWH(dart.notNull(cx) - dart.notNull(rx), dart.notNull(cy) - dart.notNull(ry), dart.notNull(rx) * 2, dart.notNull(ry) * 2);
      t0 = ui.Path.new();
      return (() => {
        t0.addOval(r);
        return t0;
      })();
    }
    static line(attributes) {
      let t0;
      let x1 = numbers.parseDouble(xml.getAttribute(attributes, "x1", {def: "0"}));
      let x2 = numbers.parseDouble(xml.getAttribute(attributes, "x2", {def: "0"}));
      let y1 = numbers.parseDouble(xml.getAttribute(attributes, "y1", {def: "0"}));
      let y2 = numbers.parseDouble(xml.getAttribute(attributes, "y2", {def: "0"}));
      t0 = ui.Path.new();
      return (() => {
        t0.moveTo(x1, y1);
        t0.lineTo(x2, y2);
        return t0;
      })();
    }
  };
  (parser_state._Paths.new = function() {
    ;
  }).prototype = parser_state._Paths.prototype;
  dart.addTypeTests(parser_state._Paths);
  dart.addTypeCaches(parser_state._Paths);
  dart.setLibraryUri(parser_state._Paths, L0);
  parser_state._SvgGroupTuple = class _SvgGroupTuple extends core.Object {};
  (parser_state._SvgGroupTuple.new = function(name, drawable) {
    this.name = name;
    this.drawable = drawable;
    ;
  }).prototype = parser_state._SvgGroupTuple.prototype;
  dart.addTypeTests(parser_state._SvgGroupTuple);
  dart.addTypeCaches(parser_state._SvgGroupTuple);
  dart.setLibraryUri(parser_state._SvgGroupTuple, L0);
  dart.setFieldSignature(parser_state._SvgGroupTuple, () => ({
    __proto__: dart.getFields(parser_state._SvgGroupTuple.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    drawable: dart.finalFieldType(dart.legacy(vector_drawable.DrawableParent))
  }));
  var _currentAttributes = dart.privateName(parser_state, "_currentAttributes");
  var _eventIterator = dart.privateName(parser_state, "_eventIterator");
  var _discardSubtree = dart.privateName(parser_state, "_discardSubtree");
  var depth = dart.privateName(parser_state, "SvgParserState.depth");
  parser_state.SvgParserState = class SvgParserState extends core.Object {
    get depth() {
      return this[depth];
    }
    set depth(value) {
      this[depth] = value;
    }
    [_discardSubtree]() {
      let subtreeStartDepth = this.depth;
      while (dart.test(this[_eventIterator].moveNext())) {
        let event = this[_eventIterator].current;
        if (event == null) {
          return;
        }
        if (XmlStartElementEventL().is(event) && !dart.test(event.isSelfClosing)) {
          this.depth = dart.notNull(this.depth) + 1;
        } else if (XmlEndElementEventL().is(event)) {
          this.depth = dart.notNull(this.depth) - 1;
          if (!(dart.notNull(this.depth) >= 0)) dart.assertFailed(null, L1, 725, 16, "depth >= 0");
        }
        this[_currentAttributes] = JSArrayOfXmlEventAttributeL().of([]);
        this[_currentStartElement] = null;
        if (dart.notNull(this.depth) < dart.notNull(subtreeStartDepth)) {
          return;
        }
      }
    }
    [_readSubtree]() {
      return new (SyncIterableOfXmlEventL()).new((function* _readSubtree() {
        let subtreeStartDepth = this.depth;
        while (dart.test(this[_eventIterator].moveNext())) {
          let event = this[_eventIterator].current;
          if (event == null) {
            return;
          }
          let isSelfClosing = false;
          if (XmlStartElementEventL().is(event)) {
            if (xml.getAttribute(event.attributes, "display") === "none" || xml.getAttribute(event.attributes, "visibility") === "hidden") {
              core.print("SVG Warning: Discarding:\n\n  " + dart.str(event) + "\n\n" + "and any children it has since it is not visible.\n" + "If that element is meant to be visible, the `display` or " + "`visibility` attributes should be removed.\n" + "If that element is not meant to be visible, it would be better " + "to remove it from the SVG file.");
              if (!dart.test(event.isSelfClosing)) {
                this.depth = dart.notNull(this.depth) + 1;
                this[_discardSubtree]();
              }
              continue;
            }
            this[_currentAttributes] = event.attributes;
            this[_currentStartElement] = event;
            this.depth = dart.notNull(this.depth) + 1;
            isSelfClosing = event.isSelfClosing;
          }
          yield event;
          if (dart.test(isSelfClosing) || XmlEndElementEventL().is(event)) {
            this.depth = dart.notNull(this.depth) - 1;
            if (!(dart.notNull(this.depth) >= 0)) dart.assertFailed(null, L1, 767, 16, "depth >= 0");
            this[_currentAttributes] = JSArrayOfXmlEventAttributeL().of([]);
            this[_currentStartElement] = null;
          }
          if (dart.notNull(this.depth) < dart.notNull(subtreeStartDepth)) {
            return;
          }
        }
      }).bind(this));
    }
    parse() {
      return async.async(DrawableRootL(), (function* parse() {
        let t0;
        for (let event of this[_readSubtree]()) {
          if (XmlStartElementEventL().is(event)) {
            if (dart.test(this.startElement(event))) {
              continue;
            }
            let parseFunc = parser_state._svgElementParsers[$_get](event.name);
            yield (t0 = parseFunc, t0 == null ? null : t0(this));
            if (parseFunc == null) {
              if (!dart.test(event.isSelfClosing)) {
                this[_discardSubtree]();
              }
              if (!dart.test(dart.fn(() => {
                this.unhandledElement(event);
                return true;
              }, VoidToboolL())())) dart.assertFailed(null, L1, 790, 18, "() {\n            unhandledElement(event);\n            return true;\n          }()");
            }
          } else if (XmlEndElementEventL().is(event)) {
            this.endElement(event);
          }
        }
        return this[_root];
      }).bind(this));
    }
    get attributes() {
      return this[_currentAttributes];
    }
    attribute(name, opts) {
      let def = opts && 'def' in opts ? opts.def : null;
      let namespace = opts && 'namespace' in opts ? opts.namespace : null;
      return xml.getAttribute(this.attributes, name, {def: def, namespace: namespace});
    }
    get currentGroup() {
      if (!(this[_parentDrawables] != null)) dart.assertFailed(null, L1, 811, 12, "_parentDrawables != null");
      if (!dart.test(this[_parentDrawables][$isNotEmpty])) dart.assertFailed(null, L1, 812, 12, "_parentDrawables.isNotEmpty");
      return this[_parentDrawables][$last].drawable;
    }
    get rootBounds() {
      if (!(this[_root] != null)) dart.assertFailed("Cannot get rootBounds with null root", L1, 818, 12, "_root != null");
      if (!(this[_root].viewport != null)) dart.assertFailed(null, L1, 819, 12, "_root.viewport != null");
      return this[_root].viewport.viewBoxRect;
    }
    checkForIri(drawable) {
      let iri = xml_parsers.buildUrlIri(this.attributes);
      if (iri !== "url(#)") {
        this[_definitions].addDrawable(iri, drawable);
        return true;
      }
      return false;
    }
    addGroup(event, drawable) {
      this[_parentDrawables].addLast(new parser_state._SvgGroupTuple.new(event.name, drawable));
      this.checkForIri(drawable);
    }
    addShape(event) {
      let t0;
      let pathFunc = parser_state._svgPathFuncs[$_get](event.name);
      if (pathFunc == null) {
        return false;
      }
      let parent = this[_parentDrawables][$last].drawable;
      let parentStyle = parent.style;
      let path = pathFunc(this.attributes);
      let drawable = new vector_drawable.DrawableShape.new(xml.getAttribute(this.attributes, "id", {def: ""}), path, xml_parsers.parseStyle(this.attributes, this[_definitions], path.getBounds(), parentStyle, {defaultFillColor: colors$.colorBlack}), {transform: (t0 = parsers.parseTransform(xml.getAttribute(this.attributes, "transform")), t0 == null ? null : t0.storage)});
      let isIri = this.checkForIri(drawable);
      if (!dart.test(this[_inDefs]) || !dart.test(isIri)) {
        parent.children[$add](drawable);
      }
      return true;
    }
    startElement(event) {
      if (event.name === "defs") {
        this[_inDefs] = !dart.test(event.isSelfClosing);
        return true;
      }
      return this.addShape(event);
    }
    endElement(event) {
      if (event.name == this[_parentDrawables][$last].name) {
        this[_parentDrawables].removeLast();
      }
      if (event.name === "defs") {
        this[_inDefs] = false;
      }
    }
    unhandledElement(event) {
      if (event.name === "style") {
        assertions.FlutterError.reportError(new assertions.FlutterErrorDetails.new({exception: new core.UnimplementedError.new("The <style> element is not implemented in this library."), informationCollector: dart.fn(() => new (SyncIterableOfDiagnosticsNodeL()).new((function*() {
            yield new assertions.ErrorDescription.new("Style elements are not supported by this library and the requested SVG may not " + "render as intended.");
            yield new assertions.ErrorHint.new("If possible, ensure the SVG uses inline styles and/or attributes (which are " + "supported), or use a preprocessing utility such as svgcleaner to inline the " + "styles for you.");
            yield new assertions.ErrorDescription.new("");
            yield new (DiagnosticsPropertyOfStringL()).new("Picture key", this[_key$]);
          }).bind(this)), VoidToIterableLOfDiagnosticsNodeL()), library: "SVG", context: new assertions.ErrorDescription.new("in parseSvgElement")}));
      } else if (dart.test(parser_state._unhandledElements.add(event.name))) {
        core.print("unhandled element " + dart.str(event.name) + "; Picture key: " + dart.str(this[_key$]));
      }
    }
  };
  (parser_state.SvgParserState.new = function(events, _key) {
    this[_definitions] = new vector_drawable.DrawableDefinitionServer.new();
    this[_parentDrawables] = new (ListQueueOf_SvgGroupTupleL()).new(10);
    this[_root] = null;
    this[_inDefs] = false;
    this[_currentAttributes] = null;
    this[_currentStartElement] = null;
    this[depth] = 0;
    this[_key$] = _key;
    if (!(events != null)) dart.assertFailed(null, L1, 699, 16, "events != null");
    this[_eventIterator] = events[$iterator];
    ;
  }).prototype = parser_state.SvgParserState.prototype;
  dart.addTypeTests(parser_state.SvgParserState);
  dart.addTypeCaches(parser_state.SvgParserState);
  dart.setMethodSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getMethods(parser_state.SvgParserState.__proto__),
    [_discardSubtree]: dart.fnType(dart.void, []),
    [_readSubtree]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(event.XmlEvent))), []),
    parse: dart.fnType(dart.legacy(async.Future$(dart.legacy(vector_drawable.DrawableRoot))), []),
    attribute: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)], {def: dart.legacy(core.String), namespace: dart.legacy(core.String)}, {}),
    checkForIri: dart.fnType(dart.legacy(core.bool), [dart.legacy(vector_drawable.DrawableStyleable)]),
    addGroup: dart.fnType(dart.void, [dart.legacy(start_element.XmlStartElementEvent), dart.legacy(vector_drawable.DrawableParent)]),
    addShape: dart.fnType(dart.legacy(core.bool), [dart.legacy(start_element.XmlStartElementEvent)]),
    startElement: dart.fnType(dart.legacy(core.bool), [dart.legacy(start_element.XmlStartElementEvent)]),
    endElement: dart.fnType(dart.void, [dart.legacy(end_element.XmlEndElementEvent)]),
    unhandledElement: dart.fnType(dart.void, [dart.legacy(start_element.XmlStartElementEvent)])
  }));
  dart.setGetterSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getGetters(parser_state.SvgParserState.__proto__),
    attributes: dart.legacy(core.List$(dart.legacy(event_attribute.XmlEventAttribute))),
    currentGroup: dart.legacy(vector_drawable.DrawableParent),
    rootBounds: dart.legacy(ui.Rect)
  }));
  dart.setLibraryUri(parser_state.SvgParserState, L0);
  dart.setFieldSignature(parser_state.SvgParserState, () => ({
    __proto__: dart.getFields(parser_state.SvgParserState.__proto__),
    [_eventIterator]: dart.finalFieldType(dart.legacy(core.Iterator$(dart.legacy(event.XmlEvent)))),
    [_key$]: dart.finalFieldType(dart.legacy(core.String)),
    [_definitions]: dart.finalFieldType(dart.legacy(vector_drawable.DrawableDefinitionServer)),
    [_parentDrawables]: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(parser_state._SvgGroupTuple)))),
    [_root]: dart.fieldType(dart.legacy(vector_drawable.DrawableRoot)),
    [_inDefs]: dart.fieldType(dart.legacy(core.bool)),
    [_currentAttributes]: dart.fieldType(dart.legacy(core.List$(dart.legacy(event_attribute.XmlEventAttribute)))),
    [_currentStartElement]: dart.fieldType(dart.legacy(start_element.XmlStartElementEvent)),
    depth: dart.fieldType(dart.legacy(core.int))
  }));
  parser_state._parseCurrentOffset = function _parseCurrentOffset(parserState, lastOffset) {
    let t0, t0$, t0$0, t0$1;
    let x = parserState.attribute("x", {def: null});
    let y = parserState.attribute("y", {def: null});
    return new ui.Offset.new(x != null ? numbers.parseDouble(x) : dart.notNull(numbers.parseDouble(parserState.attribute("dx", {def: "0"}))) + dart.notNull((t0$ = (t0 = lastOffset, t0 == null ? null : t0.dx), t0$ == null ? 0 : t0$)), y != null ? numbers.parseDouble(y) : dart.notNull(numbers.parseDouble(parserState.attribute("dy", {def: "0"}))) + dart.notNull((t0$1 = (t0$0 = lastOffset, t0$0 == null ? null : t0$0.dy), t0$1 == null ? 0 : t0$1)));
  };
  var C1;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  var C8;
  var C9;
  var C0;
  var C11;
  var C12;
  var C13;
  var C14;
  var C15;
  var C16;
  var C17;
  var C10;
  dart.defineLazy(parser_state, {
    /*parser_state._unhandledElements*/get _unhandledElements() {
      return LinkedHashSetOfStringL().from(["title", "desc"]);
    },
    /*parser_state._svgElementParsers*/get _svgElementParsers() {
      return C0 || CT.C0;
    },
    /*parser_state._svgPathFuncs*/get _svgPathFuncs() {
      return C10 || CT.C10;
    }
  }, true);
  dart.trackLibraries("packages/flutter_svg/src/svg/parser_state.dart", {
    "package:flutter_svg/src/svg/parser_state.dart": parser_state
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["parser_state.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/flutter_svg/src/svg/parser_state.dart.lib.js"}');
  // Exports:
  return {
    src__svg__parser_state: parser_state
  };
}));

//# sourceMappingURL=parser_state.dart.lib.js.map
