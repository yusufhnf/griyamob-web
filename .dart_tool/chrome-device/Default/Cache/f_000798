define(['dart_sdk', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/material/constants.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/semantics/semantics_event.dart', 'packages/flutter/src/gestures/events.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/scheduler/ticker.dart'], (function load__packages__flutter__src__material__toggleable_dart(dart_sdk, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__material__constants$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__semantics__semantics_event$46dart, packages__flutter__src__gestures__events$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__scheduler__ticker$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const constants = packages__flutter__src__material__constants$46dart.src__material__constants;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const semantics_event = packages__flutter__src__semantics__semantics_event$46dart.src__semantics__semantics_event;
  const events = packages__flutter__src__gestures__events$46dart.src__gestures__events;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const ticker = packages__flutter__src__scheduler__ticker$46dart.src__scheduler__ticker;
  var toggleable = Object.create(dart.library);
  var TweenOfdouble = () => (TweenOfdouble = dart.constFn(tween.Tween$(core.double)))();
  const CT = Object.create(null);
  var L0 = "file:///C:/src/flutter/packages/flutter/lib/src/material/toggleable.dart";
  var L1 = "package:flutter/src/material/toggleable.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [_name]: "AnimationStatus.forward",
        index: 1
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [_name]: "AnimationStatus.completed",
        index: 3
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [_name]: "AnimationStatus.reverse",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: animation.AnimationStatus.prototype,
        [_name]: "AnimationStatus.dismissed",
        index: 0
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: semantics_event.TapSemanticEvent.prototype,
        [SemanticsEvent_type]: "tap"
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 200000
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    }
  }, false);
  var __RenderToggleable__positionController = dart.privateName(toggleable, "_#RenderToggleable#_positionController");
  var __RenderToggleable__positionController_isSet = dart.privateName(toggleable, "_#RenderToggleable#_positionController#isSet");
  var __RenderToggleable__position = dart.privateName(toggleable, "_#RenderToggleable#_position");
  var __RenderToggleable__position_isSet = dart.privateName(toggleable, "_#RenderToggleable#_position#isSet");
  var __RenderToggleable__reactionController = dart.privateName(toggleable, "_#RenderToggleable#_reactionController");
  var __RenderToggleable__reactionController_isSet = dart.privateName(toggleable, "_#RenderToggleable#_reactionController#isSet");
  var __RenderToggleable__reaction = dart.privateName(toggleable, "_#RenderToggleable#_reaction");
  var __RenderToggleable__reaction_isSet = dart.privateName(toggleable, "_#RenderToggleable#_reaction#isSet");
  var __RenderToggleable__reactionFocusFadeController = dart.privateName(toggleable, "_#RenderToggleable#_reactionFocusFadeController");
  var __RenderToggleable__reactionFocusFadeController_isSet = dart.privateName(toggleable, "_#RenderToggleable#_reactionFocusFadeController#isSet");
  var __RenderToggleable__reactionFocusFade = dart.privateName(toggleable, "_#RenderToggleable#_reactionFocusFade");
  var __RenderToggleable__reactionFocusFade_isSet = dart.privateName(toggleable, "_#RenderToggleable#_reactionFocusFade#isSet");
  var __RenderToggleable__reactionHoverFadeController = dart.privateName(toggleable, "_#RenderToggleable#_reactionHoverFadeController");
  var __RenderToggleable__reactionHoverFadeController_isSet = dart.privateName(toggleable, "_#RenderToggleable#_reactionHoverFadeController#isSet");
  var __RenderToggleable__reactionHoverFade = dart.privateName(toggleable, "_#RenderToggleable#_reactionHoverFade");
  var __RenderToggleable__reactionHoverFade_isSet = dart.privateName(toggleable, "_#RenderToggleable#_reactionHoverFade#isSet");
  var _reactionColor = dart.privateName(toggleable, "_reactionColor");
  var __RenderToggleable__tap = dart.privateName(toggleable, "_#RenderToggleable#_tap");
  var __RenderToggleable__tap_isSet = dart.privateName(toggleable, "_#RenderToggleable#_tap#isSet");
  var _downPosition = dart.privateName(toggleable, "_downPosition");
  var _value = dart.privateName(toggleable, "_value");
  var _tristate = dart.privateName(toggleable, "_tristate");
  var _activeColor = dart.privateName(toggleable, "_activeColor");
  var _inactiveColor = dart.privateName(toggleable, "_inactiveColor");
  var _hoverColor = dart.privateName(toggleable, "_hoverColor");
  var _focusColor = dart.privateName(toggleable, "_focusColor");
  var _splashRadius = dart.privateName(toggleable, "_splashRadius");
  var _onChanged = dart.privateName(toggleable, "_onChanged");
  var _hasFocus = dart.privateName(toggleable, "_hasFocus");
  var _hovering = dart.privateName(toggleable, "_hovering");
  var _vsync = dart.privateName(toggleable, "_vsync");
  var _tap = dart.privateName(toggleable, "_tap");
  var _handleTapDown = dart.privateName(toggleable, "_handleTapDown");
  var _handleTap = dart.privateName(toggleable, "_handleTap");
  var _handleTapUp = dart.privateName(toggleable, "_handleTapUp");
  var _handleTapCancel = dart.privateName(toggleable, "_handleTapCancel");
  var _positionController = dart.privateName(toggleable, "_positionController");
  var _position = dart.privateName(toggleable, "_position");
  var _reactionController = dart.privateName(toggleable, "_reactionController");
  var _reaction = dart.privateName(toggleable, "_reaction");
  var _reactionHoverFadeController = dart.privateName(toggleable, "_reactionHoverFadeController");
  var _reactionHoverFade = dart.privateName(toggleable, "_reactionHoverFade");
  var _reactionFocusFadeController = dart.privateName(toggleable, "_reactionFocusFadeController");
  var _reactionFocusFade = dart.privateName(toggleable, "_reactionFocusFade");
  var _name = dart.privateName(animation, "_name");
  var C0;
  var C1;
  var C2;
  var C3;
  var SemanticsEvent_type = dart.privateName(semantics_event, "SemanticsEvent.type");
  var C4;
  toggleable.RenderToggleable = class RenderToggleable extends proxy_box.RenderConstrainedBox {
    get positionController() {
      return this[_positionController];
    }
    get [_positionController]() {
      let t0;
      return dart.test(this[__RenderToggleable__positionController_isSet]) ? (t0 = this[__RenderToggleable__positionController], t0) : dart.throw(new _internal.LateError.fieldNI("_positionController"));
    }
    set [_positionController](t0) {
      if (t0 == null) dart.nullFailed(L0, 110, 28, "null");
      this[__RenderToggleable__positionController_isSet] = true;
      this[__RenderToggleable__positionController] = t0;
    }
    get position() {
      return this[_position];
    }
    get [_position]() {
      let t1;
      return dart.test(this[__RenderToggleable__position_isSet]) ? (t1 = this[__RenderToggleable__position], t1) : dart.throw(new _internal.LateError.fieldNI("_position"));
    }
    set [_position](t1) {
      if (t1 == null) dart.nullFailed(L0, 121, 24, "null");
      this[__RenderToggleable__position_isSet] = true;
      this[__RenderToggleable__position] = t1;
    }
    get reactionController() {
      return this[_reactionController];
    }
    get [_reactionController]() {
      let t2;
      return dart.test(this[__RenderToggleable__reactionController_isSet]) ? (t2 = this[__RenderToggleable__reactionController], t2) : dart.throw(new _internal.LateError.fieldNI("_reactionController"));
    }
    set [_reactionController](t2) {
      if (t2 == null) dart.nullFailed(L0, 132, 28, "null");
      this[__RenderToggleable__reactionController_isSet] = true;
      this[__RenderToggleable__reactionController] = t2;
    }
    get [_reaction]() {
      let t3;
      return dart.test(this[__RenderToggleable__reaction_isSet]) ? (t3 = this[__RenderToggleable__reaction], t3) : dart.throw(new _internal.LateError.fieldNI("_reaction"));
    }
    set [_reaction](t3) {
      if (t3 == null) dart.nullFailed(L0, 133, 26, "null");
      this[__RenderToggleable__reaction_isSet] = true;
      this[__RenderToggleable__reaction] = t3;
    }
    get reactionFocusFadeController() {
      return this[_reactionFocusFadeController];
    }
    get [_reactionFocusFadeController]() {
      let t4;
      return dart.test(this[__RenderToggleable__reactionFocusFadeController_isSet]) ? (t4 = this[__RenderToggleable__reactionFocusFadeController], t4) : dart.throw(new _internal.LateError.fieldNI("_reactionFocusFadeController"));
    }
    set [_reactionFocusFadeController](t4) {
      if (t4 == null) dart.nullFailed(L0, 146, 28, "null");
      this[__RenderToggleable__reactionFocusFadeController_isSet] = true;
      this[__RenderToggleable__reactionFocusFadeController] = t4;
    }
    get [_reactionFocusFade]() {
      let t5;
      return dart.test(this[__RenderToggleable__reactionFocusFade_isSet]) ? (t5 = this[__RenderToggleable__reactionFocusFade], t5) : dart.throw(new _internal.LateError.fieldNI("_reactionFocusFade"));
    }
    set [_reactionFocusFade](t5) {
      if (t5 == null) dart.nullFailed(L0, 147, 26, "null");
      this[__RenderToggleable__reactionFocusFade_isSet] = true;
      this[__RenderToggleable__reactionFocusFade] = t5;
    }
    get reactionHoverFadeController() {
      return this[_reactionHoverFadeController];
    }
    get [_reactionHoverFadeController]() {
      let t6;
      return dart.test(this[__RenderToggleable__reactionHoverFadeController_isSet]) ? (t6 = this[__RenderToggleable__reactionHoverFadeController], t6) : dart.throw(new _internal.LateError.fieldNI("_reactionHoverFadeController"));
    }
    set [_reactionHoverFadeController](t6) {
      if (t6 == null) dart.nullFailed(L0, 160, 28, "null");
      this[__RenderToggleable__reactionHoverFadeController_isSet] = true;
      this[__RenderToggleable__reactionHoverFadeController] = t6;
    }
    set [_reactionHoverFade](t7) {
      if (t7 == null) dart.nullFailed(L0, 161, 26, "null");
      this[__RenderToggleable__reactionHoverFade_isSet] = true;
      this[__RenderToggleable__reactionHoverFade] = t7;
    }
    get [_reactionHoverFade]() {
      let t8;
      return dart.test(this[__RenderToggleable__reactionHoverFade_isSet]) ? (t8 = this[__RenderToggleable__reactionHoverFade], t8) : dart.throw(new _internal.LateError.fieldNI("_reactionHoverFade"));
    }
    get hasFocus() {
      return this[_hasFocus];
    }
    set hasFocus(value) {
      if (value == null) dart.nullFailed(L0, 166, 21, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 167, 12, "value != null");
      if (dart.equals(value, this[_hasFocus])) return;
      this[_hasFocus] = value;
      if (dart.test(this[_hasFocus])) {
        this[_reactionFocusFadeController].forward();
      } else {
        this[_reactionFocusFadeController].reverse();
      }
      this.markNeedsPaint();
    }
    get hovering() {
      return this[_hovering];
    }
    set hovering(value) {
      if (value == null) dart.nullFailed(L0, 182, 21, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 183, 12, "value != null");
      if (dart.equals(value, this[_hovering])) return;
      this[_hovering] = value;
      if (dart.test(this[_hovering])) {
        this[_reactionHoverFadeController].forward();
      } else {
        this[_reactionHoverFadeController].reverse();
      }
      this.markNeedsPaint();
    }
    get vsync() {
      return this[_vsync];
    }
    set vsync(value) {
      if (value == null) dart.nullFailed(L0, 198, 28, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 199, 12, "value != null");
      if (dart.equals(value, this[_vsync])) return;
      this[_vsync] = value;
      this.positionController.resync(this.vsync);
      this.reactionController.resync(this.vsync);
    }
    get value() {
      return this[_value];
    }
    set value(value) {
      let t8;
      if (!(dart.test(this.tristate) || value != null)) dart.assertFailed(null, L0, 219, 12, "tristate || value != null");
      if (dart.equals(value, this[_value])) return;
      this[_value] = value;
      this.markNeedsSemanticsUpdate();
      t8 = this[_position];
      (() => {
        t8.curve = curves.Curves.easeIn;
        t8.reverseCurve = curves.Curves.easeOut;
        return t8;
      })();
      if (dart.test(this.tristate)) {
        switch (this[_positionController].status) {
          case C0 || CT.C0:
          case C1 || CT.C1:
          {
            this[_positionController].reverse();
            break;
          }
          default:
          {
            this[_positionController].forward();
          }
        }
      } else {
        if (dart.equals(value, true))
          this[_positionController].forward();
        else
          this[_positionController].reverse();
      }
    }
    get tristate() {
      return this[_tristate];
    }
    set tristate(value) {
      if (value == null) dart.nullFailed(L0, 251, 21, "value");
      if (!(this.tristate != null)) dart.assertFailed(null, L0, 252, 12, "tristate != null");
      if (dart.equals(value, this[_tristate])) return;
      this[_tristate] = value;
      this.markNeedsSemanticsUpdate();
    }
    get activeColor() {
      return this[_activeColor];
    }
    set activeColor(value) {
      if (value == null) dart.nullFailed(L0, 264, 25, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 265, 12, "value != null");
      if (dart.equals(value, this[_activeColor])) return;
      this[_activeColor] = value;
      this.markNeedsPaint();
    }
    get inactiveColor() {
      return this[_inactiveColor];
    }
    set inactiveColor(value) {
      if (value == null) dart.nullFailed(L0, 277, 27, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 278, 12, "value != null");
      if (dart.equals(value, this[_inactiveColor])) return;
      this[_inactiveColor] = value;
      this.markNeedsPaint();
    }
    get hoverColor() {
      return this[_hoverColor];
    }
    set hoverColor(value) {
      if (value == null) dart.nullFailed(L0, 293, 24, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 294, 12, "value != null");
      if (dart.equals(value, this[_hoverColor])) return;
      this[_hoverColor] = value;
      this.markNeedsPaint();
    }
    get focusColor() {
      return this[_focusColor];
    }
    set focusColor(value) {
      if (value == null) dart.nullFailed(L0, 309, 24, "value");
      if (!(value != null)) dart.assertFailed(null, L0, 310, 12, "value != null");
      if (dart.equals(value, this[_focusColor])) return;
      this[_focusColor] = value;
      this.markNeedsPaint();
    }
    get reactionColor() {
      return this[_reactionColor];
    }
    set reactionColor(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 326, 12, "value != null");
      if (dart.equals(value, this[_reactionColor])) return;
      this[_reactionColor] = value;
      this.markNeedsPaint();
    }
    get splashRadius() {
      return this[_splashRadius];
    }
    set splashRadius(value) {
      if (value == null) dart.nullFailed(L0, 336, 27, "value");
      if (value == this[_splashRadius]) return;
      this[_splashRadius] = value;
      this.markNeedsPaint();
    }
    get onChanged() {
      return this[_onChanged];
    }
    set onChanged(value) {
      if (dart.equals(value, this[_onChanged])) return;
      let wasInteractive = this.isInteractive;
      this[_onChanged] = value;
      if (!dart.equals(wasInteractive, this.isInteractive)) {
        this.markNeedsPaint();
        this.markNeedsSemanticsUpdate();
      }
    }
    get isInteractive() {
      return this.onChanged != null;
    }
    set [_tap](t8) {
      if (t8 == null) dart.nullFailed(L0, 373, 29, "null");
      this[__RenderToggleable__tap_isSet] = true;
      this[__RenderToggleable__tap] = t8;
    }
    get [_tap]() {
      let t9;
      return dart.test(this[__RenderToggleable__tap_isSet]) ? (t9 = this[__RenderToggleable__tap], t9) : dart.throw(new _internal.LateError.fieldNI("_tap"));
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      if (owner == null) dart.nullFailed(L0, 377, 29, "owner");
      super.attach(owner);
      if (dart.equals(this.value, false))
        this[_positionController].reverse();
      else
        this[_positionController].forward();
      if (dart.test(this.isInteractive)) {
        switch (this[_reactionController].status) {
          case C0 || CT.C0:
          {
            this[_reactionController].forward();
            break;
          }
          case C2 || CT.C2:
          {
            this[_reactionController].reverse();
            break;
          }
          case C3 || CT.C3:
          case C1 || CT.C1:
          {
            break;
          }
          default:
          {
            dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
          }
        }
      }
    }
    detach() {
      this[_positionController].stop();
      this[_reactionController].stop();
      this[_reactionHoverFadeController].stop();
      this[_reactionFocusFadeController].stop();
      super.detach();
    }
    [_handleTapDown](details) {
      if (details == null) dart.nullFailed(L0, 408, 38, "details");
      if (dart.test(this.isInteractive)) {
        this[_downPosition] = this.globalToLocal(details.globalPosition);
        this[_reactionController].forward();
      }
    }
    [_handleTap]() {
      if (!dart.test(this.isInteractive)) return;
      switch (this.value) {
        case false:
        {
          dart.nullCheck(this.onChanged)(true);
          break;
        }
        case true:
        {
          dart.nullCheck(this.onChanged)(dart.test(this.tristate) ? null : false);
          break;
        }
        case null:
        {
          dart.nullCheck(this.onChanged)(false);
          break;
        }
      }
      this.sendSemanticsEvent(C4 || CT.C4);
    }
    [_handleTapUp](details) {
      if (details == null) dart.nullFailed(L0, 432, 34, "details");
      this[_downPosition] = null;
      if (dart.test(this.isInteractive)) this[_reactionController].reverse();
    }
    [_handleTapCancel]() {
      this[_downPosition] = null;
      if (dart.test(this.isInteractive)) this[_reactionController].reverse();
    }
    hitTestSelf(position) {
      if (position == null) dart.nullFailed(L0, 445, 27, "position");
      return true;
    }
    handleEvent(event, entry) {
      if (event == null) dart.nullFailed(L0, 448, 33, "event");
      box.BoxHitTestEntry.as(entry);
      if (entry == null) dart.nullFailed(L0, 448, 56, "entry");
      if (!dart.test(this.debugHandleEvent(event, entry))) dart.assertFailed(null, L0, 449, 12, "debugHandleEvent(event, entry)");
      if (events.PointerDownEvent.is(event) && dart.test(this.isInteractive)) this[_tap].addPointer(event);
    }
    paintRadialReaction(canvas, offset, origin) {
      let t9, t9$;
      if (canvas == null) dart.nullFailed(L0, 460, 35, "canvas");
      if (offset == null) dart.nullFailed(L0, 460, 50, "offset");
      if (origin == null) dart.nullFailed(L0, 460, 65, "origin");
      if (!dart.test(this[_reaction].isDismissed) || !dart.test(this[_reactionFocusFade].isDismissed) || !dart.test(this[_reactionHoverFade].isDismissed)) {
        let reactionPaint = (t9 = ui.Paint.new(), (() => {
          t9.color = dart.nullCheck(ui.Color.lerp(ui.Color.lerp(this.activeColor.withAlpha(31), this.hoverColor, this[_reactionHoverFade].value), this.focusColor, this[_reactionFocusFade].value));
          return t9;
        })());
        let center = dart.nullCheck(ui.Offset.lerp((t9$ = this[_downPosition], t9$ == null ? origin : t9$), origin, this[_reaction].value));
        let radialReactionRadiusTween = new (TweenOfdouble()).new({begin: 0.0, end: this.splashRadius});
        let reactionRadius = dart.test(this.hasFocus) || dart.test(this.hovering) ? this.splashRadius : radialReactionRadiusTween.evaluate(this[_reaction]);
        if (dart.notNull(reactionRadius) > 0.0) {
          canvas.drawCircle(center['+'](offset), reactionRadius, reactionPaint);
        }
      }
    }
    describeSemanticsConfiguration(config) {
      if (config == null) dart.nullFailed(L0, 483, 62, "config");
      super.describeSemanticsConfiguration(config);
      config.isEnabled = this.isInteractive;
      if (dart.test(this.isInteractive)) config.onTap = dart.bind(this, _handleTap);
    }
    debugFillProperties(properties) {
      if (properties == null) dart.nullFailed(L0, 492, 56, "properties");
      super.debugFillProperties(properties);
      properties.add(new diagnostics.FlagProperty.new("value", {value: this.value, ifTrue: "checked", ifFalse: "unchecked", showName: true}));
      properties.add(new diagnostics.FlagProperty.new("isInteractive", {value: this.isInteractive, ifTrue: "enabled", ifFalse: "disabled", defaultValue: true}));
    }
  };
  (toggleable.RenderToggleable.new = function(opts) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
    let value = opts && 'value' in opts ? opts.value : null;
    let tristate = opts && 'tristate' in opts ? opts.tristate : false;
    if (tristate == null) dart.nullFailed(L0, 31, 10, "tristate");
    let activeColor = opts && 'activeColor' in opts ? opts.activeColor : null;
    if (activeColor == null) dart.nullFailed(L0, 32, 20, "activeColor");
    let inactiveColor = opts && 'inactiveColor' in opts ? opts.inactiveColor : null;
    if (inactiveColor == null) dart.nullFailed(L0, 33, 20, "inactiveColor");
    let hoverColor = opts && 'hoverColor' in opts ? opts.hoverColor : null;
    let focusColor = opts && 'focusColor' in opts ? opts.focusColor : null;
    let splashRadius = opts && 'splashRadius' in opts ? opts.splashRadius : null;
    if (splashRadius == null) dart.nullFailed(L0, 36, 21, "splashRadius");
    let onChanged = opts && 'onChanged' in opts ? opts.onChanged : null;
    let additionalConstraints = opts && 'additionalConstraints' in opts ? opts.additionalConstraints : null;
    if (additionalConstraints == null) dart.nullFailed(L0, 38, 29, "additionalConstraints");
    let vsync = opts && 'vsync' in opts ? opts.vsync : null;
    if (vsync == null) dart.nullFailed(L0, 39, 29, "vsync");
    let hasFocus = opts && 'hasFocus' in opts ? opts.hasFocus : false;
    if (hasFocus == null) dart.nullFailed(L0, 40, 10, "hasFocus");
    let hovering = opts && 'hovering' in opts ? opts.hovering : false;
    if (hovering == null) dart.nullFailed(L0, 41, 10, "hovering");
    this[__RenderToggleable__positionController] = null;
    this[__RenderToggleable__positionController_isSet] = false;
    this[__RenderToggleable__position] = null;
    this[__RenderToggleable__position_isSet] = false;
    this[__RenderToggleable__reactionController] = null;
    this[__RenderToggleable__reactionController_isSet] = false;
    this[__RenderToggleable__reaction] = null;
    this[__RenderToggleable__reaction_isSet] = false;
    this[__RenderToggleable__reactionFocusFadeController] = null;
    this[__RenderToggleable__reactionFocusFadeController_isSet] = false;
    this[__RenderToggleable__reactionFocusFade] = null;
    this[__RenderToggleable__reactionFocusFade_isSet] = false;
    this[__RenderToggleable__reactionHoverFadeController] = null;
    this[__RenderToggleable__reactionHoverFadeController_isSet] = false;
    this[__RenderToggleable__reactionHoverFade] = null;
    this[__RenderToggleable__reactionHoverFade_isSet] = false;
    this[_reactionColor] = null;
    this[__RenderToggleable__tap] = null;
    this[__RenderToggleable__tap_isSet] = false;
    this[_downPosition] = null;
    if (!(tristate != null)) dart.assertFailed(null, L0, 42, 15, "tristate != null");
    if (!(dart.test(tristate) || value != null)) dart.assertFailed(null, L0, 43, 15, "tristate || value != null");
    if (!(activeColor != null)) dart.assertFailed(null, L0, 44, 15, "activeColor != null");
    if (!(inactiveColor != null)) dart.assertFailed(null, L0, 45, 15, "inactiveColor != null");
    if (!(vsync != null)) dart.assertFailed(null, L0, 46, 15, "vsync != null");
    this[_value] = value;
    this[_tristate] = tristate;
    this[_activeColor] = activeColor;
    this[_inactiveColor] = inactiveColor;
    this[_hoverColor] = (t0 = hoverColor, t0 == null ? activeColor.withAlpha(31) : t0);
    this[_focusColor] = (t0$ = focusColor, t0$ == null ? activeColor.withAlpha(31) : t0$);
    this[_splashRadius] = splashRadius;
    this[_onChanged] = onChanged;
    this[_hasFocus] = hasFocus;
    this[_hovering] = hovering;
    this[_vsync] = vsync;
    toggleable.RenderToggleable.__proto__.new.call(this, {additionalConstraints: additionalConstraints});
    this[_tap] = (t0$0 = new tap.TapGestureRecognizer.new(), (() => {
      t0$0.onTapDown = dart.bind(this, _handleTapDown);
      t0$0.onTap = dart.bind(this, _handleTap);
      t0$0.onTapUp = dart.bind(this, _handleTapUp);
      t0$0.onTapCancel = dart.bind(this, _handleTapCancel);
      return t0$0;
    })());
    this[_positionController] = new animation_controller.AnimationController.new({duration: toggleable._kToggleDuration, value: dart.equals(value, false) ? 0.0 : 1.0, vsync: vsync});
    this[_position] = (t0$1 = new animations.CurvedAnimation.new({parent: this[_positionController], curve: curves.Curves.linear}), (() => {
      t0$1.addListener(dart.bind(this, 'markNeedsPaint'));
      return t0$1;
    })());
    this[_reactionController] = new animation_controller.AnimationController.new({duration: constants.kRadialReactionDuration, vsync: vsync});
    this[_reaction] = (t0$2 = new animations.CurvedAnimation.new({parent: this[_reactionController], curve: curves.Curves.fastOutSlowIn}), (() => {
      t0$2.addListener(dart.bind(this, 'markNeedsPaint'));
      return t0$2;
    })());
    this[_reactionHoverFadeController] = new animation_controller.AnimationController.new({duration: toggleable._kReactionFadeDuration, value: dart.test(hovering) || dart.test(hasFocus) ? 1.0 : 0.0, vsync: vsync});
    this[_reactionHoverFade] = (t0$3 = new animations.CurvedAnimation.new({parent: this[_reactionHoverFadeController], curve: curves.Curves.fastOutSlowIn}), (() => {
      t0$3.addListener(dart.bind(this, 'markNeedsPaint'));
      return t0$3;
    })());
    this[_reactionFocusFadeController] = new animation_controller.AnimationController.new({duration: toggleable._kReactionFadeDuration, value: dart.test(hovering) || dart.test(hasFocus) ? 1.0 : 0.0, vsync: vsync});
    this[_reactionFocusFade] = (t0$4 = new animations.CurvedAnimation.new({parent: this[_reactionFocusFadeController], curve: curves.Curves.fastOutSlowIn}), (() => {
      t0$4.addListener(dart.bind(this, 'markNeedsPaint'));
      return t0$4;
    })());
  }).prototype = toggleable.RenderToggleable.prototype;
  dart.addTypeTests(toggleable.RenderToggleable);
  dart.addTypeCaches(toggleable.RenderToggleable);
  dart.setMethodSignature(toggleable.RenderToggleable, () => ({
    __proto__: dart.getMethods(toggleable.RenderToggleable.__proto__),
    [_handleTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
    [_handleTap]: dart.fnType(dart.void, []),
    [_handleTapUp]: dart.fnType(dart.void, [tap.TapUpDetails]),
    [_handleTapCancel]: dart.fnType(dart.void, []),
    paintRadialReaction: dart.fnType(dart.void, [ui.Canvas, ui.Offset, ui.Offset])
  }));
  dart.setGetterSignature(toggleable.RenderToggleable, () => ({
    __proto__: dart.getGetters(toggleable.RenderToggleable.__proto__),
    positionController: animation_controller.AnimationController,
    [_positionController]: animation_controller.AnimationController,
    position: animations.CurvedAnimation,
    [_position]: animations.CurvedAnimation,
    reactionController: animation_controller.AnimationController,
    [_reactionController]: animation_controller.AnimationController,
    [_reaction]: animation.Animation$(core.double),
    reactionFocusFadeController: animation_controller.AnimationController,
    [_reactionFocusFadeController]: animation_controller.AnimationController,
    [_reactionFocusFade]: animation.Animation$(core.double),
    reactionHoverFadeController: animation_controller.AnimationController,
    [_reactionHoverFadeController]: animation_controller.AnimationController,
    [_reactionHoverFade]: animation.Animation$(core.double),
    hasFocus: core.bool,
    hovering: core.bool,
    vsync: ticker.TickerProvider,
    value: dart.nullable(core.bool),
    tristate: core.bool,
    activeColor: ui.Color,
    inactiveColor: ui.Color,
    hoverColor: ui.Color,
    focusColor: ui.Color,
    reactionColor: dart.nullable(ui.Color),
    splashRadius: core.double,
    onChanged: dart.nullable(dart.fnType(dart.void, [dart.nullable(core.bool)])),
    isInteractive: core.bool,
    [_tap]: tap.TapGestureRecognizer
  }));
  dart.setSetterSignature(toggleable.RenderToggleable, () => ({
    __proto__: dart.getSetters(toggleable.RenderToggleable.__proto__),
    [_positionController]: animation_controller.AnimationController,
    [_position]: animations.CurvedAnimation,
    [_reactionController]: animation_controller.AnimationController,
    [_reaction]: animation.Animation$(core.double),
    [_reactionFocusFadeController]: animation_controller.AnimationController,
    [_reactionFocusFade]: animation.Animation$(core.double),
    [_reactionHoverFadeController]: animation_controller.AnimationController,
    [_reactionHoverFade]: animation.Animation$(core.double),
    hasFocus: core.bool,
    hovering: core.bool,
    vsync: ticker.TickerProvider,
    value: dart.nullable(core.bool),
    tristate: core.bool,
    activeColor: ui.Color,
    inactiveColor: ui.Color,
    hoverColor: ui.Color,
    focusColor: ui.Color,
    reactionColor: dart.nullable(ui.Color),
    splashRadius: core.double,
    onChanged: dart.nullable(dart.fnType(dart.void, [dart.nullable(core.bool)])),
    [_tap]: tap.TapGestureRecognizer
  }));
  dart.setLibraryUri(toggleable.RenderToggleable, L1);
  dart.setFieldSignature(toggleable.RenderToggleable, () => ({
    __proto__: dart.getFields(toggleable.RenderToggleable.__proto__),
    [__RenderToggleable__positionController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__RenderToggleable__positionController_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__position]: dart.fieldType(dart.nullable(animations.CurvedAnimation)),
    [__RenderToggleable__position_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__reactionController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__RenderToggleable__reactionController_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__reaction]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [__RenderToggleable__reaction_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__reactionFocusFadeController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__RenderToggleable__reactionFocusFadeController_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__reactionFocusFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [__RenderToggleable__reactionFocusFade_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__reactionHoverFadeController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__RenderToggleable__reactionHoverFadeController_isSet]: dart.fieldType(core.bool),
    [__RenderToggleable__reactionHoverFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [__RenderToggleable__reactionHoverFade_isSet]: dart.fieldType(core.bool),
    [_hasFocus]: dart.fieldType(core.bool),
    [_hovering]: dart.fieldType(core.bool),
    [_vsync]: dart.fieldType(ticker.TickerProvider),
    [_value]: dart.fieldType(dart.nullable(core.bool)),
    [_tristate]: dart.fieldType(core.bool),
    [_activeColor]: dart.fieldType(ui.Color),
    [_inactiveColor]: dart.fieldType(ui.Color),
    [_hoverColor]: dart.fieldType(ui.Color),
    [_focusColor]: dart.fieldType(ui.Color),
    [_reactionColor]: dart.fieldType(dart.nullable(ui.Color)),
    [_splashRadius]: dart.fieldType(core.double),
    [_onChanged]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.bool)]))),
    [__RenderToggleable__tap]: dart.fieldType(dart.nullable(tap.TapGestureRecognizer)),
    [__RenderToggleable__tap_isSet]: dart.fieldType(core.bool),
    [_downPosition]: dart.fieldType(dart.nullable(ui.Offset))
  }));
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C5;
  var C6;
  dart.defineLazy(toggleable, {
    /*toggleable._kToggleDuration*/get _kToggleDuration() {
      return C5 || CT.C5;
    },
    /*toggleable._kReactionFadeDuration*/get _kReactionFadeDuration() {
      return C6 || CT.C6;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/toggleable.dart", {
    "package:flutter/src/material/toggleable.dart": toggleable
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["toggleable.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/material/toggleable.dart.lib.js"}');
  // Exports:
  return {
    src__material__toggleable: toggleable
  };
}));

//# sourceMappingURL=toggleable.dart.lib.js.map
