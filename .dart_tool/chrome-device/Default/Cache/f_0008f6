define(['dart_sdk', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/rendering/viewport_offset.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/animation/curves.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/gestures/hit_test.dart'], (function load__packages__bezier_chart__src__my_single_child_scroll_view_dart(dart_sdk, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__rendering__viewport_offset$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__animation__curves$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__gestures__hit_test$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const primary_scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__primary_scroll_controller;
  const scrollable$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scrollable;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const scroll_controller = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_controller;
  const scroll_physics = packages__flutter__src__widgets__widget_span$46dart.src__widgets__scroll_physics;
  const viewport_offset = packages__flutter__src__rendering__viewport_offset$46dart.src__rendering__viewport_offset;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const viewport = packages__flutter__src__rendering__sliver$46dart.src__rendering__viewport;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  var my_single_child_scroll_view = Object.create(dart.library);
  var _LocationL = () => (_LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))();
  var _SingleChildViewportL = () => (_SingleChildViewportL = dart.constFn(dart.legacy(my_single_child_scroll_view._SingleChildViewport)))();
  var BuildContextL = () => (BuildContextL = dart.constFn(dart.legacy(framework.BuildContext)))();
  var ViewportOffsetL = () => (ViewportOffsetL = dart.constFn(dart.legacy(viewport_offset.ViewportOffset)))();
  var BuildContextLAndViewportOffsetLTo_SingleChildViewportL = () => (BuildContextLAndViewportOffsetLTo_SingleChildViewportL = dart.constFn(dart.fnType(_SingleChildViewportL(), [BuildContextL(), ViewportOffsetL()])))();
  var _RenderSingleChildViewportL = () => (_RenderSingleChildViewportL = dart.constFn(dart.legacy(my_single_child_scroll_view._RenderSingleChildViewport)))();
  var RenderObjectL = () => (RenderObjectL = dart.constFn(dart.legacy(object.RenderObject)))();
  var ParentDataL = () => (ParentDataL = dart.constFn(dart.legacy(object.ParentData)))();
  var PipelineOwnerL = () => (PipelineOwnerL = dart.constFn(dart.legacy(object.PipelineOwner)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var PaintingContextL = () => (PaintingContextL = dart.constFn(dart.legacy(object.PaintingContext)))();
  var OffsetL = () => (OffsetL = dart.constFn(dart.legacy(ui.Offset)))();
  var PaintingContextLAndOffsetLTovoid = () => (PaintingContextLAndOffsetLTovoid = dart.constFn(dart.fnType(dart.void, [PaintingContextL(), OffsetL()])))();
  var RenderBoxL = () => (RenderBoxL = dart.constFn(dart.legacy(box.RenderBox)))();
  const CT = Object.create(null);
  var L1 = "package:bezier_chart/src/my_single_child_scroll_view.dart";
  var L0 = "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/bezier_chart-1.0.17+1/lib/src/my_single_child_scroll_view.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: recognizer.DragStartBehavior.prototype,
        [_name$]: "DragStartBehavior.start",
        index: 1
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 45,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 63,
        [_Location_line]: 101,
        [_Location_file]: null
      });
    },
    get C3() {
      return C3 = dart.constList([C4 || CT.C4, C5 || CT.C5], _LocationL());
    },
    get C2() {
      return C2 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C3 || CT.C3,
        [_Location_name]: null,
        [_Location_column]: 37,
        [_Location_line]: 101,
        [_Location_file]: "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/bezier_chart-1.0.17+1/lib/src/my_single_child_scroll_view.dart"
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 11,
        [_Location_line]: 111,
        [_Location_file]: null
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "offset",
        [_Location_column]: 11,
        [_Location_line]: 112,
        [_Location_file]: null
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 113,
        [_Location_file]: null
      });
    },
    get C7() {
      return C7 = dart.constList([C8 || CT.C8, C9 || CT.C9, C10 || CT.C10], _LocationL());
    },
    get C6() {
      return C6 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C7 || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 110,
        [_Location_file]: "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/bezier_chart-1.0.17+1/lib/src/my_single_child_scroll_view.dart"
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "dragStartBehavior",
        [_Location_column]: 7,
        [_Location_line]: 105,
        [_Location_file]: null
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "axisDirection",
        [_Location_column]: 7,
        [_Location_line]: 106,
        [_Location_file]: null
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "controller",
        [_Location_column]: 7,
        [_Location_line]: 107,
        [_Location_file]: null
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "physics",
        [_Location_column]: 7,
        [_Location_line]: 108,
        [_Location_file]: null
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewportBuilder",
        [_Location_column]: 7,
        [_Location_line]: 109,
        [_Location_file]: null
      });
    },
    get C12() {
      return C12 = dart.constList([C13 || CT.C13, C14 || CT.C14, C15 || CT.C15, C16 || CT.C16, C17 || CT.C17], _LocationL());
    },
    get C11() {
      return C11 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C12 || CT.C12,
        [_Location_name]: null,
        [_Location_column]: 35,
        [_Location_line]: 104,
        [_Location_file]: "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/bezier_chart-1.0.17+1/lib/src/my_single_child_scroll_view.dart"
      });
    },
    get C20() {
      return C20 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 40,
        [_Location_line]: 118,
        [_Location_file]: null
      });
    },
    get C19() {
      return C19 = dart.constList([C20 || CT.C20], _LocationL());
    },
    get C18() {
      return C18 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C19 || CT.C19,
        [_Location_name]: null,
        [_Location_column]: 35,
        [_Location_line]: 118,
        [_Location_file]: "file:///C:/Users/MKM/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/bezier_chart-1.0.17+1/lib/src/my_single_child_scroll_view.dart"
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.down",
        index: 2
      });
    },
    get C22() {
      return C22 = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.up",
        index: 0
      });
    },
    get C24() {
      return C24 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.left",
        index: 3
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.right",
        index: 1
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C27() {
      return C27 = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1,
        [Cubic_c]: 0.25,
        [Cubic_b]: 0.1,
        [Cubic_a]: 0.25
      });
    }
  }, false);
  var _name = dart.privateName(basic_types, "_name");
  var C0;
  var _name$ = dart.privateName(recognizer, "_name");
  var C1;
  var _getDirection = dart.privateName(my_single_child_scroll_view, "_getDirection");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var C4;
  var C5;
  var C3;
  var C2;
  var C8;
  var C9;
  var C10;
  var C7;
  var C6;
  var C13;
  var C14;
  var C15;
  var C16;
  var C17;
  var C12;
  var C11;
  var C20;
  var C19;
  var C18;
  var scrollDirection$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.scrollDirection");
  var reverse$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.reverse");
  var padding$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.padding");
  var controller$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.controller");
  var primary$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.primary");
  var physics$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.physics");
  var child$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.child");
  var dragStartBehavior$ = dart.privateName(my_single_child_scroll_view, "MySingleChildScrollView.dragStartBehavior");
  my_single_child_scroll_view.MySingleChildScrollView = class MySingleChildScrollView extends framework.StatelessWidget {
    get scrollDirection() {
      return this[scrollDirection$];
    }
    set scrollDirection(value) {
      super.scrollDirection = value;
    }
    get reverse() {
      return this[reverse$];
    }
    set reverse(value) {
      super.reverse = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get controller() {
      return this[controller$];
    }
    set controller(value) {
      super.controller = value;
    }
    get primary() {
      return this[primary$];
    }
    set primary(value) {
      super.primary = value;
    }
    get physics() {
      return this[physics$];
    }
    set physics(value) {
      super.physics = value;
    }
    get child() {
      return this[child$];
    }
    set child(value) {
      super.child = value;
    }
    get dragStartBehavior() {
      return this[dragStartBehavior$];
    }
    set dragStartBehavior(value) {
      super.dragStartBehavior = value;
    }
    [_getDirection](context) {
      return basic.getAxisDirectionFromAxisReverseAndDirectionality(context, this.scrollDirection, this.reverse);
    }
    build(context) {
      let axisDirection = this[_getDirection](context);
      let contents = this.child;
      if (this.padding != null) contents = new basic.Padding.new({padding: this.padding, child: contents, $creationLocationd_0dea112b090073317d4: C2 || CT.C2});
      let scrollController = dart.test(this.primary) ? primary_scroll_controller.PrimaryScrollController.of(context) : this.controller;
      let scrollable = new scrollable$.Scrollable.new({dragStartBehavior: this.dragStartBehavior, axisDirection: axisDirection, controller: scrollController, physics: this.physics, viewportBuilder: dart.fn((context, offset) => new my_single_child_scroll_view._SingleChildViewport.new({axisDirection: axisDirection, offset: offset, child: contents, $creationLocationd_0dea112b090073317d4: C6 || CT.C6}), BuildContextLAndViewportOffsetLTo_SingleChildViewportL()), $creationLocationd_0dea112b090073317d4: C11 || CT.C11});
      return dart.test(this.primary) && scrollController != null ? new primary_scroll_controller.PrimaryScrollController.none({child: scrollable, $creationLocationd_0dea112b090073317d4: C18 || CT.C18}) : scrollable;
    }
  };
  (my_single_child_scroll_view.MySingleChildScrollView.new = function(opts) {
    let t0;
    let key = opts && 'key' in opts ? opts.key : null;
    let scrollDirection = opts && 'scrollDirection' in opts ? opts.scrollDirection : C0 || CT.C0;
    let reverse = opts && 'reverse' in opts ? opts.reverse : false;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let primary = opts && 'primary' in opts ? opts.primary : null;
    let physics = opts && 'physics' in opts ? opts.physics : null;
    let controller = opts && 'controller' in opts ? opts.controller : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let dragStartBehavior = opts && 'dragStartBehavior' in opts ? opts.dragStartBehavior : C1 || CT.C1;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[scrollDirection$] = scrollDirection;
    this[reverse$] = reverse;
    this[padding$] = padding;
    this[physics$] = physics;
    this[controller$] = controller;
    this[child$] = child;
    this[dragStartBehavior$] = dragStartBehavior;
    if (!(scrollDirection != null)) dart.assertFailed(null, L0, 20, 16, "scrollDirection != null");
    if (!(dragStartBehavior != null)) dart.assertFailed(null, L0, 21, 16, "dragStartBehavior != null");
    if (!!(controller != null && dart.equals(primary, true))) dart.assertFailed("Primary ScrollViews obtain their ScrollController via inheritance from a PrimaryScrollController widget. " + "You cannot both set primary to true and pass an explicit controller.", L0, 23, 13, "!(controller != null && primary == true)");
    this[primary$] = (t0 = primary, t0 == null ? controller == null && scrollDirection == basic_types.Axis.vertical : t0);
    my_single_child_scroll_view.MySingleChildScrollView.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = my_single_child_scroll_view.MySingleChildScrollView.prototype;
  dart.addTypeTests(my_single_child_scroll_view.MySingleChildScrollView);
  dart.addTypeCaches(my_single_child_scroll_view.MySingleChildScrollView);
  dart.setMethodSignature(my_single_child_scroll_view.MySingleChildScrollView, () => ({
    __proto__: dart.getMethods(my_single_child_scroll_view.MySingleChildScrollView.__proto__),
    [_getDirection]: dart.fnType(dart.legacy(basic_types.AxisDirection), [dart.legacy(framework.BuildContext)]),
    build: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(framework.BuildContext)])
  }));
  dart.setLibraryUri(my_single_child_scroll_view.MySingleChildScrollView, L1);
  dart.setFieldSignature(my_single_child_scroll_view.MySingleChildScrollView, () => ({
    __proto__: dart.getFields(my_single_child_scroll_view.MySingleChildScrollView.__proto__),
    scrollDirection: dart.finalFieldType(dart.legacy(basic_types.Axis)),
    reverse: dart.finalFieldType(dart.legacy(core.bool)),
    padding: dart.finalFieldType(dart.legacy(edge_insets.EdgeInsetsGeometry)),
    controller: dart.finalFieldType(dart.legacy(scroll_controller.ScrollController)),
    primary: dart.finalFieldType(dart.legacy(core.bool)),
    physics: dart.finalFieldType(dart.legacy(scroll_physics.ScrollPhysics)),
    child: dart.finalFieldType(dart.legacy(framework.Widget)),
    dragStartBehavior: dart.finalFieldType(dart.legacy(recognizer.DragStartBehavior))
  }));
  var C21;
  var axisDirection$ = dart.privateName(my_single_child_scroll_view, "_SingleChildViewport.axisDirection");
  var offset$ = dart.privateName(my_single_child_scroll_view, "_SingleChildViewport.offset");
  my_single_child_scroll_view._SingleChildViewport = class _SingleChildViewport extends framework.SingleChildRenderObjectWidget {
    get axisDirection() {
      return this[axisDirection$];
    }
    set axisDirection(value) {
      super.axisDirection = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    createRenderObject(context) {
      return new my_single_child_scroll_view._RenderSingleChildViewport.new({axisDirection: this.axisDirection, offset: this.offset});
    }
    updateRenderObject(context, renderObject) {
      let t0;
      _RenderSingleChildViewportL().as(renderObject);
      t0 = renderObject;
      (() => {
        t0.axisDirection = this.axisDirection;
        t0.offset = this.offset;
        return t0;
      })();
    }
  };
  (my_single_child_scroll_view._SingleChildViewport.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C21 || CT.C21;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[axisDirection$] = axisDirection;
    this[offset$] = offset;
    if (!(axisDirection != null)) dart.assertFailed(null, L0, 129, 16, "axisDirection != null");
    my_single_child_scroll_view._SingleChildViewport.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = my_single_child_scroll_view._SingleChildViewport.prototype;
  dart.addTypeTests(my_single_child_scroll_view._SingleChildViewport);
  dart.addTypeCaches(my_single_child_scroll_view._SingleChildViewport);
  dart.setMethodSignature(my_single_child_scroll_view._SingleChildViewport, () => ({
    __proto__: dart.getMethods(my_single_child_scroll_view._SingleChildViewport.__proto__),
    createRenderObject: dart.fnType(dart.legacy(my_single_child_scroll_view._RenderSingleChildViewport), [dart.legacy(framework.BuildContext)]),
    updateRenderObject: dart.fnType(dart.void, [dart.legacy(framework.BuildContext), dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(my_single_child_scroll_view._SingleChildViewport, L1);
  dart.setFieldSignature(my_single_child_scroll_view._SingleChildViewport, () => ({
    __proto__: dart.getFields(my_single_child_scroll_view._SingleChildViewport.__proto__),
    axisDirection: dart.finalFieldType(dart.legacy(basic_types.AxisDirection)),
    offset: dart.finalFieldType(dart.legacy(viewport_offset.ViewportOffset))
  }));
  var _axisDirection = dart.privateName(my_single_child_scroll_view, "_axisDirection");
  var _offset = dart.privateName(my_single_child_scroll_view, "_offset");
  var _cacheExtent = dart.privateName(my_single_child_scroll_view, "_cacheExtent");
  var _hasScrolled = dart.privateName(my_single_child_scroll_view, "_hasScrolled");
  var C22;
  var _viewportExtent = dart.privateName(my_single_child_scroll_view, "_viewportExtent");
  var _minScrollExtent = dart.privateName(my_single_child_scroll_view, "_minScrollExtent");
  var _maxScrollExtent = dart.privateName(my_single_child_scroll_view, "_maxScrollExtent");
  var _getInnerConstraints = dart.privateName(my_single_child_scroll_view, "_getInnerConstraints");
  var _paintOffsetForPosition = dart.privateName(my_single_child_scroll_view, "_paintOffsetForPosition");
  var _paintOffset = dart.privateName(my_single_child_scroll_view, "_paintOffset");
  var C23;
  var C24;
  var C25;
  var _shouldClipAtPaintOffset = dart.privateName(my_single_child_scroll_view, "_shouldClipAtPaintOffset");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C26;
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var C27;
  const RenderBox_RenderObjectWithChildMixin$36 = class RenderBox_RenderObjectWithChildMixin extends box.RenderBox {};
  (RenderBox_RenderObjectWithChildMixin$36.new = function() {
    object.RenderObjectWithChildMixin$(dart.legacy(box.RenderBox))[dart.mixinNew].call(this);
    RenderBox_RenderObjectWithChildMixin$36.__proto__.new.call(this);
  }).prototype = RenderBox_RenderObjectWithChildMixin$36.prototype;
  dart.applyMixin(RenderBox_RenderObjectWithChildMixin$36, object.RenderObjectWithChildMixin$(dart.legacy(box.RenderBox)));
  my_single_child_scroll_view._RenderSingleChildViewport = class _RenderSingleChildViewport extends RenderBox_RenderObjectWithChildMixin$36 {
    get axisDirection() {
      return this[_axisDirection];
    }
    set axisDirection(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 173, 12, "value != null");
      if (dart.equals(value, this[_axisDirection])) return;
      this[_axisDirection] = value;
      this.markNeedsLayout();
    }
    get axis() {
      return basic_types.axisDirectionToAxis(this.axisDirection);
    }
    get offset() {
      return this[_offset];
    }
    set offset(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 184, 12, "value != null");
      if (dart.equals(value, this[_offset])) return;
      if (dart.test(this.attached)) this[_offset].removeListener(dart.bind(this, _hasScrolled));
      this[_offset] = value;
      if (dart.test(this.attached)) this[_offset].addListener(dart.bind(this, _hasScrolled));
      this.markNeedsLayout();
    }
    get cacheExtent() {
      return this[_cacheExtent];
    }
    set cacheExtent(value) {
      if (!(value != null)) dart.assertFailed(null, L0, 196, 12, "value != null");
      if (value == this[_cacheExtent]) return;
      this[_cacheExtent] = value;
      this.markNeedsLayout();
    }
    [_hasScrolled]() {
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    setupParentData(child) {
      RenderObjectL().as(child);
      if (!ParentDataL().is(child.parentData)) child.parentData = new object.ParentData.new();
    }
    attach(owner) {
      PipelineOwnerL().as(owner);
      super.attach(owner);
      this[_offset].addListener(dart.bind(this, _hasScrolled));
    }
    detach() {
      this[_offset].removeListener(dart.bind(this, _hasScrolled));
      super.detach();
    }
    get isRepaintBoundary() {
      return true;
    }
    get [_viewportExtent]() {
      if (!dart.test(this.hasSize)) dart.assertFailed(null, L0, 230, 12, "hasSize");
      switch (this.axis) {
        case C22 || CT.C22:
        {
          return this.size.width;
        }
        case C0 || CT.C0:
        {
          return this.size.height;
        }
      }
      return null;
    }
    get [_minScrollExtent]() {
      if (!dart.test(this.hasSize)) dart.assertFailed(null, L0, 241, 12, "hasSize");
      return 0.0;
    }
    get [_maxScrollExtent]() {
      if (!dart.test(this.hasSize)) dart.assertFailed(null, L0, 246, 12, "hasSize");
      if (this.child == null) return 0.0;
      switch (this.axis) {
        case C22 || CT.C22:
        {
          return math.max(doubleL(), 0.0, dart.notNull(this.child.size.width) - dart.notNull(this.size.width));
        }
        case C0 || CT.C0:
        {
          return math.max(doubleL(), 0.0, dart.notNull(this.child.size.height) - dart.notNull(this.size.height));
        }
      }
      return null;
    }
    [_getInnerConstraints](constraints) {
      switch (this.axis) {
        case C22 || CT.C22:
        {
          return constraints.heightConstraints();
        }
        case C0 || CT.C0:
        {
          return constraints.widthConstraints();
        }
      }
      return null;
    }
    computeMinIntrinsicWidth(height) {
      if (this.child != null) return this.child.getMinIntrinsicWidth(height);
      return 0.0;
    }
    computeMaxIntrinsicWidth(height) {
      if (this.child != null) return this.child.getMaxIntrinsicWidth(height);
      return 0.0;
    }
    computeMinIntrinsicHeight(width) {
      if (this.child != null) return this.child.getMinIntrinsicHeight(width);
      return 0.0;
    }
    computeMaxIntrinsicHeight(width) {
      if (this.child != null) return this.child.getMaxIntrinsicHeight(width);
      return 0.0;
    }
    performLayout() {
      if (this.child == null) {
        this.size = this.constraints.smallest;
      } else {
        this.child.layout(this[_getInnerConstraints](this.constraints), {parentUsesSize: true});
        this.size = this.constraints.constrain(this.child.size);
      }
      this.offset.applyViewportDimension(this[_viewportExtent]);
      this.offset.applyContentDimensions(this[_minScrollExtent], this[_maxScrollExtent]);
    }
    get [_paintOffset]() {
      return this[_paintOffsetForPosition](this.offset.pixels);
    }
    [_paintOffsetForPosition](position) {
      if (!(this.axisDirection != null)) dart.assertFailed(null, L0, 312, 12, "axisDirection != null");
      switch (this.axisDirection) {
        case C23 || CT.C23:
        {
          return new ui.Offset.new(0.0, dart.notNull(position) - dart.notNull(this.child.size.height) + dart.notNull(this.size.height));
        }
        case C21 || CT.C21:
        {
          return new ui.Offset.new(0.0, -dart.notNull(position));
        }
        case C24 || CT.C24:
        {
          return new ui.Offset.new(dart.notNull(position) - dart.notNull(this.child.size.width) + dart.notNull(this.size.width), 0.0);
        }
        case C25 || CT.C25:
        {
          return new ui.Offset.new(-dart.notNull(position), 0.0);
        }
      }
      return null;
    }
    [_shouldClipAtPaintOffset](paintOffset) {
      if (!(this.child != null)) dart.assertFailed(null, L0, 327, 12, "child != null");
      return dart.test(paintOffset['<'](ui.Offset.zero)) || !dart.test(ui.Offset.zero['&'](this.size).contains(paintOffset['&'](this.child.size).bottomRight));
    }
    paint(context, offset) {
      if (this.child != null) {
        let paintOffset = this[_paintOffset];
        const paintContents = (context, offset) => {
          context.paintChild(this.child, offset['+'](paintOffset));
        };
        dart.fn(paintContents, PaintingContextLAndOffsetLTovoid());
        if (dart.test(this[_shouldClipAtPaintOffset](paintOffset))) {
          let clipRect = new ui.Rect.fromLTWH(0.0, -dart.notNull(this.size.height) / 2, this.size.width, dart.notNull(this.size.height) * 1.5);
          context.pushClipRect(this.needsCompositing, offset, clipRect, paintContents);
        } else {
          paintContents(context, offset);
        }
      }
    }
    applyPaintTransform(child, transform) {
      RenderBoxL().as(child);
      let paintOffset = this[_paintOffset];
      transform.translate(paintOffset.dx, paintOffset.dy);
    }
    describeApproximatePaintClip(child) {
      RenderObjectL().as(child);
      if (child != null && dart.test(this[_shouldClipAtPaintOffset](this[_paintOffset]))) return ui.Offset.zero['&'](this.size);
      return null;
    }
    hitTestChildren(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (this.child != null) {
        let transformed = position['+'](this[_paintOffset]._negate());
        return this.child.hitTest(box.BoxHitTestResult.as(result), {position: transformed});
      }
      return false;
    }
    getOffsetToReveal(target, alignment, opts) {
      let rect = opts && 'rect' in opts ? opts.rect : null;
      rect == null ? rect = target.paintBounds : null;
      if (!RenderBoxL().is(target)) return new viewport.RevealedOffset.new({offset: this.offset.pixels, rect: rect});
      let targetBox = RenderBoxL().as(target);
      let transform = targetBox.getTransformTo(this);
      let bounds = matrix_utils.MatrixUtils.transformRect(transform, rect);
      let contentSize = this.child.size;
      let leadingScrollOffset = null;
      let targetMainAxisExtent = null;
      let mainAxisExtent = null;
      if (!(this.axisDirection != null)) dart.assertFailed(null, L0, 389, 12, "axisDirection != null");
      switch (this.axisDirection) {
        case C23 || CT.C23:
        {
          mainAxisExtent = this.size.height;
          leadingScrollOffset = dart.notNull(contentSize.height) - dart.notNull(bounds.bottom);
          targetMainAxisExtent = bounds.height;
          break;
        }
        case C25 || CT.C25:
        {
          mainAxisExtent = this.size.width;
          leadingScrollOffset = bounds.left;
          targetMainAxisExtent = bounds.width;
          break;
        }
        case C21 || CT.C21:
        {
          mainAxisExtent = this.size.height;
          leadingScrollOffset = bounds.top;
          targetMainAxisExtent = bounds.height;
          break;
        }
        case C24 || CT.C24:
        {
          mainAxisExtent = this.size.width;
          leadingScrollOffset = dart.notNull(contentSize.width) - dart.notNull(bounds.right);
          targetMainAxisExtent = bounds.width;
          break;
        }
      }
      let targetOffset = dart.notNull(leadingScrollOffset) - (dart.notNull(mainAxisExtent) - dart.notNull(targetMainAxisExtent)) * dart.notNull(alignment);
      let targetRect = bounds.shift(this[_paintOffsetForPosition](targetOffset));
      return new viewport.RevealedOffset.new({offset: targetOffset, rect: targetRect});
    }
    showOnScreen(opts) {
      let descendant = opts && 'descendant' in opts ? opts.descendant : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let duration = opts && 'duration' in opts ? opts.duration : C26 || CT.C26;
      let curve = opts && 'curve' in opts ? opts.curve : C27 || CT.C27;
      if (!dart.test(this.offset.allowImplicitScrolling)) {
        return super.showOnScreen({descendant: descendant, rect: rect, duration: duration, curve: curve});
      }
      let newRect = viewport.RenderViewportBase.showInViewport({descendant: descendant, viewport: this, offset: this.offset, rect: rect, duration: duration, curve: curve});
      super.showOnScreen({rect: newRect, duration: duration, curve: curve});
    }
    describeSemanticsClip(child) {
      RenderObjectL().as(child);
      if (!(this.axis != null)) dart.assertFailed(null, L0, 452, 12, "axis != null");
      switch (this.axis) {
        case C0 || CT.C0:
        {
          return new ui.Rect.fromLTRB(this.semanticBounds.left, dart.notNull(this.semanticBounds.top) - dart.notNull(this.cacheExtent), this.semanticBounds.right, dart.notNull(this.semanticBounds.bottom) + dart.notNull(this.cacheExtent));
        }
        case C22 || CT.C22:
        {
          return new ui.Rect.fromLTRB(dart.notNull(this.semanticBounds.left) - dart.notNull(this.cacheExtent), this.semanticBounds.top, dart.notNull(this.semanticBounds.right) + dart.notNull(this.cacheExtent), this.semanticBounds.bottom);
        }
      }
      return null;
    }
  };
  (my_single_child_scroll_view._RenderSingleChildViewport.new = function(opts) {
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C21 || CT.C21;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let cacheExtent = opts && 'cacheExtent' in opts ? opts.cacheExtent : 250;
    let child = opts && 'child' in opts ? opts.child : null;
    if (!(axisDirection != null)) dart.assertFailed(null, L0, 161, 16, "axisDirection != null");
    if (!(offset != null)) dart.assertFailed(null, L0, 162, 16, "offset != null");
    if (!(cacheExtent != null)) dart.assertFailed(null, L0, 163, 16, "cacheExtent != null");
    this[_axisDirection] = axisDirection;
    this[_offset] = offset;
    this[_cacheExtent] = cacheExtent;
    my_single_child_scroll_view._RenderSingleChildViewport.__proto__.new.call(this);
    this.child = child;
  }).prototype = my_single_child_scroll_view._RenderSingleChildViewport.prototype;
  dart.addTypeTests(my_single_child_scroll_view._RenderSingleChildViewport);
  dart.addTypeCaches(my_single_child_scroll_view._RenderSingleChildViewport);
  my_single_child_scroll_view._RenderSingleChildViewport[dart.implements] = () => [viewport.RenderAbstractViewport];
  dart.setMethodSignature(my_single_child_scroll_view._RenderSingleChildViewport, () => ({
    __proto__: dart.getMethods(my_single_child_scroll_view._RenderSingleChildViewport.__proto__),
    [_hasScrolled]: dart.fnType(dart.void, []),
    setupParentData: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    attach: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_getInnerConstraints]: dart.fnType(dart.legacy(box.BoxConstraints), [dart.legacy(box.BoxConstraints)]),
    computeMinIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMaxIntrinsicWidth: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMinIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    computeMaxIntrinsicHeight: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    [_paintOffsetForPosition]: dart.fnType(dart.legacy(ui.Offset), [dart.legacy(core.double)]),
    [_shouldClipAtPaintOffset]: dart.fnType(dart.legacy(core.bool), [dart.legacy(ui.Offset)]),
    paint: dart.fnType(dart.void, [dart.legacy(object.PaintingContext), dart.legacy(ui.Offset)]),
    applyPaintTransform: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(vector_math_64.Matrix4)]),
    describeApproximatePaintClip: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(core.Object)]),
    hitTestChildren: dart.fnType(dart.legacy(core.bool), [dart.legacy(hit_test.HitTestResult)], {position: dart.legacy(ui.Offset)}, {}),
    getOffsetToReveal: dart.fnType(dart.legacy(viewport.RevealedOffset), [dart.legacy(object.RenderObject), dart.legacy(core.double)], {rect: dart.legacy(ui.Rect)}, {}),
    showOnScreen: dart.fnType(dart.void, [], {curve: dart.legacy(curves.Curve), descendant: dart.legacy(object.RenderObject), duration: dart.legacy(core.Duration), rect: dart.legacy(ui.Rect)}, {}),
    describeSemanticsClip: dart.fnType(dart.legacy(ui.Rect), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(my_single_child_scroll_view._RenderSingleChildViewport, () => ({
    __proto__: dart.getGetters(my_single_child_scroll_view._RenderSingleChildViewport.__proto__),
    axisDirection: dart.legacy(basic_types.AxisDirection),
    axis: dart.legacy(basic_types.Axis),
    offset: dart.legacy(viewport_offset.ViewportOffset),
    cacheExtent: dart.legacy(core.double),
    isRepaintBoundary: dart.legacy(core.bool),
    [_viewportExtent]: dart.legacy(core.double),
    [_minScrollExtent]: dart.legacy(core.double),
    [_maxScrollExtent]: dart.legacy(core.double),
    [_paintOffset]: dart.legacy(ui.Offset)
  }));
  dart.setSetterSignature(my_single_child_scroll_view._RenderSingleChildViewport, () => ({
    __proto__: dart.getSetters(my_single_child_scroll_view._RenderSingleChildViewport.__proto__),
    axisDirection: dart.legacy(basic_types.AxisDirection),
    offset: dart.legacy(viewport_offset.ViewportOffset),
    cacheExtent: dart.legacy(core.double)
  }));
  dart.setLibraryUri(my_single_child_scroll_view._RenderSingleChildViewport, L1);
  dart.setFieldSignature(my_single_child_scroll_view._RenderSingleChildViewport, () => ({
    __proto__: dart.getFields(my_single_child_scroll_view._RenderSingleChildViewport.__proto__),
    [_axisDirection]: dart.fieldType(dart.legacy(basic_types.AxisDirection)),
    [_offset]: dart.fieldType(dart.legacy(viewport_offset.ViewportOffset)),
    [_cacheExtent]: dart.fieldType(dart.legacy(core.double))
  }));
  dart.trackLibraries("packages/bezier_chart/src/my_single_child_scroll_view.dart", {
    "package:bezier_chart/src/my_single_child_scroll_view.dart": my_single_child_scroll_view
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["my_single_child_scroll_view.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/bezier_chart/src/my_single_child_scroll_view.dart.lib.js"}');
  // Exports:
  return {
    src__my_single_child_scroll_view: my_single_child_scroll_view
  };
}));

//# sourceMappingURL=my_single_child_scroll_view.dart.lib.js.map
